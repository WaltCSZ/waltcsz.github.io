{
    "version": "https://jsonfeed.org/version/1",
    "title": "Walt's Blog • All posts by \"linux\" category",
    "description": "",
    "home_page_url": "http://waltcsz.github.io",
    "items": [
        {
            "id": "http://waltcsz.github.io/2023/11/linuxcommand/",
            "url": "http://waltcsz.github.io/2023/11/linuxcommand/",
            "title": "linuxCommand",
            "date_published": "2023-11-18T11:57:00.000Z",
            "content_html": "<h1 id=\"用户\"><a class=\"markdownIt-Anchor\" href=\"#用户\">#</a> 用户</h1>\n<h2 id=\"用户组\"><a class=\"markdownIt-Anchor\" href=\"#用户组\">#</a> 用户组</h2>\n<p>管理员组</p>\n<table>\n<thead>\n<tr>\n<th>系统</th>\n<th>管理员组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CentOS</td>\n<td>wheel</td>\n</tr>\n<tr>\n<td>ubuntu</td>\n<td></td>\n</tr>\n<tr>\n<td>rhel</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"操作\"><a class=\"markdownIt-Anchor\" href=\"#操作\">#</a> 操作</h2>\n<h3 id=\"获取用户列表\"><a class=\"markdownIt-Anchor\" href=\"#获取用户列表\">#</a> 获取用户列表</h3>\n<p><code>cat /etc/passwd</code>  以以下格式显示用户数据</p>\n<pre><code>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell\n</code></pre>\n<h4 id=\"添加用户\"><a class=\"markdownIt-Anchor\" href=\"#添加用户\">#</a> 添加用户</h4>\n<p>useradd</p>\n<p>参数</p>\n<p>adduser</p>\n<p>参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>实例</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-m</td>\n<td></td>\n<td>创建用户的登陆目录</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>-s /sbin/nologin</td>\n<td>指定用户登陆后使用的 shell</td>\n</tr>\n<tr>\n<td>-g</td>\n<td></td>\n<td>指定用户所属群组</td>\n</tr>\n<tr>\n<td>-G</td>\n<td>-G wheel</td>\n<td>指定用户所属附属群组</td>\n</tr>\n<tr>\n<td>-u</td>\n<td></td>\n<td>指定 uid</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>-c ‘use for game’</td>\n<td>添加备注</td>\n</tr>\n</tbody>\n</table>\n<p>centos</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-m</span> <span class=\"token parameter variable\">-s</span> /bin/bash <span class=\"token parameter variable\">-G</span> wheel user1</pre></td></tr></table></figure><h4 id=\"删除用户\"><a class=\"markdownIt-Anchor\" href=\"#删除用户\">#</a> 删除用户</h4>\n<p>userdel</p>\n<p>-r 清除用户目录和邮箱</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">userdel</span> <span class=\"token parameter variable\">-r</span> user1+</pre></td></tr></table></figure><h2 id=\"密码\"><a class=\"markdownIt-Anchor\" href=\"#密码\">#</a> 密码</h2>\n<p>使用 passwd 命令管理密码。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> <span class=\"token parameter variable\">-l</span> user1\t<span class=\"token comment\"># 禁止密码登陆</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">passwd</span> <span class=\"token parameter variable\">-d</span> user1\t<span class=\"token comment\"># 清除密码免密登陆</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">passwd</span> user1\t<span class=\"token comment\"># 修改指定用户密码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">passwd</span>\t\t\t<span class=\"token comment\"># 修改当前用户密码</span></pre></td></tr></table></figure><h2 id=\"登陆\"><a class=\"markdownIt-Anchor\" href=\"#登陆\">#</a> 登陆</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2EyODE0Njg2NzMvYXJ0aWNsZS9kZXRhaWxzLzkwNzY1NDYz\">Linux 设置 root 密钥登录，普通用户密码登录</span></p>\n<h1 id=\"软件安装\"><a class=\"markdownIt-Anchor\" href=\"#软件安装\">#</a> 软件安装</h1>\n<h2 id=\"centos\"><a class=\"markdownIt-Anchor\" href=\"#centos\">#</a> CentOS</h2>\n<h3 id=\"yum\"><a class=\"markdownIt-Anchor\" href=\"#yum\">#</a> yum</h3>\n<h4 id=\"yum源配置\"><a class=\"markdownIt-Anchor\" href=\"#yum源配置\">#</a> yum 源配置</h4>\n<p>配置文件位于 <code>/etc/yum.repos.d</code>  目录。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>curl <span class=\"token operator\">-</span>o <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>yum<span class=\"token punctuation\">.</span>repos<span class=\"token punctuation\">.</span>d<span class=\"token operator\">/</span>CentOS<span class=\"token operator\">-</span>Base<span class=\"token punctuation\">.</span>repo http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>mirrors<span class=\"token punctuation\">.</span>aliyun<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>repo<span class=\"token operator\">/</span>Centos<span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">.</span>repo <span class=\"token comment\"># 获取阿里的 repo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum clean <span class=\"token builtin\">all</span>\t<span class=\"token comment\"># 清除缓存</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum makecache\t<span class=\"token comment\"># 生成新缓存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum install <span class=\"token operator\">-</span>y epel<span class=\"token operator\">-</span>release <span class=\"token comment\"># epel 源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>yum clean <span class=\"token builtin\">all</span>\t<span class=\"token comment\"># 清除缓存</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>yum makecache\t<span class=\"token comment\"># 生成新缓存</span></pre></td></tr></table></figure><h3 id=\"rpm\"><a class=\"markdownIt-Anchor\" href=\"#rpm\">#</a> rpm</h3>\n<h4 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h4>\n<pre><code>rpm -i 文件\n</code></pre>\n<p>参数</p>\n<ul>\n<li>-i 指定包名</li>\n<li>-v 显示安装信息</li>\n<li>-h 显示安装进度</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> example.rpm</pre></td></tr></table></figure><h4 id=\"查询\"><a class=\"markdownIt-Anchor\" href=\"#查询\">#</a> 查询</h4>\n<pre><code>rpm -q .\n</code></pre>\n<h4 id=\"卸载\"><a class=\"markdownIt-Anchor\" href=\"#卸载\">#</a> 卸载</h4>\n<pre><code>rpm -e\n</code></pre>\n<h1 id=\"其他命令\"><a class=\"markdownIt-Anchor\" href=\"#其他命令\">#</a> 其他命令</h1>\n<p>结束进程</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span> 进程号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">killall</span> <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span> 进程名称</pre></td></tr></table></figure><ul>\n<li>-8 强制结束</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-8</span> <span class=\"token function\">vim</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://waltcsz.github.io/2023/11/docker/",
            "url": "http://waltcsz.github.io/2023/11/docker/",
            "title": "docker",
            "date_published": "2023-11-17T17:40:18.000Z",
            "content_html": "<p>docker 使用</p>\n<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>docker 是一款精简的虚拟机。</p>\n<p><strong>image 镜像</strong>：储存固定的系统镜像。类似模板，类，或者类似 VMware 虚拟机的快照。</p>\n<p><strong>container 容器</strong>：从镜像生成出的实例。类似成品，对象，或者正常情况的 vmware 虚拟机。储存运行时的任何修改。</p>\n<p>一个 image 可以生成出很多 container。container 可以保存为 image，然后供自己或他人后续使用。</p>\n<h1 id=\"包含\"><a class=\"markdownIt-Anchor\" href=\"#包含\">#</a> 包含</h1>\n<p>虚拟机包含的软件。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dhbGxvcHNsZWQvcHdudG9vbHM=\">pwntools</span> —— CTF framework and exploit development library</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B3bmRiZy9wd25kYmc=\">pwndbg</span> —— a GDB plug-in that makes debugging with GDB suck less, with a focus on features needed by low-level software developers, hardware hackers, reverse-engineers and exploit developers</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Njd3VhcHR4L1B3bmdkYg==\">pwngdb</span> —— gdb for pwn</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0pvbmF0aGFuU2Fsd2FuL1JPUGdhZGdldA==\">ROPgadget</span> —— facilitate ROP exploitation tool</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2luYXoyL3JvcHV0aWxz\">roputils</span> —— A Return-oriented Programming toolkit</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkOTQyai9vbmVfZ2FkZ2V0\">one_gadget</span> —— A searching one-gadget of execve(‘/bin/sh’, NULL, NULL) tool for amd64 and i386</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FuZ3IvYW5ncg==\">angr</span> —— A platform-agnostic binary analysis framework</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JhZGFyZS9yYWRhcmUy\">radare2</span> —— A rewrite from scratch of radare in order to provide a set of libraries and tools to work with binary files</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkOTQyai9zZWNjb21wLXRvb2xz\">seccomp-tools</span> —— Provide powerful tools for seccomp analysis</li>\n<li>linux_server[64] —— IDA 7.0 debug server for linux</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90bXV4LmdpdGh1Yi5pby8=\">tmux</span> —— a terminal multiplexer</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8xL2x0cmFjZQ==\">ltrace</span> —— trace library function call</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8xL3N0cmFjZQ==\">strace</span> —— trace system call</li>\n</ul>\n<h2 id=\"ubuntu初始化脚本\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu初始化脚本\">#</a> ubuntu 初始化脚本</h2>\n<p>pwndbg 仅负责 ubuntu22.04 版本及以上的可用性。在低版本可能不适用。github 尤其指出了 ubuntu18.04 已停止支持并给出了最后版本的代码。在安装时还需将 setup.sh 内的 <code>git submodule update --init --recursive</code>  注释掉，因为文件夹内不含 <code>.git</code>  文件夹并且不能更新至最新库。</p>\n<p>同时需要<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW93ZW54aW9uZy9hcnRpY2xlL2RldGFpbHMvMTE2NDAxNTI0\">设置 locale</span>，使得 LC_CTYPE=en_US.UTF-8.</p>\n<pre><code>#!/bin/sh\ncd /root/\nunminimize\napt install vim\napt install git\napt install python3-pip\n#pip3 install setuptools\npip3 install --upgrade pip setuptools\n\nsudo pip3 install pwntools\n\n# git clone https://github.com/pwndbg/pwndbg.git\nif [ ! -f '2023.07.17.tar.gz' ]; then\n\twget https://github.com/pwndbg/pwndbg/archive/refs/tags/2023.07.17.tar.gz\nfi\ntar -xzvf 2023.07.17.tar.gz\nmv pwndbg* ./toolbox/pwndbg\ncd ./toolbox/pwndbg\n./setup.sh\n\n\n</code></pre>\n<h1 id=\"docker容器\"><a class=\"markdownIt-Anchor\" href=\"#docker容器\">#</a> docker 容器</h1>\n<ul>\n<li>ubuntu18.04\tskysider/pwndocker</li>\n</ul>\n<pre><code>docker pull skysider/pwndocker\n</code></pre>\n<ul>\n<li>pwndocker</li>\n</ul>\n<h2 id=\"included-glibc\"><a class=\"markdownIt-Anchor\" href=\"#included-glibc\">#</a> included glibc</h2>\n<p>Default compiled glibc path is  <code>/glibc</code> .</p>\n<ul>\n<li>2.19 —— ubuntu 12.04 default libc version</li>\n<li>2.23 —— ubuntu 16.04 default libc version</li>\n<li>2.24 —— introduce vtable check in file struct</li>\n<li>2.27 —— pwndocker default glibc version</li>\n<li>2.28~2.31 —— latest libc versions</li>\n</ul>\n<h1 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>建议用官方的使用姿势，用如下命令 run 起来</p>\n<pre><code>docker run -d \\\n\t--rm \\\n\t-h $&#123;ctf_name&#125; \\\n\t--name $&#123;ctf_name&#125; \\\n\t-v $(pwd)/$&#123;ctf_name&#125;:/ctf/work \\\n\t-p 23946:23946 \\\n\t--cap-add=SYS_PTRACE \\\n\tskysider/pwndocker\n</code></pre>\n<p>其中有两个重要的参数<br>\n - v <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mi>w</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">(pwd)/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">pw</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mord\">/</span></span></span></span>{ctf_name}:/ctf/work 是将当前目录下的文件映射到 docker /ctf/work 目录下<br>\n这样你在物理机修改文件，docker 里面也会发生变化，就不用再 docker cp 了</p>\n<p>–cap-add=SYS_PTRACE 这个参数也是要一定加的，不然 docker 里面没法用 gdb 调试。</p>\n<p>可以把上述命令放到 pwndocker_run.sh 里面 方便下次使用</p>\n<h2 id=\"多终端调试\"><a class=\"markdownIt-Anchor\" href=\"#多终端调试\">#</a> ？多终端调试</h2>\n<p>然后调试脚本时，要先进去 tmux ，python 脚本里面指定终端为 tmux</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>context<span class=\"token punctuation\">.</span>terminal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tmux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-h'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>就可以 gdb.attach (p) 了 如下图</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> u18 ubuntu:18.04 /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-L</span> u18:/lib/x86_64-linux-gnu/libselinux.so.1 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-L</span> u18:/lib/x86_64-linux-gnu/libpcre2-8.so.0 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> libselinux.so.1 pwn:/glibc/2.28/64/lib/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> libpcre2-8.so.0 pwn:/glibc/2.28/64/lib/</pre></td></tr></table></figure><h2 id=\"docker-进程\"><a class=\"markdownIt-Anchor\" href=\"#docker-进程\">#</a> docker 进程</h2>\n<p>docker 进程启动、停止、重启，常见的三种 case</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">docker</span> start\t<span class=\"token comment\"># 启动 docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">docker</span> stop\t\t<span class=\"token comment\"># 关机 docker</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">docker</span> restart\t<span class=\"token comment\"># 重启 docker</span></pre></td></tr></table></figure><h2 id=\"镜像操作\"><a class=\"markdownIt-Anchor\" href=\"#镜像操作\">#</a> 镜像操作</h2>\n<p>镜像作为容器执行的前提条件，一般需要掌握的几个命令无非是搜索，下载，删除，创建</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images\t\t<span class=\"token comment\"># 镜像列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> search xxx\t<span class=\"token comment\"># 检索镜像，从镜像仓库中检索</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> pull xxx\t\t<span class=\"token comment\"># 下载镜像</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> rmi xxx\t\t<span class=\"token comment\"># 删除镜像</span></pre></td></tr></table></figure><p>关于创建镜像，有必要稍微详细一点点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> commit <span class=\"token parameter variable\">-m</span><span class=\"token operator\">=</span><span class=\"token string\">\"首次提交\"</span> <span class=\"token parameter variable\">-a</span><span class=\"token operator\">=</span><span class=\"token string\">\"一灰灰Blog\"</span> dd85eb055fe8 yh/centos:v0.1\t<span class=\"token comment\"># 通过容器创建镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">history</span> yh/centos\t<span class=\"token comment\"># 镜像历史查询</span></pre></td></tr></table></figure><p>上面的几个参数进行说明</p>\n<ul>\n<li><code>-m</code>  和 git 的提交一样，后面更上描述信息</li>\n<li><code>-a</code>  版权声明，这个东西是我创建的，有啥问题，找我</li>\n<li><code>dd85eb055fe8</code>  容器 id</li>\n<li><code>yhh/quick-os:0.1</code>  创建的镜像名</li>\n</ul>\n<h2 id=\"容器操作\"><a class=\"markdownIt-Anchor\" href=\"#容器操作\">#</a> 容器操作</h2>\n<p>接下来就是正菜了，容器的各种操作，启动，关闭，重启，日志查询以及各种进入容器内部搞事情</p>\n<h2 id=\"创建\"><a class=\"markdownIt-Anchor\" href=\"#创建\">#</a> 创建</h2>\n<p>万事开头第一步，加载镜像，创建容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run 镜像名:版本 程序指令</pre></td></tr></table></figure><p>run 后面可以跟很多的参数，比如容器暴露端口指定，存储映射，权限等等，由于参数过多，下面只给出几个不同的例子，来具体的演示参数可以怎么加 +</p>\n<h3 id=\"常用参数\"><a class=\"markdownIt-Anchor\" href=\"#常用参数\">#</a> 常用参数</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>示例</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-i</td>\n<td></td>\n<td>打开 STDIN，支持交互</td>\n</tr>\n<tr>\n<td>-t</td>\n<td></td>\n<td>支持终端登陆</td>\n</tr>\n<tr>\n<td>-v</td>\n<td></td>\n<td>设置共享文件夹。宿主目录：容器目录</td>\n</tr>\n<tr>\n<td>-d</td>\n<td></td>\n<td>设为后台运行</td>\n</tr>\n<tr>\n<td>–name</td>\n<td>–nam=u18</td>\n<td>指定容器名称</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>-p 8080:80</td>\n<td>暴露端口。宿主端口：容器端口</td>\n</tr>\n<tr>\n<td>–restart</td>\n<td>–restart=always</td>\n<td>程序终止后是否重启</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h3>\n<p>创建交互型容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> centos:latest /bin/bash</pre></td></tr></table></figure><p>创建容器后运行在后台</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-t</span> <span class=\"token parameter variable\">-d</span> centos:latest</pre></td></tr></table></figure><p>创建容器，运行后台，结束后自动重启，设置名称、端口、共享目录。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>yhh_centos <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:80 <span class=\"token parameter variable\">-v</span> /home/yihui/html/www:/var/www centos:latest</pre></td></tr></table></figure><h2 id=\"基础操作\"><a class=\"markdownIt-Anchor\" href=\"#基础操作\">#</a> 基础操作</h2>\n<p>容器创建完毕之后，就是一些基本操作了，启动、停止、重启、删除</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span>\t\t<span class=\"token comment\"># 查看容器列表， 列出所有的容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> start xxx\t<span class=\"token comment\"># 启动容器，start 后面可以跟上容器名，或者容器 id</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># (这里的 xxx 可以是容器名：yhh_centos 也可以是容器 id：f57398ab22c5)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> stop xxx\t\t<span class=\"token comment\"># 关闭容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> restart xxx\t<span class=\"token comment\"># 重启</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> xxx\t\t<span class=\"token comment\"># 删除</span></pre></td></tr></table></figure><p>在查看容器列表时，如果某个容器的启动参数特别长，直接使用 <code>docker ps -a</code>  会发现看不到完整的启动命令，这个时候可以带上参数 <code>--no-trunc</code>  来显示完整命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span> --no-trunc</pre></td></tr></table></figure><h2 id=\"高级操作\"><a class=\"markdownIt-Anchor\" href=\"#高级操作\">#</a> 高级操作</h2>\n<p>接下来进入一些容器的高级操作技巧（实际上也并没有特别酷炫）</p>\n<p>为了演示一些进阶的内容，这里创建一个容器作为测试</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>yhhos centos</pre></td></tr></table></figure><h3 id=\"容器日志查询\"><a class=\"markdownIt-Anchor\" href=\"#容器日志查询\">#</a> 容器日志查询</h3>\n<p>日志，定位问题的神器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> logs yhhos\t<span class=\"token comment\"># 查询 xxx 容器的日志</span></pre></td></tr></table></figure><p>基本上不太会直接使用上面的命令，因为上面把所有的日志都打印出来了，可以直接晃瞎我们的钛合金 x 眼</p>\n<p>一般日志可以加两个参数  <code>-f</code> ,  <code>-t</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> logs <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-t</span> <span class=\"token parameter variable\">--since</span><span class=\"token operator\">=</span><span class=\"token string\">\"2019-05-11\"</span> <span class=\"token parameter variable\">--tail</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> yhhos</pre></td></tr></table></figure><ul>\n<li><code>--since</code>  : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。</li>\n<li><code>-f</code>  : 查看实时日志</li>\n<li><code>-t</code>  : 查看日志产生的日期</li>\n<li><code>--tail=10</code>  : 查看最后的 10 条日志。</li>\n</ul>\n<h3 id=\"文件拷贝\"><a class=\"markdownIt-Anchor\" href=\"#文件拷贝\">#</a> 文件拷贝</h3>\n<p>将容器的某个文件捞出来；或者强塞，一个 cp 即可</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将当前目录的 test.md 文件拷贝到容器的 /tmp 目录下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> test.md yhhos:/tmp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 将容器的 /tmp/test.md 目录拷贝到当前目录下</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> yhhos:/tmp/test.md ./out.md</pre></td></tr></table></figure><h3 id=\"进入容器\"><a class=\"markdownIt-Anchor\" href=\"#进入容器\">#</a> 进入容器</h3>\n<p>进入容器内部，然后就可以为所欲为了…</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> yhhos /bin/bash</pre></td></tr></table></figure><h3 id=\"获取容器所有信息\"><a class=\"markdownIt-Anchor\" href=\"#获取容器所有信息\">#</a> 获取容器所有信息</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> inspect yhhos</pre></td></tr></table></figure><h3 id=\"环境变量设置\"><a class=\"markdownIt-Anchor\" href=\"#环境变量设置\">#</a> 环境变量设置</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExMjM0NTY3NmFiYy9hcnRpY2xlL2RldGFpbHMvODQ2NTE0Nzc=\">docker 环境变量设置_dockerfile env path-CSDN 博客</span></p>\n<h1 id=\"tmux\"><a class=\"markdownIt-Anchor\" href=\"#tmux\">#</a> tmux</h1>\n<p>用于在 docker 同时运行多个终端。尤其是在使用 <code>gdb.attach()</code>  时十分有用。</p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "http://waltcsz.github.io/2023/11/vim/",
            "url": "http://waltcsz.github.io/2023/11/vim/",
            "title": "vim",
            "date_published": "2023-11-16T16:45:03.000Z",
            "content_html": "<h2 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\">#</a> 查找</h2>\n<p>斜杠 <code>/</code> + 查找字符串，回车确定。</p>\n<p><code>/string</code></p>\n<p>按 n 下一个，N 上一个。</p>\n",
            "tags": []
        },
        {
            "id": "http://waltcsz.github.io/2023/11/shell/",
            "url": "http://waltcsz.github.io/2023/11/shell/",
            "title": "shell",
            "date_published": "2023-11-15T10:15:54.000Z",
            "content_html": "<h1 id=\"基础语句格式\"><a class=\"markdownIt-Anchor\" href=\"#基础语句格式\">#</a> 基础语句格式</h1>\n<h2 id=\"语句\"><a class=\"markdownIt-Anchor\" href=\"#语句\">#</a> 语句</h2>\n<p>一行一句，无需结尾标志。</p>\n<p>使用 <code>;</code>  可在同一行执行多条语句。用 <code>;</code>  将不同语句分割。</p>\n<p>使用 <code>|</code>  管道符，将前一语句的结果作为后一语句的参数。</p>\n<h2 id=\"判断\"><a class=\"markdownIt-Anchor\" href=\"#判断\">#</a> 判断</h2>\n<p>判断条件需放在中括号内。</p>\n<p>if 下一行接 <code>then</code>  表示开始执行满足条件时的代码。也可以接在同一行，并用 <code>;</code>  分隔。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$obj</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"quit\"</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$obj</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Quit.\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$obj</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"quit\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$obj</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><h3 id=\"判断文件是否存在\"><a class=\"markdownIt-Anchor\" href=\"#判断文件是否存在\">#</a> 判断文件是否存在：</h3>\n<pre><code> if [ -f 文件路径 ]\n</code></pre>\n<h1 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h1>\n<h2 id=\"基础\"><a class=\"markdownIt-Anchor\" href=\"#基础\">#</a> 基础</h2>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h3>\n<p>变量名 = 值</p>\n<p>等号两边<strong>不</strong>能有<strong>空格</strong>。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\">#</a> 引用</h3>\n<p>引用变量时前面需加上 <code>$</code> ，定义时不需要。</p>\n<p>变量名称两端可以选择加 <code>&#123;&#125;</code> ，在不需要空格的时候</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$&#123;a&#125;</span></pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<p>强制保留原格式：使用<strong>单引号</strong>。</p>\n<p>所有内容都会原封不动输出，不能含有单引号，不会将形如 <code>$&#123;&#125;</code>  的内容转换为变量。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">'You can use $&#123;name&#125; to print name'</span></pre></td></tr></table></figure><p>格式化输出：使用<strong>双引号</strong>。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr></table></figure><h3 id=\"获取字符串长度\"><a class=\"markdownIt-Anchor\" href=\"#获取字符串长度\">#</a> 获取字符串长度</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">string</span><span class=\"token operator\">=</span><span class=\"token string\">\"abcd\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> $</pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}