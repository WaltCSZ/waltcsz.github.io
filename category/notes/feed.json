{
    "version": "https://jsonfeed.org/version/1",
    "title": "Walt's Blog • All posts by \"notes\" category",
    "description": "",
    "home_page_url": "http://waltcsz.github.io",
    "items": [
        {
            "id": "http://waltcsz.github.io/2023/11/findlibc/",
            "url": "http://waltcsz.github.io/2023/11/findlibc/",
            "title": "findLibc",
            "date_published": "2023-11-06T09:27:29.000Z",
            "content_html": "<h1 id=\"libc应用\"><a class=\"markdownIt-Anchor\" href=\"#libc应用\">#</a> libc 应用</h1>\n<h2 id=\"libc修补\"><a class=\"markdownIt-Anchor\" href=\"#libc修补\">#</a> libc 修补</h2>\n<p>由于靶机运行环境与本地机器环境可能不同，会导致程序实现的方式有所差异。</p>\n<p>尤其是对于堆题而言，不同版本有不同的检测机制以及 tcache 的有无和截然不同的安全检测。使得 libc 的修正变得十分重要。</p>\n<p>目前主要有以下几种方法实现 libc 的修正。</p>\n<ol>\n<li>使用 patchelf 修改 elf 文件的依赖</li>\n<li>pwntools 中利用 process 指定 libc 版本。</li>\n<li>在 docker 容器中运行和调试</li>\n</ol>\n<h3 id=\"patchelf修改libc\"><a class=\"markdownIt-Anchor\" href=\"#patchelf修改libc\">#</a> patchelf 修改 libc</h3>\n<blockquote>\n<p>该方式会<strong>修改文件本身</strong>，尽量先对文件进行<strong>备份</strong>。主要会修改文件内依赖的地址，可能造成文件内部分数据的地址出现偏移。</p>\n</blockquote>\n<p>利用 <code>patchelf</code>  或者 <code>process([&quot;/path/to/ld.so&quot;, &quot;./test&quot;], env=&#123;&quot;LD_PRELOAD&quot;:&quot;/path/to/libc.so.6&quot;&#125;)</code>  指定 libc 版本运行。</p>\n<h4 id=\"how-to-run-in-custom-libc-version\"><a class=\"markdownIt-Anchor\" href=\"#how-to-run-in-custom-libc-version\">#</a> How to run in custom libc version?</h4>\n<pre><code>cp /glibc/2.27/64/lib/ld-2.27.so /tmp/ld-2.27.so\npatchelf --set-interpreter /tmp/ld-2.27.so ./test\nLD_PRELOAD=./libc.so.6 ./test\n</code></pre>\n<h3 id=\"pwntools指定libc\"><a class=\"markdownIt-Anchor\" href=\"#pwntools指定libc\">#</a> pwntools 指定 libc</h3>\n<pre><code>from pwn import *\np = process([&quot;/path/to/ld.so&quot;, &quot;./test&quot;], env=&#123;&quot;LD_PRELOAD&quot;:&quot;/path/to/libc.so.6&quot;&#125;)\n</code></pre>\n<p>具体参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NreXNpZGVyL3B3bmRvY2tlcg==\">https://github.com/skysider/pwndocker</span></p>\n<h2 id=\"查找libc\"><a class=\"markdownIt-Anchor\" href=\"#查找libc\">#</a> 查找 libc</h2>\n<h3 id=\"利用glibc-all-in-one\"><a class=\"markdownIt-Anchor\" href=\"#利用glibc-all-in-one\">#</a> 利用 glibc-all-in-one</h3>\n<p>只能查到每个大版本内的初始版本和最新版本</p>\n<h3 id=\"利用官网\"><a class=\"markdownIt-Anchor\" href=\"#利用官网\">#</a> 利用官网</h3>\n<p>拥有最全的版本</p>\n<p>如 buuoj 一般使用 <code>libc6_2.23-0ubuntu10_*</code>  的版本作为题目的 libc 库，该版本无法在 glibc-all-in-one 中下载。</p>\n<p>在官网找到 libc 后进行解包。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dpkg-deb <span class=\"token parameter variable\">-x</span> libc6_2.23-0ubuntu10_amd64.deb ./libc</pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYXVuY2hwYWQubmV0L3VidW50dS8rc291cmNlL2dsaWJjLytwdWJsaXNoaW5naGlzdG9yeQ==\">libc 历史版本</span></p>\n<h2 id=\"ubuntu对应libc版本\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu对应libc版本\">#</a> ubuntu 对应 libc 版本</h2>\n<table>\n<thead>\n<tr>\n<th>ubuntu</th>\n<th>libc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>16.04</td>\n<td>2.23</td>\n</tr>\n<tr>\n<td>18.04</td>\n<td>2.27</td>\n</tr>\n<tr>\n<td>19</td>\n<td>2.29</td>\n</tr>\n<tr>\n<td>20.04</td>\n<td>2.30</td>\n</tr>\n<tr>\n<td>22.04</td>\n<td>2.37</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        }
    ]
}