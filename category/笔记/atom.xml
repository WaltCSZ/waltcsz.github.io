<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://waltcsz.github.io</id>
    <title>Walt&#39;s Blog • Posts by &#34;笔记&#34; category</title>
    <link href="http://waltcsz.github.io" />
    <updated>2023-11-20T11:15:54.000Z</updated>
    <category term="docker" />
    <category term="汇编" />
    <category term="寄存器" />
    <category term="heap" />
    <category term="异架构" />
    <category term="工具" />
    <category term="stack migration" />
    <category term="新生题" />
    <category term="short shellcode" />
    <category term="random" />
    <category term="shellcode" />
    <category term="format string" />
    <category term="overlap" />
    <category term="unlink" />
    <category term="cdll" />
    <category term="侧信道攻击" />
    <category term="时间差" />
    <category term="full RELRO" />
    <category term="brop" />
    <category term="tcache" />
    <category term="dup" />
    <category term="srop" />
    <category term="orw" />
    <category term="dlresolve" />
    <category term="double free" />
    <category term="fastbin attack" />
    <category term="chunk_extend_and_overlapping" />
    <category term="one_gadget" />
    <category term="malloc_hook" />
    <category term="free_hook" />
    <category term="integer overflow" />
    <category term="canary" />
    <category term="IO_FILE" />
    <category term="calloc" />
    <category term="fini_array" />
    <entry>
        <id>http://waltcsz.github.io/2023/11/iofile%E4%BB%8B%E7%BB%8D/</id>
        <title>ioFile介绍</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/iofile%E4%BB%8B%E7%BB%8D/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;IO_FILE 是描述 IO 的文件结构体，相关源码来自 libio/libioP.h 文件中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IO_FILE 结构&lt;/strong&gt;：在执行 fopen 等函数时创建。不同 IO_FILE 以链表形式串接起来。&lt;/p&gt;
&lt;h1 id=&#34;_io_list_all变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#_io_list_all变量&#34;&gt;#&lt;/a&gt;  &lt;code&gt;_IO_list_all&lt;/code&gt;  变量&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;_IO_list_all&lt;/code&gt;  变量&lt;/strong&gt;：指向链表头部。默认链如下。&lt;/p&gt;
&lt;figure class=&#34;highlight tex&#34;&gt;&lt;figcaption data-lang=&#34;TeX&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;_IO_list_all - stderr -&gt; stdout -&gt; stdin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;三文件流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三文件流&#34;&gt;#&lt;/a&gt; 三文件流&lt;/h2&gt;
&lt;p&gt;存在以下三种符号，指向他们对应的 file 结构。&lt;/p&gt;
&lt;p&gt;其存放在 libc.so 中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_IO_2_1_stderr_
_IO_2_1_stdout_
_IO_2_1_stdin_
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;io-file-plus&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#io-file-plus&#34;&gt;#&lt;/a&gt; io file plus&lt;/h1&gt;
&lt;p&gt;包裹着 file 结构体。&lt;/p&gt;
&lt;p&gt;vtable 的偏移&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;架构&lt;/th&gt;
&lt;th&gt;偏移&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;0x94&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;0xd8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct _IO_FILE_plus
&amp;#123;
	_IO_FILE    file;
	_IO_jump_t   *vtable;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;file结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#file结构&#34;&gt;#&lt;/a&gt; file 结构&lt;/h1&gt;
&lt;p&gt;不同 file 结构体用 chain 域串起形成链表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct _IO_FILE &amp;#123;
  int _flags;        /* High-order word is _IO_MAGIC; rest is flags. */
#define _IO_file_flags _flags

  /* The following pointers correspond to the C++ streambuf protocol. */
  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
  char* _IO_read_ptr;    /* Current read pointer */
  char* _IO_read_end;    /* End of get area. */
  char* _IO_read_base;    /* Start of putback+get area. */
  char* _IO_write_base;    /* Start of put area. */
  char* _IO_write_ptr;    /* Current put pointer. */
  char* _IO_write_end;    /* End of put area. */
  char* _IO_buf_base;    /* Start of reserve area. */
  char* _IO_buf_end;    /* End of reserve area. */
  /* The following fields are used to support backing up and undo. */
  char *_IO_save_base; /* Pointer to start of non-current get area. */
  char *_IO_backup_base;  /* Pointer to first valid character of backup area */
  char *_IO_save_end; /* Pointer to end of non-current get area. */
  struct _IO_marker *_markers;
  struct _IO_FILE *_chain;
  int _fileno;
#if 0
  int _blksize;
#else
  int _flags2;
#endif
  _IO_off_t _old_offset; /* This used to be _offset but it&#39;s too small.  */
#define __HAVE_COLUMN /* temporary */
  /* 1+column number of pbase(); 0 is unknown. */
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  /*  char* _save_gptr;  char* _save_egptr; */

  _IO_lock_t *_lock;
#ifdef _IO_USE_OLD_IO_FILE
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct _IO_FILE_complete
&amp;#123;
  struct _IO_FILE _file;
#endif
#if defined _G_IO_IO_FILE_VERSION &amp;amp;&amp;amp; _G_IO_IO_FILE_VERSION == 0x20001
  _IO_off64_t _offset;
# if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
  /* Wide character stream stuff.  */
  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
# else
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
# endif
  size_t __pad5;
  int _mode;
  /* Make sure we don&#39;t get into trouble again.  */
  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
#endif
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;_io_jump_t&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#_io_jump_t&#34;&gt;#&lt;/a&gt;  &lt;code&gt;_IO_jump_t&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;是 vtable 指针指向的结构体，存放着各种函数跳转地址。&lt;/p&gt;
&lt;p&gt;其中偏移为 7 的 xsputn 很有用。&lt;/p&gt;
&lt;p&gt;libc.so 自带的 &lt;code&gt;_IO_jump_t&lt;/code&gt;  一般不可修改。但我们可以伪造 &lt;code&gt;_IO_jump_t&lt;/code&gt;  并修改 vtable 的值指向伪造的结构体。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#define JUMP_FIELD(TYPE, NAME) TYPE NAME
struct _IO_jump_t
&amp;#123;
    JUMP_FIELD(size_t, __dummy);
    JUMP_FIELD(size_t, __dummy2);
    JUMP_FIELD(_IO_finish_t, __finish);
    JUMP_FIELD(_IO_overflow_t, __overflow); // !!
    JUMP_FIELD(_IO_underflow_t, __underflow);
    JUMP_FIELD(_IO_underflow_t, __uflow);
    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);
    /* showmany */
    JUMP_FIELD(_IO_xsputn_t, __xsputn);	// printf函数会用 
    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);
    JUMP_FIELD(_IO_seekoff_t, __seekoff);
    JUMP_FIELD(_IO_seekpos_t, __seekpos);
    JUMP_FIELD(_IO_setbuf_t, __setbuf);
    JUMP_FIELD(_IO_sync_t, __sync);
    JUMP_FIELD(_IO_doallocate_t, __doallocate);
    JUMP_FIELD(_IO_read_t, __read);
    JUMP_FIELD(_IO_write_t, __write);
    JUMP_FIELD(_IO_seek_t, __seek);
    JUMP_FIELD(_IO_close_t, __close);
    JUMP_FIELD(_IO_stat_t, __stat);
    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);
    JUMP_FIELD(_IO_imbue_t, __imbue);
#if 0
    get_column;
    set_column;
#endif
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;_IO_2_1_stdout_&lt;/code&gt; 中 vtable 的 setbuf 在程序退出时会执行，可修改为 one_gadget 进行利用。&lt;/p&gt;
&lt;h1 id=&#34;输出输入函数调用栈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输出输入函数调用栈&#34;&gt;#&lt;/a&gt; 输出输入函数调用栈&lt;/h1&gt;
&lt;h2 id=&#34;fread&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fread&#34;&gt;#&lt;/a&gt; fread&lt;/h2&gt;
&lt;p&gt;函数位于 &lt;code&gt;/libio/iofread.c&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;size_t fread (void *buffer, size_t size, size_t count, FILE *stream);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;buffer 存放读取数据的缓冲区。&lt;/li&gt;
&lt;li&gt;size：指定每个记录的长度。&lt;/li&gt;
&lt;li&gt;count： 指定记录的个数。&lt;/li&gt;
&lt;li&gt;stream：目标文件流。&lt;/li&gt;
&lt;li&gt;返回值：返回读取到数据缓冲区中的记录个数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其调用函数栈为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_IO_fread(buf, size, count, fp)	// fread本体
_IO_sgetn(fp, (char*)buf, bytes_requested)	//(fp,data,n)
_IO_XSGETN (fp, data, n)	// 为vtable中的函数指针
_IO_file_xsgetn(fp, data, n)	// 默认情况下_IO_XSGETN所指向
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fwrite&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fwrite&#34;&gt;#&lt;/a&gt; fwrite&lt;/h2&gt;
&lt;p&gt;函数位于 &lt;code&gt; /libio/iofwrite.c&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;buffer: 是一个指针，对 fwrite 来说，是要写入数据的地址；&lt;/li&gt;
&lt;li&gt;size: 要写入内容的单字节数；&lt;/li&gt;
&lt;li&gt;count: 要进行写入 size 字节的数据项的个数；&lt;/li&gt;
&lt;li&gt;stream: 目标文件指针；&lt;/li&gt;
&lt;li&gt;返回值：实际写入的数据项个数 count。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;_IO_fwrite
_IO_XSPUTN	// vtable 函数指针
||
_IO_new_file_xsputn	
_IO_OVERFLOW	// vtable 函数指针
||
_IO_new_file_overflow
write
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;printf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#printf&#34;&gt;#&lt;/a&gt; printf&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;vfprintf+11
_IO_file_xsputn
_IO_file_overflow
funlockfile
_IO_file_write
write
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;file结构创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#file结构创建&#34;&gt;#&lt;/a&gt; file 结构创建&lt;/h1&gt;
&lt;h2 id=&#34;fopen&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fopen&#34;&gt;#&lt;/a&gt; fopen&lt;/h2&gt;
&lt;p&gt;fopen 在标准 IO 库中用于打开文件，函数原型如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FILE *fopen(char *filename, *type);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;filename: 目标文件的路径&lt;/li&gt;
&lt;li&gt;type: 打开方式的类型&lt;/li&gt;
&lt;li&gt;返回值：返回一个文件指针&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 fopen 内部会创建 FILE 结构并进行一些初始化操作，下面来看一下这个过程&lt;/p&gt;
&lt;p&gt;首先在 fopen 对应的函数 &lt;code&gt;__fopen_internal&lt;/code&gt;  内部会调用 malloc 函数，分配 FILE 结构的空间。因此我们可以获知 FILE 结构是存储在&lt;strong&gt;堆上&lt;/strong&gt;的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后会为创建的 FILE 初始化 vtable，并调用_IO_file_init 进一步初始化操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_IO_JUMPS (&amp;amp;new_f-&amp;gt;fp) = &amp;amp;_IO_file_jumps;
_IO_file_init (&amp;amp;new_f-&amp;gt;fp);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;_IO_file_init&lt;/code&gt;  函数的初始化操作中，会调用 &lt;code&gt;_IO_link_in&lt;/code&gt;  把新分配的 FILE 链入 &lt;code&gt;_IO_list_all&lt;/code&gt;  为起始的 FILE 链表中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void
_IO_link_in (fp)
     struct _IO_FILE_plus *fp;
&amp;#123;
    if ((fp-&amp;gt;file._flags &amp;amp; _IO_LINKED) == 0)
    &amp;#123;
      fp-&amp;gt;file._flags |= _IO_LINKED;
      fp-&amp;gt;file._chain = (_IO_FILE *) _IO_list_all;
      _IO_list_all = fp;
      ++_IO_list_all_stamp;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后__fopen_internal 函数会调用_IO_file_fopen 函数打开目标文件，_IO_file_fopen 会根据用户传入的打开模式进行打开操作，总之最后会调用到系统接口 open 函数，这里不再深入。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)
    return __fopen_maybe_mmap (&amp;amp;new_f-&amp;gt;fp.file);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结一下 fopen 的操作是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 malloc 分配 FILE 结构&lt;/li&gt;
&lt;li&gt;设置 FILE 结构的 vtable&lt;/li&gt;
&lt;li&gt;初始化分配的 FILE 结构&lt;/li&gt;
&lt;li&gt;将初始化的 FILE 结构链入 FILE 结构链表中&lt;/li&gt;
&lt;li&gt;调用系统调用打开文件&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="IO_FILE" />
        <updated>2023-11-20T11:15:54.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/11/shellcode/</id>
        <title>shellcode</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/shellcode/"/>
        <content type="html">&lt;p&gt;当题目执行流程会跳转到可读写执行的地址时，我们就需要构造合适的 shellcode 来实现我们的目的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;“/bin”-&amp;gt;rdi&lt;/th&gt;
&lt;th&gt;“/sh\0”&lt;/th&gt;
&lt;th&gt;syscall 机器码&lt;/th&gt;
&lt;th&gt;execve 调用号 - rax&lt;/th&gt;
&lt;th&gt;rsi&lt;/th&gt;
&lt;th&gt;rdx&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;编码&lt;/td&gt;
&lt;td&gt;\x2f\x62\x69\x6e&lt;/td&gt;
&lt;td&gt;\x2f\x7c\x68\x00&lt;/td&gt;
&lt;td&gt;\x0f\x05&lt;/td&gt;
&lt;td&gt;\x3b&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16 进制&lt;/td&gt;
&lt;td&gt;0x6e69622f&lt;/td&gt;
&lt;td&gt;0x68732f&lt;/td&gt;
&lt;td&gt;0x50f&lt;/td&gt;
&lt;td&gt;0x3b&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xor&lt;/td&gt;
&lt;td&gt;31 30 30 36&lt;/td&gt;
&lt;td&gt;31 30 30 5a&lt;/td&gt;
&lt;td&gt;41 30&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xor&lt;/td&gt;
&lt;td&gt;48 52 59 58&lt;/td&gt;
&lt;td&gt;48 53 58 5a&lt;/td&gt;
&lt;td&gt;4e 35&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;无字符输入限制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无字符输入限制&#34;&gt;#&lt;/a&gt; 无字符输入限制&lt;/h1&gt;
&lt;h2 id=&#34;无沙盒&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无沙盒&#34;&gt;#&lt;/a&gt; 无沙盒&lt;/h2&gt;
&lt;h3 id=&#34;工具构造&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工具构造&#34;&gt;#&lt;/a&gt; 工具构造&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arch&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;amd64&#39;&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;# in 64-bit&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; asm&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;shellcraft&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sh&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;手工构造&lt;/p&gt;
&lt;h2 id=&#34;有沙盒&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有沙盒&#34;&gt;#&lt;/a&gt; 有沙盒&lt;/h2&gt;
&lt;h1 id=&#34;有字符输入限制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有字符输入限制&#34;&gt;#&lt;/a&gt; 有字符输入限制&lt;/h1&gt;
&lt;p&gt;alphanumeric shellcode&lt;/p&gt;
&lt;h2 id=&#34;x64&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#x64&#34;&gt;#&lt;/a&gt; x64&lt;/h2&gt;
&lt;p&gt;Numeric&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ASCII&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Hex&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Assembler Instruction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x30&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xor %{16bit}, (%{64bit})&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x31&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xor %{32bit}, (%{64bit})&lt;/td&gt;
&lt;/tr&gt;
&lt;tr 16bit=&#34;&#34;&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xor (%{64bit}), %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr 32bit=&#34;&#34;&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x33&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xor (%{64bit}), %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x34&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xor [byte], %al&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x35&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xor [dword], %eax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x36&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%ss segment register&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x37&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bad Instruction!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x38&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;cmp %{16bit}, (%{64bit})&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x39&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;cmp %{32bit}, (%{64bit})&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Uppercase&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ASCII&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Hex&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Assembler Instruction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x41&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x42&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x43&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x44&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;E&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x45&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;F&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x46&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;G&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x47&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;H&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x48&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;I&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x49&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;J&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x4a&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;K&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x4b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x4c&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x4d&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x4e&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x4f&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 bit reserved prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;P&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x50&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push %rax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Q&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x51&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push %rcx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;R&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x52&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push %rdx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;S&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x53&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push %rbx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x54&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push %rsp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;U&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x55&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push %rbp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;V&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x56&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push %rsi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;W&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x57&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push %rdi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x58&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pop %rax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x59&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pop %rcx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Z&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x5a&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pop %rdx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Lowercase&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ASCII&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Hex&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Assembler Instruction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;a&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x61&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bad Instruction!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x62&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bad Instruction!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr 32bit=&#34;&#34;&gt;
&lt;td style=&#34;text-align:center&#34;&gt;c&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x63&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;movslq (%{64bit}), %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;d&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%fs segment register&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;e&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x65&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%gs segment register&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;f&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x66&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16 bit operand override&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;g&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x67&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16 bit ptr override&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;h&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x68&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push [dword]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr 32bit=&#34;&#34;&gt;
&lt;td style=&#34;text-align:center&#34;&gt;i&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x69&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;imul [dword], (%{64bit}), %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;j&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x6a&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;push [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr 32bit=&#34;&#34;&gt;
&lt;td style=&#34;text-align:center&#34;&gt;k&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x6b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;imul [byte], (%{64bit}), %&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;l&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x6c&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;insb (%dx),%es:(%rdi)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;m&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x6d&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;insl (%dx),%es:(%rdi)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;n&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x6e&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;outsb %ds:(%rsi),(%dx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x6f&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;outsl %ds:(%rsi),(%dx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;p&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x70&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jo [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;q&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x71&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jno [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;r&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x72&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jb [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x73&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jae [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x74&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;je [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;u&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x75&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jne [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;v&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x76&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jbe [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;w&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x77&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ja [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x78&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;js [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x79&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jns [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;z&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x7a&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jp [byte]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;push-alphanumeric-x86_64-data&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#push-alphanumeric-x86_64-data&#34;&gt;#&lt;/a&gt; Push: Alphanumeric x86_64 data&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Assembly&lt;/th&gt;
&lt;th&gt;Hexadecimal&lt;/th&gt;
&lt;th&gt;Alphanumeric ASCII&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pushw [word]&lt;/td&gt;
&lt;td&gt;\x66\x68\x##\x##&lt;/td&gt;
&lt;td&gt;fh??&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pushq [byte]&lt;/td&gt;
&lt;td&gt;\x6a\x##&lt;/td&gt;
&lt;td&gt;j?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pushq [dword]&lt;/td&gt;
&lt;td&gt;\x68\x##\x##\x##\x##&lt;/td&gt;
&lt;td&gt;h???&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;push-x86_64-16-bit-registers&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#push-x86_64-16-bit-registers&#34;&gt;#&lt;/a&gt; Push: x86_64 16 bit Registers&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Assembly&lt;/th&gt;
&lt;th&gt;Hexadecimal&lt;/th&gt;
&lt;th&gt;Alphanumeric ASCII&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;push %ax&lt;/td&gt;
&lt;td&gt;\x66\x50&lt;/td&gt;
&lt;td&gt;fP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push %cx&lt;/td&gt;
&lt;td&gt;\x66\x51&lt;/td&gt;
&lt;td&gt;fQ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push %dx&lt;/td&gt;
&lt;td&gt;\x66\x52&lt;/td&gt;
&lt;td&gt;fR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push %bx&lt;/td&gt;
&lt;td&gt;\x66\x53&lt;/td&gt;
&lt;td&gt;fS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push %sp&lt;/td&gt;
&lt;td&gt;\x66\x54&lt;/td&gt;
&lt;td&gt;fT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push %bp&lt;/td&gt;
&lt;td&gt;\x66\x55&lt;/td&gt;
&lt;td&gt;fU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push %si&lt;/td&gt;
&lt;td&gt;\x66\x56&lt;/td&gt;
&lt;td&gt;fV&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push %di&lt;/td&gt;
&lt;td&gt;\x66\x57&lt;/td&gt;
&lt;td&gt;fW&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;pop-x86_64-extended-registers&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pop-x86_64-extended-registers&#34;&gt;#&lt;/a&gt; Pop: x86_64 Extended Registers&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Assembly&lt;/th&gt;
&lt;th&gt;Hexadecimal&lt;/th&gt;
&lt;th&gt;Alphanumeric ASCII&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pop %rax&lt;/td&gt;
&lt;td&gt;\x58&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop %rcx&lt;/td&gt;
&lt;td&gt;\x59&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop %rax&lt;/td&gt;
&lt;td&gt;\x5a&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;x86_64-16-bit-registers&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#x86_64-16-bit-registers&#34;&gt;#&lt;/a&gt; x86_64 16 bit registers&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Assembly&lt;/th&gt;
&lt;th&gt;Hexadecimal&lt;/th&gt;
&lt;th&gt;Alphanumeric ASCII&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pop %ax&lt;/td&gt;
&lt;td&gt;\x66\x58&lt;/td&gt;
&lt;td&gt;fX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop %cx&lt;/td&gt;
&lt;td&gt;\x66\x59&lt;/td&gt;
&lt;td&gt;fY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop %dx&lt;/td&gt;
&lt;td&gt;\x66\x5a&lt;/td&gt;
&lt;td&gt;fZ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop *%r8w&lt;/td&gt;
&lt;td&gt;\x66\x41\x58&lt;/td&gt;
&lt;td&gt;fAX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop *%r9w&lt;/td&gt;
&lt;td&gt;\x66\x41\x59&lt;/td&gt;
&lt;td&gt;fAY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop *%r10w&lt;/td&gt;
&lt;td&gt;\x66\x41\x5a&lt;/td&gt;
&lt;td&gt;fAZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9uZXRzLmVjL1NoZWxsY29kZS9BcHBlbmRpeC9BbHBoYW51bWVyaWNfb3Bjb2Rl&#34;&gt;Alphanumeric opcode&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NtYWxPU25haWwvYXJ0aWNsZS9kZXRhaWxzLzEwNTIzNjMzNg==&#34;&gt; 这是那篇怎么搜都出现两三遍的文章&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9uZXRzLmVjL0FscGhhbnVtZXJpY19zaGVsbGNvZGU=&#34;&gt; https://nets.ec/Alphanumeric_shellcode&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvODU4NzE=&#34;&gt;https://www.anquanke.com/post/id/85871&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="shellcode" />
        <updated>2023-11-19T07:43:55.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/11/linuxcommand/</id>
        <title>linuxCommand</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/linuxcommand/"/>
        <content type="html">&lt;h1 id=&#34;用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户&#34;&gt;#&lt;/a&gt; 用户&lt;/h1&gt;
&lt;h2 id=&#34;用户组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户组&#34;&gt;#&lt;/a&gt; 用户组&lt;/h2&gt;
&lt;p&gt;管理员组&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;系统&lt;/th&gt;
&lt;th&gt;管理员组&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CentOS&lt;/td&gt;
&lt;td&gt;wheel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ubuntu&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rhel&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作&#34;&gt;#&lt;/a&gt; 操作&lt;/h2&gt;
&lt;h3 id=&#34;获取用户列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取用户列表&#34;&gt;#&lt;/a&gt; 获取用户列表&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat /etc/passwd&lt;/code&gt;  以以下格式显示用户数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;添加用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加用户&#34;&gt;#&lt;/a&gt; 添加用户&lt;/h4&gt;
&lt;p&gt;useradd&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;p&gt;adduser&lt;/p&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-m&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;创建用户的登陆目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;-s /sbin/nologin&lt;/td&gt;
&lt;td&gt;指定用户登陆后使用的 shell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-g&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;指定用户所属群组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-G&lt;/td&gt;
&lt;td&gt;-G wheel&lt;/td&gt;
&lt;td&gt;指定用户所属附属群组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-u&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;指定 uid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;-c ‘use for game’&lt;/td&gt;
&lt;td&gt;添加备注&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;centos&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;useradd&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; /bin/bash &lt;span class=&#34;token parameter variable&#34;&gt;-G&lt;/span&gt; wheel user1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;删除用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除用户&#34;&gt;#&lt;/a&gt; 删除用户&lt;/h4&gt;
&lt;p&gt;userdel&lt;/p&gt;
&lt;p&gt;-r 清除用户目录和邮箱&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;userdel&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; user1+&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;密码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密码&#34;&gt;#&lt;/a&gt; 密码&lt;/h2&gt;
&lt;p&gt;使用 passwd 命令管理密码。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;passwd&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-l&lt;/span&gt; user1	&lt;span class=&#34;token comment&#34;&gt;# 禁止密码登陆&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;passwd&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; user1	&lt;span class=&#34;token comment&#34;&gt;# 清除密码免密登陆&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;passwd&lt;/span&gt; user1	&lt;span class=&#34;token comment&#34;&gt;# 修改指定用户密码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;passwd&lt;/span&gt;			&lt;span class=&#34;token comment&#34;&gt;# 修改当前用户密码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;登陆&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#登陆&#34;&gt;#&lt;/a&gt; 登陆&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2EyODE0Njg2NzMvYXJ0aWNsZS9kZXRhaWxzLzkwNzY1NDYz&#34;&gt;Linux 设置 root 密钥登录，普通用户密码登录&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;软件安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#软件安装&#34;&gt;#&lt;/a&gt; 软件安装&lt;/h1&gt;
&lt;h2 id=&#34;centos&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#centos&#34;&gt;#&lt;/a&gt; CentOS&lt;/h2&gt;
&lt;h3 id=&#34;yum&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#yum&#34;&gt;#&lt;/a&gt; yum&lt;/h3&gt;
&lt;h4 id=&#34;yum源配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#yum源配置&#34;&gt;#&lt;/a&gt; yum 源配置&lt;/h4&gt;
&lt;p&gt;配置文件位于 &lt;code&gt;/etc/yum.repos.d&lt;/code&gt;  目录。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;curl &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;o &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;etc&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;yum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;repos&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;d&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;CentOS&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Base&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;repo http&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;mirrors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;aliyun&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;repo&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Centos&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;repo &lt;span class=&#34;token comment&#34;&gt;# 获取阿里的 repo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum clean &lt;span class=&#34;token builtin&#34;&gt;all&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;# 清除缓存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum makecache	&lt;span class=&#34;token comment&#34;&gt;# 生成新缓存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum install &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;y epel&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;release &lt;span class=&#34;token comment&#34;&gt;# epel 源&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum clean &lt;span class=&#34;token builtin&#34;&gt;all&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;# 清除缓存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum makecache	&lt;span class=&#34;token comment&#34;&gt;# 生成新缓存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;rpm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rpm&#34;&gt;#&lt;/a&gt; rpm&lt;/h3&gt;
&lt;h4 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;rpm -i 文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i 指定包名&lt;/li&gt;
&lt;li&gt;-v 显示安装信息&lt;/li&gt;
&lt;li&gt;-h 显示安装进度&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rpm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ivh&lt;/span&gt; example.rpm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询&#34;&gt;#&lt;/a&gt; 查询&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;rpm -q .
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;卸载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#卸载&#34;&gt;#&lt;/a&gt; 卸载&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;rpm -e
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;其他命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其他命令&#34;&gt;#&lt;/a&gt; 其他命令&lt;/h1&gt;
&lt;p&gt;结束进程&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;kill&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;参数&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 进程号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;killall&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;参数&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 进程名称&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;-8 强制结束&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;kill&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-8&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-11-18T11:57:00.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/11/%E5%BC%82%E6%9E%B6%E6%9E%84/</id>
        <title>异架构</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/%E5%BC%82%E6%9E%B6%E6%9E%84/"/>
        <content type="html">&lt;h1 id=&#34;debug&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#debug&#34;&gt;#&lt;/a&gt; debug&lt;/h1&gt;
&lt;p&gt;可以使用 qemu 的 - g 指定端口&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ qemu-aarch64 &lt;span class=&#34;token parameter variable&#34;&gt;-g&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1234&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-L&lt;/span&gt; /usr/aarch64-linux-gnu ./apollo&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后使用 gdb-multiarch 进行调试，先指定架构，然后使用 remote 功能&lt;/p&gt;
&lt;p&gt;在另外一个终端（上一个你也用不了）打开 gdb -multiarch&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ gdb-multiarch ./apollo &lt;span class=&#34;token parameter variable&#34;&gt;-q&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后连接到端口进行远程调试&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb-peda$ &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; architecture aarch64&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;The target architecture is assumed to be aarch64&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb-peda$ target remote localhost:1234&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Remote debugging using localhost:1234&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;arm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arm&#34;&gt;#&lt;/a&gt; ARM&lt;/h1&gt;
&lt;h1 id=&#34;risc-v&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#risc-v&#34;&gt;#&lt;/a&gt; RISC-V&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;ABI 助记符&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;x0&lt;/td&gt;
&lt;td&gt;zero&lt;/td&gt;
&lt;td&gt;zero&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x1&lt;/td&gt;
&lt;td&gt;ra&lt;/td&gt;
&lt;td&gt;返回地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x2&lt;/td&gt;
&lt;td&gt;sp&lt;/td&gt;
&lt;td&gt;栈指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x3&lt;/td&gt;
&lt;td&gt;gp&lt;/td&gt;
&lt;td&gt;全局指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x4&lt;/td&gt;
&lt;td&gt;tp&lt;/td&gt;
&lt;td&gt;线程指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x5-x7&lt;/td&gt;
&lt;td&gt;t0-t2&lt;/td&gt;
&lt;td&gt;临时寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x8-x9&lt;/td&gt;
&lt;td&gt;s0-s1&lt;/td&gt;
&lt;td&gt;callee 保存的寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x10-x17&lt;/td&gt;
&lt;td&gt;a0-a7&lt;/td&gt;
&lt;td&gt;参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x18-27&lt;/td&gt;
&lt;td&gt;s2-s11&lt;/td&gt;
&lt;td&gt;callee 保存的寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x28-x31&lt;/td&gt;
&lt;td&gt;t3-t6&lt;/td&gt;
&lt;td&gt;临时寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在参数保存之后，通过 &lt;code&gt;jal&lt;/code&gt;  指令跳转到函数开始执行。jal 指令的规范为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;jal ra, offset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将会把下一条指令 (pc+4) 地址存放到 ra 寄存器中，然后跳转到当前地址 + offset 位置开始执行。&lt;br&gt;
在子函数中，将会把 ra 寄存器存放到栈上，在函数返回时从栈上恢复 ra 寄存器，这里也就 &lt;code&gt;存在栈溢出的机会&lt;/code&gt; 。&lt;/p&gt;
</content>
        <category term="异架构" />
        <updated>2023-11-18T09:26:53.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/11/docker/</id>
        <title>docker</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/docker/"/>
        <content type="html">&lt;p&gt;docker 使用&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;docker 是一款精简的虚拟机。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;image 镜像&lt;/strong&gt;：储存固定的系统镜像。类似模板，类，或者类似 VMware 虚拟机的快照。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;container 容器&lt;/strong&gt;：从镜像生成出的实例。类似成品，对象，或者正常情况的 vmware 虚拟机。储存运行时的任何修改。&lt;/p&gt;
&lt;p&gt;一个 image 可以生成出很多 container。container 可以保存为 image，然后供自己或他人后续使用。&lt;/p&gt;
&lt;h1 id=&#34;包含&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包含&#34;&gt;#&lt;/a&gt; 包含&lt;/h1&gt;
&lt;p&gt;虚拟机包含的软件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0dhbGxvcHNsZWQvcHdudG9vbHM=&#34;&gt;pwntools&lt;/span&gt; —— CTF framework and exploit development library&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3B3bmRiZy9wd25kYmc=&#34;&gt;pwndbg&lt;/span&gt; —— a GDB plug-in that makes debugging with GDB suck less, with a focus on features needed by low-level software developers, hardware hackers, reverse-engineers and exploit developers&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Njd3VhcHR4L1B3bmdkYg==&#34;&gt;pwngdb&lt;/span&gt; —— gdb for pwn&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0pvbmF0aGFuU2Fsd2FuL1JPUGdhZGdldA==&#34;&gt;ROPgadget&lt;/span&gt; —— facilitate ROP exploitation tool&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2luYXoyL3JvcHV0aWxz&#34;&gt;roputils&lt;/span&gt; —— A Return-oriented Programming toolkit&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkOTQyai9vbmVfZ2FkZ2V0&#34;&gt;one_gadget&lt;/span&gt; —— A searching one-gadget of execve(‘/bin/sh’, NULL, NULL) tool for amd64 and i386&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FuZ3IvYW5ncg==&#34;&gt;angr&lt;/span&gt; —— A platform-agnostic binary analysis framework&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JhZGFyZS9yYWRhcmUy&#34;&gt;radare2&lt;/span&gt; —— A rewrite from scratch of radare in order to provide a set of libraries and tools to work with binary files&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkOTQyai9zZWNjb21wLXRvb2xz&#34;&gt;seccomp-tools&lt;/span&gt; —— Provide powerful tools for seccomp analysis&lt;/li&gt;
&lt;li&gt;linux_server[64] —— IDA 7.0 debug server for linux&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90bXV4LmdpdGh1Yi5pby8=&#34;&gt;tmux&lt;/span&gt; —— a terminal multiplexer&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8xL2x0cmFjZQ==&#34;&gt;ltrace&lt;/span&gt; —— trace library function call&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8xL3N0cmFjZQ==&#34;&gt;strace&lt;/span&gt; —— trace system call&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ubuntu初始化脚本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ubuntu初始化脚本&#34;&gt;#&lt;/a&gt; ubuntu 初始化脚本&lt;/h2&gt;
&lt;p&gt;pwndbg 仅负责 ubuntu22.04 版本及以上的可用性。在低版本可能不适用。github 尤其指出了 ubuntu18.04 已停止支持并给出了最后版本的代码。在安装时还需将 setup.sh 内的 &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;  注释掉，因为文件夹内不含 &lt;code&gt;.git&lt;/code&gt;  文件夹并且不能更新至最新库。&lt;/p&gt;
&lt;p&gt;同时需要&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW93ZW54aW9uZy9hcnRpY2xlL2RldGFpbHMvMTE2NDAxNTI0&#34;&gt;设置 locale&lt;/span&gt;，使得 LC_CTYPE=en_US.UTF-8.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
cd /root/
unminimize
apt install vim
apt install git
apt install python3-pip
#pip3 install setuptools
pip3 install --upgrade pip setuptools

sudo pip3 install pwntools

# git clone https://github.com/pwndbg/pwndbg.git
if [ ! -f &#39;2023.07.17.tar.gz&#39; ]; then
	wget https://github.com/pwndbg/pwndbg/archive/refs/tags/2023.07.17.tar.gz
fi
tar -xzvf 2023.07.17.tar.gz
mv pwndbg* ./toolbox/pwndbg
cd ./toolbox/pwndbg
./setup.sh


&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;docker容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker容器&#34;&gt;#&lt;/a&gt; docker 容器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ubuntu18.04	skysider/pwndocker&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;docker pull skysider/pwndocker
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pwndocker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;included-glibc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#included-glibc&#34;&gt;#&lt;/a&gt; included glibc&lt;/h2&gt;
&lt;p&gt;Default compiled glibc path is  &lt;code&gt;/glibc&lt;/code&gt; .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.19 —— ubuntu 12.04 default libc version&lt;/li&gt;
&lt;li&gt;2.23 —— ubuntu 16.04 default libc version&lt;/li&gt;
&lt;li&gt;2.24 —— introduce vtable check in file struct&lt;/li&gt;
&lt;li&gt;2.27 —— pwndocker default glibc version&lt;/li&gt;
&lt;li&gt;2.28~2.31 —— latest libc versions&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用&#34;&gt;#&lt;/a&gt; 使用&lt;/h1&gt;
&lt;p&gt;建议用官方的使用姿势，用如下命令 run 起来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d \
	--rm \
	-h $&amp;#123;ctf_name&amp;#125; \
	--name $&amp;#123;ctf_name&amp;#125; \
	-v $(pwd)/$&amp;#123;ctf_name&amp;#125;:/ctf/work \
	-p 23946:23946 \
	--cap-add=SYS_PTRACE \
	skysider/pwndocker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中有两个重要的参数&lt;br&gt;
 - v &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(pwd)/&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;pw&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{ctf_name}:/ctf/work 是将当前目录下的文件映射到 docker /ctf/work 目录下&lt;br&gt;
这样你在物理机修改文件，docker 里面也会发生变化，就不用再 docker cp 了&lt;/p&gt;
&lt;p&gt;–cap-add=SYS_PTRACE 这个参数也是要一定加的，不然 docker 里面没法用 gdb 调试。&lt;/p&gt;
&lt;p&gt;可以把上述命令放到 pwndocker_run.sh 里面 方便下次使用&lt;/p&gt;
&lt;h2 id=&#34;多终端调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多终端调试&#34;&gt;#&lt;/a&gt; ？多终端调试&lt;/h2&gt;
&lt;p&gt;然后调试脚本时，要先进去 tmux ，python 脚本里面指定终端为 tmux&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;terminal &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;tmux&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;sp&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;-h&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;就可以 gdb.attach (p) 了 如下图&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-itd&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; u18 ubuntu:18.04 /bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-L&lt;/span&gt; u18:/lib/x86_64-linux-gnu/libselinux.so.1 &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-L&lt;/span&gt; u18:/lib/x86_64-linux-gnu/libpcre2-8.so.0 &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; libselinux.so.1 pwn:/glibc/2.28/64/lib/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; libpcre2-8.so.0 pwn:/glibc/2.28/64/lib/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;docker-进程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker-进程&#34;&gt;#&lt;/a&gt; docker 进程&lt;/h2&gt;
&lt;p&gt;docker 进程启动、停止、重启，常见的三种 case&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; start	&lt;span class=&#34;token comment&#34;&gt;# 启动 docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; stop		&lt;span class=&#34;token comment&#34;&gt;# 关机 docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; restart	&lt;span class=&#34;token comment&#34;&gt;# 重启 docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;镜像操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#镜像操作&#34;&gt;#&lt;/a&gt; 镜像操作&lt;/h2&gt;
&lt;p&gt;镜像作为容器执行的前提条件，一般需要掌握的几个命令无非是搜索，下载，删除，创建&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; images		&lt;span class=&#34;token comment&#34;&gt;# 镜像列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; search xxx	&lt;span class=&#34;token comment&#34;&gt;# 检索镜像，从镜像仓库中检索&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull xxx		&lt;span class=&#34;token comment&#34;&gt;# 下载镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; rmi xxx		&lt;span class=&#34;token comment&#34;&gt;# 删除镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;关于创建镜像，有必要稍微详细一点点&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;首次提交&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;一灰灰Blog&#34;&lt;/span&gt; dd85eb055fe8 yh/centos:v0.1	&lt;span class=&#34;token comment&#34;&gt;# 通过容器创建镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;history&lt;/span&gt; yh/centos	&lt;span class=&#34;token comment&#34;&gt;# 镜像历史查询&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的几个参数进行说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;  和 git 的提交一样，后面更上描述信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;  版权声明，这个东西是我创建的，有啥问题，找我&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd85eb055fe8&lt;/code&gt;  容器 id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yhh/quick-os:0.1&lt;/code&gt;  创建的镜像名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#容器操作&#34;&gt;#&lt;/a&gt; 容器操作&lt;/h2&gt;
&lt;p&gt;接下来就是正菜了，容器的各种操作，启动，关闭，重启，日志查询以及各种进入容器内部搞事情&lt;/p&gt;
&lt;h2 id=&#34;创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建&#34;&gt;#&lt;/a&gt; 创建&lt;/h2&gt;
&lt;p&gt;万事开头第一步，加载镜像，创建容器&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run 镜像名:版本 程序指令&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;run 后面可以跟很多的参数，比如容器暴露端口指定，存储映射，权限等等，由于参数过多，下面只给出几个不同的例子，来具体的演示参数可以怎么加 +&lt;/p&gt;
&lt;h3 id=&#34;常用参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用参数&#34;&gt;#&lt;/a&gt; 常用参数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;打开 STDIN，支持交互&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-t&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;支持终端登陆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;设置共享文件夹。宿主目录：容器目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;设为后台运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–name&lt;/td&gt;
&lt;td&gt;–nam=u18&lt;/td&gt;
&lt;td&gt;指定容器名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;-p 8080:80&lt;/td&gt;
&lt;td&gt;暴露端口。宿主端口：容器端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–restart&lt;/td&gt;
&lt;td&gt;–restart=always&lt;/td&gt;
&lt;td&gt;程序终止后是否重启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h3&gt;
&lt;p&gt;创建交互型容器&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; centos:latest /bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建容器后运行在后台&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-t&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; centos:latest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建容器，运行后台，结束后自动重启，设置名称、端口、共享目录。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--restart&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;always &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yhh_centos &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;:80 &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /home/yihui/html/www:/var/www centos:latest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;基础操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基础操作&#34;&gt;#&lt;/a&gt; 基础操作&lt;/h2&gt;
&lt;p&gt;容器创建完毕之后，就是一些基本操作了，启动、停止、重启、删除&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;# 查看容器列表， 列出所有的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; start xxx	&lt;span class=&#34;token comment&#34;&gt;# 启动容器，start 后面可以跟上容器名，或者容器 id&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (这里的 xxx 可以是容器名：yhh_centos 也可以是容器 id：f57398ab22c5)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; stop xxx		&lt;span class=&#34;token comment&#34;&gt;# 关闭容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; restart xxx	&lt;span class=&#34;token comment&#34;&gt;# 重启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; xxx		&lt;span class=&#34;token comment&#34;&gt;# 删除&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在查看容器列表时，如果某个容器的启动参数特别长，直接使用 &lt;code&gt;docker ps -a&lt;/code&gt;  会发现看不到完整的启动命令，这个时候可以带上参数 &lt;code&gt;--no-trunc&lt;/code&gt;  来显示完整命令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; --no-trunc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;高级操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#高级操作&#34;&gt;#&lt;/a&gt; 高级操作&lt;/h2&gt;
&lt;p&gt;接下来进入一些容器的高级操作技巧（实际上也并没有特别酷炫）&lt;/p&gt;
&lt;p&gt;为了演示一些进阶的内容，这里创建一个容器作为测试&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yhhos centos&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;容器日志查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#容器日志查询&#34;&gt;#&lt;/a&gt; 容器日志查询&lt;/h3&gt;
&lt;p&gt;日志，定位问题的神器&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; logs yhhos	&lt;span class=&#34;token comment&#34;&gt;# 查询 xxx 容器的日志&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;基本上不太会直接使用上面的命令，因为上面把所有的日志都打印出来了，可以直接晃瞎我们的钛合金 x 眼&lt;/p&gt;
&lt;p&gt;一般日志可以加两个参数  &lt;code&gt;-f&lt;/code&gt; ,  &lt;code&gt;-t&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; logs &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-t&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--since&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2019-05-11&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--tail&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; yhhos&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--since&lt;/code&gt;  : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;  : 查看实时日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;  : 查看日志产生的日期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--tail=10&lt;/code&gt;  : 查看最后的 10 条日志。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件拷贝&#34;&gt;#&lt;/a&gt; 文件拷贝&lt;/h3&gt;
&lt;p&gt;将容器的某个文件捞出来；或者强塞，一个 cp 即可&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将当前目录的 test.md 文件拷贝到容器的 /tmp 目录下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; test.md yhhos:/tmp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将容器的 /tmp/test.md 目录拷贝到当前目录下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; yhhos:/tmp/test.md ./out.md&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;进入容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进入容器&#34;&gt;#&lt;/a&gt; 进入容器&lt;/h3&gt;
&lt;p&gt;进入容器内部，然后就可以为所欲为了…&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; yhhos /bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;获取容器所有信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取容器所有信息&#34;&gt;#&lt;/a&gt; 获取容器所有信息&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; inspect yhhos&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;环境变量设置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#环境变量设置&#34;&gt;#&lt;/a&gt; 环境变量设置&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExMjM0NTY3NmFiYy9hcnRpY2xlL2RldGFpbHMvODQ2NTE0Nzc=&#34;&gt;docker 环境变量设置_dockerfile env path-CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;tmux&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tmux&#34;&gt;#&lt;/a&gt; tmux&lt;/h1&gt;
&lt;p&gt;用于在 docker 同时运行多个终端。尤其是在使用 &lt;code&gt;gdb.attach()&lt;/code&gt;  时十分有用。&lt;/p&gt;
</content>
        <category term="docker" />
        <updated>2023-11-17T17:40:18.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/11/vim/</id>
        <title>vim</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/vim/"/>
        <content type="html">&lt;h2 id=&#34;查找&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找&#34;&gt;#&lt;/a&gt; 查找&lt;/h2&gt;
&lt;p&gt;斜杠 &lt;code&gt;/&lt;/code&gt; + 查找字符串，回车确定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/string&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按 n 下一个，N 上一个。&lt;/p&gt;
</content>
        <updated>2023-11-16T16:45:03.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/11/shell/</id>
        <title>shell</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/shell/"/>
        <content type="html">&lt;h1 id=&#34;基础语句格式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基础语句格式&#34;&gt;#&lt;/a&gt; 基础语句格式&lt;/h1&gt;
&lt;h2 id=&#34;语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语句&#34;&gt;#&lt;/a&gt; 语句&lt;/h2&gt;
&lt;p&gt;一行一句，无需结尾标志。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;;&lt;/code&gt;  可在同一行执行多条语句。用 &lt;code&gt;;&lt;/code&gt;  将不同语句分割。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;|&lt;/code&gt;  管道符，将前一语句的结果作为后一语句的参数。&lt;/p&gt;
&lt;h2 id=&#34;判断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#判断&#34;&gt;#&lt;/a&gt; 判断&lt;/h2&gt;
&lt;p&gt;判断条件需放在中括号内。&lt;/p&gt;
&lt;p&gt;if 下一行接 &lt;code&gt;then&lt;/code&gt;  表示开始执行满足条件时的代码。也可以接在同一行，并用 &lt;code&gt;;&lt;/code&gt;  分隔。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$obj&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;quit&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$obj&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Quit.&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$obj&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;quit&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$obj&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;判断文件是否存在&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#判断文件是否存在&#34;&gt;#&lt;/a&gt; 判断文件是否存在：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; if [ -f 文件路径 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量&#34;&gt;#&lt;/a&gt; 变量&lt;/h1&gt;
&lt;h2 id=&#34;基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义&#34;&gt;#&lt;/a&gt; 定义&lt;/h3&gt;
&lt;p&gt;变量名 = 值&lt;/p&gt;
&lt;p&gt;等号两边&lt;strong&gt;不&lt;/strong&gt;能有&lt;strong&gt;空格&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;引用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用&#34;&gt;#&lt;/a&gt; 引用&lt;/h3&gt;
&lt;p&gt;引用变量时前面需加上 &lt;code&gt;$&lt;/code&gt; ，定义时不需要。&lt;/p&gt;
&lt;p&gt;变量名称两端可以选择加 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; ，在不需要空格的时候&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;a&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串&#34;&gt;#&lt;/a&gt; 字符串&lt;/h2&gt;
&lt;p&gt;强制保留原格式：使用&lt;strong&gt;单引号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所有内容都会原封不动输出，不能含有单引号，不会将形如 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  的内容转换为变量。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;You can use $&amp;#123;name&amp;#125; to print name&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;格式化输出：使用&lt;strong&gt;双引号&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello, &lt;span class=&#34;token variable&#34;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;获取字符串长度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取字符串长度&#34;&gt;#&lt;/a&gt; 获取字符串长度&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abcd&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; $&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-11-15T10:15:54.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/11/c-%E4%B8%AD%E7%9F%A5%E8%AF%86%E6%94%B6%E8%97%8F/</id>
        <title>C++中知识收藏</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/c-%E4%B8%AD%E7%9F%A5%E8%AF%86%E6%94%B6%E8%97%8F/"/>
        <content type="html">&lt;h1 id=&#34;作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h1&gt;
&lt;h2 id=&#34;命名空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命名空间&#34;&gt;#&lt;/a&gt; 命名空间&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;namespace namespace_name &amp;#123;
   // 代码声明
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引用命名空间内的变量。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;namespace_name::code;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;导入命名空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导入命名空间&#34;&gt;#&lt;/a&gt; 导入命名空间&lt;/h3&gt;
&lt;p&gt;使得后续代码在引用该命名空间时无需添加前缀。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导入整个命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;using namespace namespace_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;仅导入命名空间部分变量或方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;using std::cout;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;嵌套的命名空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#嵌套的命名空间&#34;&gt;#&lt;/a&gt; 嵌套的命名空间&lt;/h3&gt;
&lt;p&gt;命名空间可以嵌套，可以在一个命名空间中定义另一个命名空间。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;namespace namespace_name1 &amp;#123;
	// 代码声明   
	namespace namespace_name2 &amp;#123;
		// 代码声明   
	&amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以通过使用 &lt;strong&gt;::&lt;/strong&gt; 运算符来访问嵌套的命名空间中的成员：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 访问 namespace_name2 中的成员
using namespace namespace_name1::namespace_name2;
// 访问 namespace_name1 中的成员
using namespace namespace_name1;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;作用域解析运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域解析运算符&#34;&gt;#&lt;/a&gt; 作用域解析运算符&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;::&lt;/code&gt;  为作用域解析运算符。&lt;/p&gt;
&lt;h3 id=&#34;用途&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用途&#34;&gt;#&lt;/a&gt; 用途&lt;/h3&gt;
&lt;h4 id=&#34;命名空间的函数或类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命名空间的函数或类型&#34;&gt;#&lt;/a&gt; 命名空间的函数或类型&lt;/h4&gt;
&lt;p&gt;如上&lt;/p&gt;
&lt;h4 id=&#34;类的属性或方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类的属性或方法&#34;&gt;#&lt;/a&gt; 类的属性或方法&lt;/h4&gt;
&lt;p&gt;如同 python 内的 &lt;code&gt;.&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Test &amp;#123;
    Test();
&amp;#125;;

Test::Test() 
&amp;#123;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;全局作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局作用域&#34;&gt;#&lt;/a&gt; 全局作用域&lt;/h4&gt;
&lt;p&gt;单独的 &lt;code&gt;::&lt;/code&gt;  放在函数或变量前，表示调用全局的函数或变量。这在局部也存在同名函数或变量时很有用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;::s;	// 全局变量
s;		// 局部变量
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h1&gt;
&lt;h2 id=&#34;字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串&#34;&gt;#&lt;/a&gt; 字符串&lt;/h2&gt;
&lt;h3 id=&#34;isprint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#isprint&#34;&gt;#&lt;/a&gt; isprint()&lt;/h3&gt;
&lt;p&gt;检查字符是否为可打印字符。是则返回 true，否则返回 false。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int isprint(int c);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;strdup&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strdup&#34;&gt;#&lt;/a&gt; strdup()&lt;/h3&gt;
&lt;p&gt;分配块，然后复制字符串到块中，返回块地址。&lt;/p&gt;
&lt;p&gt;可用 free () 释放内存。&lt;/p&gt;
&lt;h3 id=&#34;strtok&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strtok&#34;&gt;#&lt;/a&gt; strtok()&lt;/h3&gt;
&lt;p&gt;拆分字符串，&lt;/p&gt;
</content>
        <updated>2023-11-15T03:02:38.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/11/inputanalyse/</id>
        <title>inputAnalyse</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/11/inputanalyse/"/>
        <content type="html">&lt;h2 id=&#34;fgets&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fgets&#34;&gt;#&lt;/a&gt; fgets&lt;/h2&gt;
&lt;h3 id=&#34;空字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空字符&#34;&gt;#&lt;/a&gt; 空字符&lt;/h3&gt;
&lt;p&gt;遇到字符 &lt;code&gt;&#39;\0&#39;&lt;/code&gt;  不会停止。&lt;/p&gt;
&lt;h3 id=&#34;截止&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#截止&#34;&gt;#&lt;/a&gt; 截止&lt;/h3&gt;
&lt;p&gt;任意空字符停止输入，否则等待直到有新字符。&lt;/p&gt;
&lt;p&gt;其中会将该空字符输入。最后在其后添加字符 &lt;code&gt;&#39;\0&#39;&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;上限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上限&#34;&gt;#&lt;/a&gt; 上限&lt;/h2&gt;
&lt;p&gt;会预留一个字符给字符 &lt;code&gt;&#39;\0&#39;&lt;/code&gt; ，若输入数超过上限，则直接结束输入，在最后添加字符 &lt;code&gt;&#39;\0&#39;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;同时会舍弃空字符前面的其他未输入字符。&lt;/p&gt;
&lt;p&gt;即若允许输入 18 个字符，则最多输入 17 字符。若输入 20 个字符，截断至 17 个字符，然后舍弃最后 3 个，然后添加字符 &lt;code&gt;&#39;\0&#39;&lt;/code&gt; 。&lt;/p&gt;
</content>
        <updated>2023-11-07T13:55:24.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/08/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
        <title>汇编基础知识</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/08/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
        <content type="html">&lt;h1 id=&#34;汇编&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#汇编&#34;&gt;#&lt;/a&gt; 汇编&lt;/h1&gt;
&lt;h2 id=&#34;汇编指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#汇编指令&#34;&gt;#&lt;/a&gt; 汇编指令&lt;/h2&gt;
&lt;p&gt;在 Linux 上，大部分双操作数的指令均已前者为目的操作数，后者为源操作数。&lt;/p&gt;
&lt;h3 id=&#34;间接寻址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#间接寻址&#34;&gt;#&lt;/a&gt; 间接寻址&lt;/h3&gt;
&lt;p&gt;**[] ** 表示间接寻址，类似 c 语言的 ***** .&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;mov eax, [ebx+8]	;若ebx储存值为0x4008，则该指令将0x4010处的值赋给eax
mov eax, [0x4001]	;将地址0x4001处的值赋给eax(该代码为推测，不一定合法)
lea eax, [ebx]	;直接将ebx的值赋值给eax
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用命令&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h3&gt;
&lt;p&gt;push 将数据入栈，pop 将栈顶数据弹出&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;push eip	；将eip储存的值入栈
pop eip		;将栈顶数据弹出并存入eip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mov 传送字节，相当于赋值语句。&lt;/p&gt;
&lt;p&gt;lea 装入有效地址，相当于取地址。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;mov eax, ebx	;将ebx的值赋给eax
mov ecx, 0Ah	;将ecx赋值为0x0A

lea eax, [ebp+buf]	;将局部变量buf的地址存入eax

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;call 调用函数。jmp 跳转指令。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;call __printf	;跳转printf函数
				;call相当于入栈当前eip后执行jmp
push eip
jmp __printf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;inc 将目标操作数自增 1&lt;/p&gt;
&lt;p&gt;dec 将目标操作数自减 1&lt;/p&gt;
&lt;h3 id=&#34;比较和跳转&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较和跳转&#34;&gt;#&lt;/a&gt; 比较和跳转&lt;/h3&gt;
&lt;h2 id=&#34;寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#寄存器&#34;&gt;#&lt;/a&gt; 寄存器&lt;/h2&gt;
&lt;h3 id=&#34;通用寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通用寄存器&#34;&gt;#&lt;/a&gt; 通用寄存器&lt;/h3&gt;
&lt;h4 id=&#34;指针寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指针寄存器&#34;&gt;#&lt;/a&gt; 指针寄存器&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;32 位&lt;/th&gt;
&lt;th&gt;64 位&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EBP&lt;/td&gt;
&lt;td&gt;RBP&lt;/td&gt;
&lt;td&gt;基址指针寄存器 (extended base pointer)&lt;/td&gt;
&lt;td&gt;指向栈帧的底部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;td&gt;RSP&lt;/td&gt;
&lt;td&gt;栈指针寄存器 (extended stack pointer)&lt;/td&gt;
&lt;td&gt;指向栈帧的顶部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESI&lt;/td&gt;
&lt;td&gt;RSI&lt;/td&gt;
&lt;td&gt;源变址寄存器 (Source Index)&lt;/td&gt;
&lt;td&gt;字符串操作源指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EDI&lt;/td&gt;
&lt;td&gt;RDI&lt;/td&gt;
&lt;td&gt;目的指针寄存器 (Destination Index)&lt;/td&gt;
&lt;td&gt;字符串操作目标指针&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;数据寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据寄存器&#34;&gt;#&lt;/a&gt; 数据寄存器&lt;/h4&gt;
&lt;p&gt;数据寄存器主要用来保存操作数和运算结果等信息。&lt;/p&gt;
&lt;p&gt;在 64 位系统下，32 位寄存器代表对应 64 位寄存器的低 32 位。例如 eax 为 rax 的低 32 位。修改 eax 不影响 rax 高位部分。16 位寄存器同理。&lt;/p&gt;
&lt;p&gt;此外，16 位寄存器可分为 2 个 8 位寄存器。(AX: ah~al; BX: bh~bl; CX: ch~cl; DX: dh~dl) 分别表示高 8 位和低 8 位。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;32 位&lt;/th&gt;
&lt;th&gt;64 位&lt;/th&gt;
&lt;th&gt;16 位&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EAX&lt;/td&gt;
&lt;td&gt;RAX&lt;/td&gt;
&lt;td&gt;AX&lt;/td&gt;
&lt;td&gt;累加寄存器 (Accumulator)&lt;/td&gt;
&lt;td&gt;在乘法和除法指令中被自动使用；在 Win32 中，一般用在函数的返回值中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EBX&lt;/td&gt;
&lt;td&gt;RBX&lt;/td&gt;
&lt;td&gt;BX&lt;/td&gt;
&lt;td&gt;基址寄存器 (Base)&lt;/td&gt;
&lt;td&gt;DS 段中的数据指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ECX&lt;/td&gt;
&lt;td&gt;RCX&lt;/td&gt;
&lt;td&gt;CX&lt;/td&gt;
&lt;td&gt;计数寄存器 (Count)&lt;/td&gt;
&lt;td&gt;CPU 自动使用 ECX 作为循环计数器，在字符串和循环操作中常用，在循环指令（LOOP）或串操作中，ECX 用来进行循环计数，每执行一次循环，ECX 都会被 CPU 自动减一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EDX&lt;/td&gt;
&lt;td&gt;RDX&lt;/td&gt;
&lt;td&gt;DX&lt;/td&gt;
&lt;td&gt;数据寄存器 (Data)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;img data-src=&#34;./Center.png&#34; alt=&#34;寄存器&#34; style=&#34;zoom:33%;&#34; /&gt;
&lt;h3 id=&#34;指令寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令寄存器&#34;&gt;#&lt;/a&gt; 指令寄存器&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;32 位&lt;/th&gt;
&lt;th&gt;64 位&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EIP&lt;/td&gt;
&lt;td&gt;RIP&lt;/td&gt;
&lt;td&gt;指令指针寄存器 (Instruction Pointer)&lt;/td&gt;
&lt;td&gt;保存着下一条要执行的指令的地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;段寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段寄存器&#34;&gt;#&lt;/a&gt; 段寄存器&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;寄存器&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CS&lt;/td&gt;
&lt;td&gt;代码段 (Code Segment)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DS&lt;/td&gt;
&lt;td&gt;数据段 (Data Segment)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SS&lt;/td&gt;
&lt;td&gt;堆栈段 (Stack Segment)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES&lt;/td&gt;
&lt;td&gt;附加数据段 (Extra Segment)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FS&lt;/td&gt;
&lt;td&gt;附加数据段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GS&lt;/td&gt;
&lt;td&gt;附加数据段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;标志寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标志寄存器&#34;&gt;#&lt;/a&gt; 标志寄存器&lt;/h3&gt;
&lt;h4 id=&#34;条件标志寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件标志寄存器&#34;&gt;#&lt;/a&gt; 条件标志寄存器&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;寄存器&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OF&lt;/td&gt;
&lt;td&gt;溢出标志位 (OverFlow Flag)&lt;/td&gt;
&lt;td&gt;用来反应有符号数加减法运算所得结果是否溢出。运算超出当前运算位数所能表示的范围，则称为溢出，标志位被置为 1，否则为 0。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SF&lt;/td&gt;
&lt;td&gt;符号标志位 (Sign Flag)&lt;/td&gt;
&lt;td&gt;用来反应运算结果是否为 0。运算结果为负时置为 1，否则为 0。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZF&lt;/td&gt;
&lt;td&gt;零标志位 (Zero Flag)&lt;/td&gt;
&lt;td&gt;用来反应运算结果是否为 0。为零时置为 1，否则为 0。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AF&lt;/td&gt;
&lt;td&gt;辅助进位标志位 (Auxilliary carry Flag)&lt;/td&gt;
&lt;td&gt;在字操作址，发生低字节向高字节进位或借位时该标志位被置为 1，否则为 0。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PF&lt;/td&gt;
&lt;td&gt;奇偶标志位 (Parity Flag)&lt;/td&gt;
&lt;td&gt;用于反应结果中 “1” 的个数的奇偶性。如果 “1” 为偶数置为 1，否则为 0。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CF&lt;/td&gt;
&lt;td&gt;进位标志位 (Carry Flag)&lt;/td&gt;
&lt;td&gt;运算结果的最高位产生了一个进位或错位，则该标志位置为 1，否则为 0。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;控制控制寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#控制控制寄存器&#34;&gt;#&lt;/a&gt; 控制控制寄存器&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;寄存器&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DF&lt;/td&gt;
&lt;td&gt;方向标志位 (Direction Flag)&lt;/td&gt;
&lt;td&gt;用于串操作指令中，控制地址的变化方向。当 DF 为 0 时，存储器地址自动增加；当 DF 为 1 时，存储器地址自动减少。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IF&lt;/td&gt;
&lt;td&gt;中断标志位 (Interrupt Flag)&lt;/td&gt;
&lt;td&gt;用于控制外部可屏蔽中断是否可以被处理器响应。[^1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TF&lt;/td&gt;
&lt;td&gt;陷阱标志位 (Trap Flag)&lt;/td&gt;
&lt;td&gt;用于控制处理器是否进入单步操作方式。当 TF 为 0 时，处理器在正常模式下运行；当为 1 时，处理器单步执行指令，调试器可以逐步指令进行执行就是使用了该标志位。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;特殊64位调用函数传参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#特殊64位调用函数传参&#34;&gt;#&lt;/a&gt; 特殊：64 位调用函数传参&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;寄存器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;rdi&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;rsi&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;rdx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;rcx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;r8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;r9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7+&lt;/td&gt;
&lt;td&gt;从右向左压入栈中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
        <category term="汇编" />
        <category term="寄存器" />
        <updated>2023-08-20T09:58:02.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/08/%E5%A0%86%E6%94%BB%E5%87%BB/</id>
        <title>堆攻击</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/08/%E5%A0%86%E6%94%BB%E5%87%BB/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;堆 未完成&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;不同bin区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不同bin区别&#34;&gt;#&lt;/a&gt; 不同 bin 区别&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Fast Bin&lt;/th&gt;
&lt;th&gt;Tcache bin&lt;/th&gt;
&lt;th&gt;Small Bin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;最小大小&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4*SIZE_SZ (16,32)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;每次增长&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2*SIZE_SZ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大大小&lt;/td&gt;
&lt;td&gt;默认 64 (max 80) 不含头&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;63*2*SIZE_SZ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bin 数量&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;62 (2-63)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;储存地址&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;libc版本区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#libc版本区别&#34;&gt;#&lt;/a&gt; libc 版本区别&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;libc 版本&lt;/th&gt;
&lt;th&gt;unlink&lt;/th&gt;
&lt;th&gt;tcache&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;libc6_2.23&lt;/td&gt;
&lt;td&gt;早就已经有前后块地址验证了&lt;br /&gt;所以无法任意地址分配，只能老实 p-&amp;gt;p-0x18&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libc6_2.27-3ubuntu1_amd64&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;加入 tcache&lt;br /&gt;dup 实现极其简单，可以直接对同一个 chunk free 两次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libc6_2.27-3ubuntu1.6_amd64&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;dup 实现受阻&lt;br /&gt;free 时循环扫描当前 bin，寻找是否有相同地址&lt;br /&gt;这种情况下常常填充完 tcache bin 后利用 fastbin 的 double free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libc6_2.29&lt;/td&gt;
&lt;td&gt;对合并的块检验 prev_size==chunksize (p)，加大了 extend 的难度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libc6_2.35&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;tcache 的 fd 与 heap 基地址 &amp;gt;&amp;gt;3 异或&lt;br /&gt;同时 fd 后面紧接一串 key&lt;br /&gt;对 tcache 的利用变得尤其困难&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;小知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小知识&#34;&gt;#&lt;/a&gt; 小知识&lt;/h1&gt;
&lt;p&gt;calloc 会清空内存，而 malloc 不会&lt;/p&gt;
&lt;p&gt;** &lt;code&gt;calloc&lt;/code&gt; ** 不会从 tcache bin 中获取 chunk，会从 fastbin 中直接获取。同时会将 fastbin 中剩余的 chunk 添加到 tcache bin 的头部填充满。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;calloc(0x20);
//等同于
ptr=malloc(0x20);
memset(ptr,0,0x20);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;攻击手段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#攻击手段&#34;&gt;#&lt;/a&gt; 攻击手段&lt;/h1&gt;
&lt;h2 id=&#34;基础思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基础思路&#34;&gt;#&lt;/a&gt; 基础思路&lt;/h2&gt;
&lt;p&gt;泄露 libc 地址，泄露 heap 地址，利用堆块漏洞实现任意地址读写。&lt;/p&gt;
&lt;h2 id=&#34;use-after-free&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#use-after-free&#34;&gt;#&lt;/a&gt; use after free&lt;/h2&gt;
&lt;p&gt;用途：其他绝大多数漏洞利用的基础。&lt;/p&gt;
&lt;p&gt;同时也是大部分分配固定大小块去管理块的基础题的利用原理。&lt;/p&gt;
&lt;h2 id=&#34;overlapping&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#overlapping&#34;&gt;#&lt;/a&gt; overlapping&lt;/h2&gt;
&lt;p&gt;用途：其他部分漏洞利用的基础。&lt;/p&gt;
&lt;h2 id=&#34;fastbin-attack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fastbin-attack&#34;&gt;#&lt;/a&gt; fastbin attack&lt;/h2&gt;
&lt;h3 id=&#34;double-free&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#double-free&#34;&gt;#&lt;/a&gt; double free&lt;/h3&gt;
&lt;p&gt;用途：在有 fake size 的前提下实现任意地址读写&lt;/p&gt;
&lt;h2 id=&#34;tcache&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tcache&#34;&gt;#&lt;/a&gt; tcache&lt;/h2&gt;
&lt;h3 id=&#34;dup&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dup&#34;&gt;#&lt;/a&gt; dup&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI18y&#34;&gt;基本工作原理&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;unlink&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#unlink&#34;&gt;#&lt;/a&gt; unlink&lt;/h2&gt;
&lt;h2 id=&#34;unsortbin-attack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#unsortbin-attack&#34;&gt;#&lt;/a&gt; unsortbin attack&lt;/h2&gt;
&lt;p&gt;用途：在任意地址填充大整数，好像是 mainarena 的地址。&lt;/p&gt;
&lt;p&gt;缺点：会导致 unsortbin 损坏，导致不能再分配块。&lt;/p&gt;
&lt;h2 id=&#34;smallbin-attack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#smallbin-attack&#34;&gt;#&lt;/a&gt; smallbin attack&lt;/h2&gt;
&lt;h2 id=&#34;largebin-attack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#largebin-attack&#34;&gt;#&lt;/a&gt; largebin attack&lt;/h2&gt;
</content>
        <category term="heap" />
        <updated>2023-08-12T10:03:25.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/07/pwn%E5%9F%BA%E7%A1%80/</id>
        <title>pwn基础</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/07/pwn%E5%9F%BA%E7%A1%80/"/>
        <content type="html">&lt;h1 id=&#34;栈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#栈&#34;&gt;#&lt;/a&gt; 栈&lt;/h1&gt;
&lt;h2 id=&#34;传参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#传参&#34;&gt;#&lt;/a&gt; 传参&lt;/h2&gt;
&lt;h3 id=&#34;64位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#64位&#34;&gt;#&lt;/a&gt; 64 位&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;寄存器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;rdi&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;rsi&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;rdx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;rcx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;r8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;r9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7+&lt;/td&gt;
&lt;td&gt;从右向左压入栈中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ropgadget&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ropgadget&#34;&gt;#&lt;/a&gt; ROPgadget&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ROPgadget &lt;span class=&#34;token parameter variable&#34;&gt;--binary&lt;/span&gt; pwn &lt;span class=&#34;token parameter variable&#34;&gt;--only&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pop|ret&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;shellcode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#shellcode&#34;&gt;#&lt;/a&gt; shellcode&lt;/h2&gt;
&lt;p&gt;64 位&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shellcode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;b&#34;\x48\x31\xc9\x48\xf7\xe1\x04\x3b\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x52\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;ret2libc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ret2libc&#34;&gt;#&lt;/a&gt; ret2libc&lt;/h2&gt;
&lt;h3 id=&#34;64位-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#64位-2&#34;&gt;#&lt;/a&gt; 64 位&lt;/h3&gt;
&lt;p&gt;写 system 和 binsh 时可能需要在前面加 ret&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; offset &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;b&#39;a&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ret&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;prdi&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bs_a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; p64&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sys_a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;栈迁移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#栈迁移&#34;&gt;#&lt;/a&gt; 栈迁移&lt;/h2&gt;
&lt;p&gt;栈迁移大致在以下情况使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈空间太小不足以用来攻击&lt;/li&gt;
&lt;li&gt;为了利用缓冲区溢出攻击某些地址（待验证）&lt;/li&gt;
&lt;li&gt;迁移至.bss 段上确保权限足够&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数返回时将栈中旧 ebp 弹入 ebp 寄存器，而对旧 ebp 进行伪造可以将栈底迁移至构造的 fake_stage，再次利用 ROP 执行 leave, ret 可以将 ebp 弹入 esp，实现完整的栈迁移。&lt;/p&gt;
&lt;h2 id=&#34;ret2dlresolve&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ret2dlresolve&#34;&gt;#&lt;/a&gt; ret2dlresolve&lt;/h2&gt;
&lt;h2 id=&#34;汇编&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#汇编&#34;&gt;#&lt;/a&gt; 汇编&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;lea eax, [addr]	//将addr的
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;全局变量位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局变量位置&#34;&gt;#&lt;/a&gt; 全局变量位置&lt;/h1&gt;
&lt;h2 id=&#34;libcso&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#libcso&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xpYmMuc28=&#34;&gt;libc.so&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main_arena&lt;/code&gt; : 存放各种 bin 的头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_list_all&lt;/code&gt; :&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#程序&#34;&gt;#&lt;/a&gt; 程序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fini_array&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;堆&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#堆&#34;&gt;#&lt;/a&gt; 堆&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;tcache 存放 tcache bin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_FILE_plus&lt;/code&gt; : fopen 打开的文件&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2023-07-20T09:00:23.000Z</updated>
    </entry>
    <entry>
        <id>http://waltcsz.github.io/2023/07/pwn%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
        <title>pwn常用工具及环境配置</title>
        <link rel="alternate" href="http://waltcsz.github.io/2023/07/pwn%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
        <content type="html">&lt;h1 id=&#34;环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#环境&#34;&gt;#&lt;/a&gt; 环境&lt;/h1&gt;
&lt;h2 id=&#34;python&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt; python&lt;/h2&gt;
&lt;h3 id=&#34;str和bytes转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#str和bytes转换&#34;&gt;#&lt;/a&gt; str 和 bytes 转换&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;B &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;#可忽略参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;S &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; B&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;B &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;#不可忽略参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;字符串替换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串替换&#34;&gt;#&lt;/a&gt; 字符串替换&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dynstr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dynstr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;replace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;read&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;system&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;checksec&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#checksec&#34;&gt;#&lt;/a&gt; checksec&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RELRO got 表写权限 Partial RELRO 代表具有写权限&lt;/li&gt;
&lt;li&gt;stack canary 栈溢出保护&lt;/li&gt;
&lt;li&gt;NX：No-eXecute 不可执行保护&lt;/li&gt;
&lt;li&gt;PIE（ASLR）内存地址随机化 代码地址前几位随机 后几位固定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pwntools&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pwntools&#34;&gt;#&lt;/a&gt; PWNtools&lt;/h2&gt;
&lt;h3 id=&#34;常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用命令&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;context&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;log_level&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;debug&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;#python 调试&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;attach&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b *0x080323&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;#gdb 动态调试&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;elf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#elf&#34;&gt;#&lt;/a&gt; elf&lt;/h3&gt;
&lt;p&gt;当拥有 libc 文件时，利用 ret2libc 寻找 /bin/sh 字符串&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ELF&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;so&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;binsh &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; libcbase &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;search&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;/bin/sh&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;获取.dynstr 段的数据&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dynstr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; elf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_section_by_name&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;.dynstr&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;libcsearcher&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#libcsearcher&#34;&gt;#&lt;/a&gt; LibcSearcher&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; LibcSearcher&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#获取__libc_start_main 的真实地址储存至 lsm_a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; LibcSearcher&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__libc_start_main&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;lsm_a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;#参数 1 为字符串，函数名，参数 2 为地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libcbase &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lsm_a &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__libc_start_main&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sys_a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; libcbase &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;system&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bs_a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; libcbase &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; libc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;str_bin_sh&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;rop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rop&#34;&gt;#&lt;/a&gt; ROP&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzU0MjE4ODMzL2FydGljbGUvZGV0YWlscy8xMzA0MjY0MDQ=&#34;&gt;详细的资料&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ROP&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./pwn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;base&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x400000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;badchars&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;token comment&#34;&gt;#一般只需第一个参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;chain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;base&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;						&lt;span class=&#34;token comment&#34;&gt;#返回 bytes 数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resolvable&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arguments&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;#加入某函数调用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;raw&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;									&lt;span class=&#34;token comment&#34;&gt;#直接填充一个值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;base&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;						&lt;span class=&#34;token comment&#34;&gt;#用好看的方式打印构造后&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;migrate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;next_base&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resolvable&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ret2csu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; edi&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘edi’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; rsi&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘rsi’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; rdx&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘rdx’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; rbx&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘rbx’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; rbp&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘rbp’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; r12&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘r12’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; r13&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘r13’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; r14&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘r14’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; r15&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Padding&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘r15’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; call&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ROP&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;./main_no_relro_64&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;call&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;read&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bss_base&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;raw&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;csu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;elf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;got&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;read&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x600988&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;raw&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x0000000000400771&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;chain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;raw&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stack_size&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;chain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;chain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;gdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gdb&#34;&gt;#&lt;/a&gt; GDB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;l&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b *0x999&lt;/p&gt;
&lt;p&gt;b func&lt;/p&gt;
&lt;p&gt;断点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;p func&lt;/p&gt;
&lt;p&gt;print 打印变量内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;x /80wg 0x9323454&lt;/p&gt;
&lt;p&gt;读取内存内容 单位数 字节 单位字节数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vmmap&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;objdump&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#objdump&#34;&gt;#&lt;/a&gt; objdump&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;objdump &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-j&lt;/span&gt; .plt pwn	&lt;span class=&#34;token comment&#34;&gt;#查看.plt 表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="工具" />
        <updated>2023-07-19T14:59:36.000Z</updated>
    </entry>
</feed>
