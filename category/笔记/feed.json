{
    "version": "https://jsonfeed.org/version/1",
    "title": "Walt's Blog • All posts by \"笔记\" category",
    "description": "",
    "home_page_url": "http://waltcsz.github.io",
    "items": [
        {
            "id": "http://waltcsz.github.io/2023/11/iofile%E4%BB%8B%E7%BB%8D/",
            "url": "http://waltcsz.github.io/2023/11/iofile%E4%BB%8B%E7%BB%8D/",
            "title": "ioFile介绍",
            "date_published": "2023-11-20T11:15:54.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>IO_FILE 是描述 IO 的文件结构体，相关源码来自 libio/libioP.h 文件中。</p>\n<p><strong>IO_FILE 结构</strong>：在执行 fopen 等函数时创建。不同 IO_FILE 以链表形式串接起来。</p>\n<h1 id=\"_io_list_all变量\"><a class=\"markdownIt-Anchor\" href=\"#_io_list_all变量\">#</a>  <code>_IO_list_all</code>  变量</h1>\n<p><strong> <code>_IO_list_all</code>  变量</strong>：指向链表头部。默认链如下。</p>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_IO_list_all - stderr -> stdout -> stdin</pre></td></tr></table></figure><h2 id=\"三文件流\"><a class=\"markdownIt-Anchor\" href=\"#三文件流\">#</a> 三文件流</h2>\n<p>存在以下三种符号，指向他们对应的 file 结构。</p>\n<p>其存放在 libc.so 中。</p>\n<pre><code>_IO_2_1_stderr_\n_IO_2_1_stdout_\n_IO_2_1_stdin_\n</code></pre>\n<h1 id=\"io-file-plus\"><a class=\"markdownIt-Anchor\" href=\"#io-file-plus\">#</a> io file plus</h1>\n<p>包裹着 file 结构体。</p>\n<p>vtable 的偏移</p>\n<table>\n<thead>\n<tr>\n<th>架构</th>\n<th>偏移</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32</td>\n<td>0x94</td>\n</tr>\n<tr>\n<td>64</td>\n<td>0xd8</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-c++\">struct _IO_FILE_plus\n&#123;\n\t_IO_FILE    file;\n\t_IO_jump_t   *vtable;\n&#125;\n</code></pre>\n<h1 id=\"file结构\"><a class=\"markdownIt-Anchor\" href=\"#file结构\">#</a> file 结构</h1>\n<p>不同 file 结构体用 chain 域串起形成链表。</p>\n<pre><code class=\"language-c++\">struct _IO_FILE &#123;\n  int _flags;        /* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;    /* Current read pointer */\n  char* _IO_read_end;    /* End of get area. */\n  char* _IO_read_base;    /* Start of putback+get area. */\n  char* _IO_write_base;    /* Start of put area. */\n  char* _IO_write_ptr;    /* Current put pointer. */\n  char* _IO_write_end;    /* End of put area. */\n  char* _IO_buf_base;    /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n  struct _IO_marker *_markers;\n  struct _IO_FILE *_chain;\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n&#125;;\n</code></pre>\n<pre><code class=\"language-c++\">struct _IO_FILE_complete\n&#123;\n  struct _IO_FILE _file;\n#endif\n#if defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001\n  _IO_off64_t _offset;\n# if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n  /* Wide character stream stuff.  */\n  struct _IO_codecvt *_codecvt;\n  struct _IO_wide_data *_wide_data;\n  struct _IO_FILE *_freeres_list;\n  void *_freeres_buf;\n# else\n  void *__pad1;\n  void *__pad2;\n  void *__pad3;\n  void *__pad4;\n# endif\n  size_t __pad5;\n  int _mode;\n  /* Make sure we don't get into trouble again.  */\n  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];\n#endif\n&#125;;\n</code></pre>\n<h2 id=\"_io_jump_t\"><a class=\"markdownIt-Anchor\" href=\"#_io_jump_t\">#</a>  <code>_IO_jump_t</code></h2>\n<p>是 vtable 指针指向的结构体，存放着各种函数跳转地址。</p>\n<p>其中偏移为 7 的 xsputn 很有用。</p>\n<p>libc.so 自带的 <code>_IO_jump_t</code>  一般不可修改。但我们可以伪造 <code>_IO_jump_t</code>  并修改 vtable 的值指向伪造的结构体。</p>\n<pre><code class=\"language-c++\">#define JUMP_FIELD(TYPE, NAME) TYPE NAME\nstruct _IO_jump_t\n&#123;\n    JUMP_FIELD(size_t, __dummy);\n    JUMP_FIELD(size_t, __dummy2);\n    JUMP_FIELD(_IO_finish_t, __finish);\n    JUMP_FIELD(_IO_overflow_t, __overflow); // !!\n    JUMP_FIELD(_IO_underflow_t, __underflow);\n    JUMP_FIELD(_IO_underflow_t, __uflow);\n    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);\n    /* showmany */\n    JUMP_FIELD(_IO_xsputn_t, __xsputn);\t// printf函数会用 \n    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);\n    JUMP_FIELD(_IO_seekoff_t, __seekoff);\n    JUMP_FIELD(_IO_seekpos_t, __seekpos);\n    JUMP_FIELD(_IO_setbuf_t, __setbuf);\n    JUMP_FIELD(_IO_sync_t, __sync);\n    JUMP_FIELD(_IO_doallocate_t, __doallocate);\n    JUMP_FIELD(_IO_read_t, __read);\n    JUMP_FIELD(_IO_write_t, __write);\n    JUMP_FIELD(_IO_seek_t, __seek);\n    JUMP_FIELD(_IO_close_t, __close);\n    JUMP_FIELD(_IO_stat_t, __stat);\n    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);\n    JUMP_FIELD(_IO_imbue_t, __imbue);\n#if 0\n    get_column;\n    set_column;\n#endif\n&#125;;\n</code></pre>\n<p><code>_IO_2_1_stdout_</code> 中 vtable 的 setbuf 在程序退出时会执行，可修改为 one_gadget 进行利用。</p>\n<h1 id=\"输出输入函数调用栈\"><a class=\"markdownIt-Anchor\" href=\"#输出输入函数调用栈\">#</a> 输出输入函数调用栈</h1>\n<h2 id=\"fread\"><a class=\"markdownIt-Anchor\" href=\"#fread\">#</a> fread</h2>\n<p>函数位于 <code>/libio/iofread.c</code></p>\n<pre><code class=\"language-c++\">size_t fread (void *buffer, size_t size, size_t count, FILE *stream);\n</code></pre>\n<ul>\n<li>buffer 存放读取数据的缓冲区。</li>\n<li>size：指定每个记录的长度。</li>\n<li>count： 指定记录的个数。</li>\n<li>stream：目标文件流。</li>\n<li>返回值：返回读取到数据缓冲区中的记录个数</li>\n</ul>\n<p>其调用函数栈为</p>\n<pre><code>_IO_fread(buf, size, count, fp)\t// fread本体\n_IO_sgetn(fp, (char*)buf, bytes_requested)\t//(fp,data,n)\n_IO_XSGETN (fp, data, n)\t// 为vtable中的函数指针\n_IO_file_xsgetn(fp, data, n)\t// 默认情况下_IO_XSGETN所指向\n</code></pre>\n<h2 id=\"fwrite\"><a class=\"markdownIt-Anchor\" href=\"#fwrite\">#</a> fwrite</h2>\n<p>函数位于 <code> /libio/iofwrite.c</code></p>\n<pre><code class=\"language-c++\">size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);\n</code></pre>\n<ul>\n<li>buffer: 是一个指针，对 fwrite 来说，是要写入数据的地址；</li>\n<li>size: 要写入内容的单字节数；</li>\n<li>count: 要进行写入 size 字节的数据项的个数；</li>\n<li>stream: 目标文件指针；</li>\n<li>返回值：实际写入的数据项个数 count。</li>\n</ul>\n<pre><code>_IO_fwrite\n_IO_XSPUTN\t// vtable 函数指针\n||\n_IO_new_file_xsputn\t\n_IO_OVERFLOW\t// vtable 函数指针\n||\n_IO_new_file_overflow\nwrite\n</code></pre>\n<h2 id=\"printf\"><a class=\"markdownIt-Anchor\" href=\"#printf\">#</a> printf</h2>\n<pre><code>vfprintf+11\n_IO_file_xsputn\n_IO_file_overflow\nfunlockfile\n_IO_file_write\nwrite\n</code></pre>\n<h1 id=\"file结构创建\"><a class=\"markdownIt-Anchor\" href=\"#file结构创建\">#</a> file 结构创建</h1>\n<h2 id=\"fopen\"><a class=\"markdownIt-Anchor\" href=\"#fopen\">#</a> fopen</h2>\n<p>fopen 在标准 IO 库中用于打开文件，函数原型如下</p>\n<pre><code>FILE *fopen(char *filename, *type);\n</code></pre>\n<ul>\n<li>filename: 目标文件的路径</li>\n<li>type: 打开方式的类型</li>\n<li>返回值：返回一个文件指针</li>\n</ul>\n<p>在 fopen 内部会创建 FILE 结构并进行一些初始化操作，下面来看一下这个过程</p>\n<p>首先在 fopen 对应的函数 <code>__fopen_internal</code>  内部会调用 malloc 函数，分配 FILE 结构的空间。因此我们可以获知 FILE 结构是存储在<strong>堆上</strong>的</p>\n<pre><code>*new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));\n</code></pre>\n<p>之后会为创建的 FILE 初始化 vtable，并调用_IO_file_init 进一步初始化操作</p>\n<pre><code>_IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;\n_IO_file_init (&amp;new_f-&gt;fp);\n</code></pre>\n<p>在 <code>_IO_file_init</code>  函数的初始化操作中，会调用 <code>_IO_link_in</code>  把新分配的 FILE 链入 <code>_IO_list_all</code>  为起始的 FILE 链表中</p>\n<pre><code>void\n_IO_link_in (fp)\n     struct _IO_FILE_plus *fp;\n&#123;\n    if ((fp-&gt;file._flags &amp; _IO_LINKED) == 0)\n    &#123;\n      fp-&gt;file._flags |= _IO_LINKED;\n      fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;\n      _IO_list_all = fp;\n      ++_IO_list_all_stamp;\n    &#125;\n&#125;\n</code></pre>\n<p>之后__fopen_internal 函数会调用_IO_file_fopen 函数打开目标文件，_IO_file_fopen 会根据用户传入的打开模式进行打开操作，总之最后会调用到系统接口 open 函数，这里不再深入。</p>\n<pre><code>if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)\n    return __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);\n</code></pre>\n<p>总结一下 fopen 的操作是</p>\n<ul>\n<li>使用 malloc 分配 FILE 结构</li>\n<li>设置 FILE 结构的 vtable</li>\n<li>初始化分配的 FILE 结构</li>\n<li>将初始化的 FILE 结构链入 FILE 结构链表中</li>\n<li>调用系统调用打开文件</li>\n</ul>\n",
            "tags": [
                "IO_FILE"
            ]
        },
        {
            "id": "http://waltcsz.github.io/2023/11/shellcode/",
            "url": "http://waltcsz.github.io/2023/11/shellcode/",
            "title": "shellcode",
            "date_published": "2023-11-19T07:43:55.000Z",
            "content_html": "<p>当题目执行流程会跳转到可读写执行的地址时，我们就需要构造合适的 shellcode 来实现我们的目的。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>“/bin”-&gt;rdi</th>\n<th>“/sh\\0”</th>\n<th>syscall 机器码</th>\n<th>execve 调用号 - rax</th>\n<th>rsi</th>\n<th>rdx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>编码</td>\n<td>\\x2f\\x62\\x69\\x6e</td>\n<td>\\x2f\\x7c\\x68\\x00</td>\n<td>\\x0f\\x05</td>\n<td>\\x3b</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>16 进制</td>\n<td>0x6e69622f</td>\n<td>0x68732f</td>\n<td>0x50f</td>\n<td>0x3b</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>xor</td>\n<td>31 30 30 36</td>\n<td>31 30 30 5a</td>\n<td>41 30</td>\n<td>39</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>xor</td>\n<td>48 52 59 58</td>\n<td>48 53 58 5a</td>\n<td>4e 35</td>\n<td>32</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>41</td>\n<td>41</td>\n<td></td>\n<td>30</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"无字符输入限制\"><a class=\"markdownIt-Anchor\" href=\"#无字符输入限制\">#</a> 无字符输入限制</h1>\n<h2 id=\"无沙盒\"><a class=\"markdownIt-Anchor\" href=\"#无沙盒\">#</a> 无沙盒</h2>\n<h3 id=\"工具构造\"><a class=\"markdownIt-Anchor\" href=\"#工具构造\">#</a> 工具构造</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>context<span class=\"token punctuation\">.</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span>\t<span class=\"token comment\"># in 64-bit</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>payload <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>手工构造</p>\n<h2 id=\"有沙盒\"><a class=\"markdownIt-Anchor\" href=\"#有沙盒\">#</a> 有沙盒</h2>\n<h1 id=\"有字符输入限制\"><a class=\"markdownIt-Anchor\" href=\"#有字符输入限制\">#</a> 有字符输入限制</h1>\n<p>alphanumeric shellcode</p>\n<h2 id=\"x64\"><a class=\"markdownIt-Anchor\" href=\"#x64\">#</a> x64</h2>\n<p>Numeric</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">ASCII</th>\n<th style=\"text-align:center\">Hex</th>\n<th style=\"text-align:center\">Assembler Instruction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0x30</td>\n<td style=\"text-align:center\">xor %{16bit}, (%{64bit})</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0x31</td>\n<td style=\"text-align:center\">xor %{32bit}, (%{64bit})</td>\n</tr>\n<tr 16bit=\"\">\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0x32</td>\n<td style=\"text-align:center\">xor (%{64bit}), %</td>\n</tr>\n<tr 32bit=\"\">\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">0x33</td>\n<td style=\"text-align:center\">xor (%{64bit}), %</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">0x34</td>\n<td style=\"text-align:center\">xor [byte], %al</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">0x35</td>\n<td style=\"text-align:center\">xor [dword], %eax</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">0x36</td>\n<td style=\"text-align:center\">%ss segment register</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">0x37</td>\n<td style=\"text-align:center\">Bad Instruction!</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">0x38</td>\n<td style=\"text-align:center\">cmp %{16bit}, (%{64bit})</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">0x39</td>\n<td style=\"text-align:center\">cmp %{32bit}, (%{64bit})</td>\n</tr>\n</tbody>\n</table>\n<p>Uppercase</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">ASCII</th>\n<th style=\"text-align:center\">Hex</th>\n<th style=\"text-align:center\">Assembler Instruction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">0x41</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">0x42</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">0x43</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">0x44</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">0x45</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">0x46</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">0x47</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">0x48</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">I</td>\n<td style=\"text-align:center\">0x49</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J</td>\n<td style=\"text-align:center\">0x4a</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">K</td>\n<td style=\"text-align:center\">0x4b</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:center\">0x4c</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">0x4d</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">0x4e</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">0x4f</td>\n<td style=\"text-align:center\">64 bit reserved prefix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P</td>\n<td style=\"text-align:center\">0x50</td>\n<td style=\"text-align:center\">push %rax</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Q</td>\n<td style=\"text-align:center\">0x51</td>\n<td style=\"text-align:center\">push %rcx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">R</td>\n<td style=\"text-align:center\">0x52</td>\n<td style=\"text-align:center\">push %rdx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">0x53</td>\n<td style=\"text-align:center\">push %rbx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">0x54</td>\n<td style=\"text-align:center\">push %rsp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">U</td>\n<td style=\"text-align:center\">0x55</td>\n<td style=\"text-align:center\">push %rbp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">V</td>\n<td style=\"text-align:center\">0x56</td>\n<td style=\"text-align:center\">push %rsi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">0x57</td>\n<td style=\"text-align:center\">push %rdi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">0x58</td>\n<td style=\"text-align:center\">pop %rax</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">0x59</td>\n<td style=\"text-align:center\">pop %rcx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Z</td>\n<td style=\"text-align:center\">0x5a</td>\n<td style=\"text-align:center\">pop %rdx</td>\n</tr>\n</tbody>\n</table>\n<p>Lowercase</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">ASCII</th>\n<th style=\"text-align:center\">Hex</th>\n<th style=\"text-align:center\">Assembler Instruction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">0x61</td>\n<td style=\"text-align:center\">Bad Instruction!</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">0x62</td>\n<td style=\"text-align:center\">Bad Instruction!</td>\n</tr>\n<tr 32bit=\"\">\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:center\">0x63</td>\n<td style=\"text-align:center\">movslq (%{64bit}), %</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:center\">0x64</td>\n<td style=\"text-align:center\">%fs segment register</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:center\">0x65</td>\n<td style=\"text-align:center\">%gs segment register</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f</td>\n<td style=\"text-align:center\">0x66</td>\n<td style=\"text-align:center\">16 bit operand override</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">g</td>\n<td style=\"text-align:center\">0x67</td>\n<td style=\"text-align:center\">16 bit ptr override</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">h</td>\n<td style=\"text-align:center\">0x68</td>\n<td style=\"text-align:center\">push [dword]</td>\n</tr>\n<tr 32bit=\"\">\n<td style=\"text-align:center\">i</td>\n<td style=\"text-align:center\">0x69</td>\n<td style=\"text-align:center\">imul [dword], (%{64bit}), %</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">j</td>\n<td style=\"text-align:center\">0x6a</td>\n<td style=\"text-align:center\">push [byte]</td>\n</tr>\n<tr 32bit=\"\">\n<td style=\"text-align:center\">k</td>\n<td style=\"text-align:center\">0x6b</td>\n<td style=\"text-align:center\">imul [byte], (%{64bit}), %</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">0x6c</td>\n<td style=\"text-align:center\">insb (%dx),%es:(%rdi)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m</td>\n<td style=\"text-align:center\">0x6d</td>\n<td style=\"text-align:center\">insl (%dx),%es:(%rdi)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">0x6e</td>\n<td style=\"text-align:center\">outsb %ds:(%rsi),(%dx)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">o</td>\n<td style=\"text-align:center\">0x6f</td>\n<td style=\"text-align:center\">outsl %ds:(%rsi),(%dx)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p</td>\n<td style=\"text-align:center\">0x70</td>\n<td style=\"text-align:center\">jo [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:center\">0x71</td>\n<td style=\"text-align:center\">jno [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:center\">0x72</td>\n<td style=\"text-align:center\">jb [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:center\">0x73</td>\n<td style=\"text-align:center\">jae [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">t</td>\n<td style=\"text-align:center\">0x74</td>\n<td style=\"text-align:center\">je [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u</td>\n<td style=\"text-align:center\">0x75</td>\n<td style=\"text-align:center\">jne [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">v</td>\n<td style=\"text-align:center\">0x76</td>\n<td style=\"text-align:center\">jbe [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">0x77</td>\n<td style=\"text-align:center\">ja [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">0x78</td>\n<td style=\"text-align:center\">js [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">0x79</td>\n<td style=\"text-align:center\">jns [byte]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">z</td>\n<td style=\"text-align:center\">0x7a</td>\n<td style=\"text-align:center\">jp [byte]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"push-alphanumeric-x86_64-data\"><a class=\"markdownIt-Anchor\" href=\"#push-alphanumeric-x86_64-data\">#</a> Push: Alphanumeric x86_64 data</h3>\n<table>\n<thead>\n<tr>\n<th>Assembly</th>\n<th>Hexadecimal</th>\n<th>Alphanumeric ASCII</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pushw [word]</td>\n<td>\\x66\\x68\\x##\\x##</td>\n<td>fh??</td>\n</tr>\n<tr>\n<td>pushq [byte]</td>\n<td>\\x6a\\x##</td>\n<td>j?</td>\n</tr>\n<tr>\n<td>pushq [dword]</td>\n<td>\\x68\\x##\\x##\\x##\\x##</td>\n<td>h???</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"push-x86_64-16-bit-registers\"><a class=\"markdownIt-Anchor\" href=\"#push-x86_64-16-bit-registers\">#</a> Push: x86_64 16 bit Registers</h3>\n<table>\n<thead>\n<tr>\n<th>Assembly</th>\n<th>Hexadecimal</th>\n<th>Alphanumeric ASCII</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>push %ax</td>\n<td>\\x66\\x50</td>\n<td>fP</td>\n</tr>\n<tr>\n<td>push %cx</td>\n<td>\\x66\\x51</td>\n<td>fQ</td>\n</tr>\n<tr>\n<td>push %dx</td>\n<td>\\x66\\x52</td>\n<td>fR</td>\n</tr>\n<tr>\n<td>push %bx</td>\n<td>\\x66\\x53</td>\n<td>fS</td>\n</tr>\n<tr>\n<td>push %sp</td>\n<td>\\x66\\x54</td>\n<td>fT</td>\n</tr>\n<tr>\n<td>push %bp</td>\n<td>\\x66\\x55</td>\n<td>fU</td>\n</tr>\n<tr>\n<td>push %si</td>\n<td>\\x66\\x56</td>\n<td>fV</td>\n</tr>\n<tr>\n<td>push %di</td>\n<td>\\x66\\x57</td>\n<td>fW</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pop-x86_64-extended-registers\"><a class=\"markdownIt-Anchor\" href=\"#pop-x86_64-extended-registers\">#</a> Pop: x86_64 Extended Registers</h3>\n<table>\n<thead>\n<tr>\n<th>Assembly</th>\n<th>Hexadecimal</th>\n<th>Alphanumeric ASCII</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pop %rax</td>\n<td>\\x58</td>\n<td>X</td>\n</tr>\n<tr>\n<td>pop %rcx</td>\n<td>\\x59</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>pop %rax</td>\n<td>\\x5a</td>\n<td>Z</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"x86_64-16-bit-registers\"><a class=\"markdownIt-Anchor\" href=\"#x86_64-16-bit-registers\">#</a> x86_64 16 bit registers</h3>\n<table>\n<thead>\n<tr>\n<th>Assembly</th>\n<th>Hexadecimal</th>\n<th>Alphanumeric ASCII</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pop %ax</td>\n<td>\\x66\\x58</td>\n<td>fX</td>\n</tr>\n<tr>\n<td>pop %cx</td>\n<td>\\x66\\x59</td>\n<td>fY</td>\n</tr>\n<tr>\n<td>pop %dx</td>\n<td>\\x66\\x5a</td>\n<td>fZ</td>\n</tr>\n<tr>\n<td>pop *%r8w</td>\n<td>\\x66\\x41\\x58</td>\n<td>fAX</td>\n</tr>\n<tr>\n<td>pop *%r9w</td>\n<td>\\x66\\x41\\x59</td>\n<td>fAY</td>\n</tr>\n<tr>\n<td>pop *%r10w</td>\n<td>\\x66\\x41\\x5a</td>\n<td>fAZ</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXRzLmVjL1NoZWxsY29kZS9BcHBlbmRpeC9BbHBoYW51bWVyaWNfb3Bjb2Rl\">Alphanumeric opcode</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NtYWxPU25haWwvYXJ0aWNsZS9kZXRhaWxzLzEwNTIzNjMzNg==\"> 这是那篇怎么搜都出现两三遍的文章</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXRzLmVjL0FscGhhbnVtZXJpY19zaGVsbGNvZGU=\"> https://nets.ec/Alphanumeric_shellcode</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvODU4NzE=\">https://www.anquanke.com/post/id/85871</span></p>\n",
            "tags": [
                "shellcode"
            ]
        },
        {
            "id": "http://waltcsz.github.io/2023/11/linuxcommand/",
            "url": "http://waltcsz.github.io/2023/11/linuxcommand/",
            "title": "linuxCommand",
            "date_published": "2023-11-18T11:57:00.000Z",
            "content_html": "<h1 id=\"用户\"><a class=\"markdownIt-Anchor\" href=\"#用户\">#</a> 用户</h1>\n<h2 id=\"用户组\"><a class=\"markdownIt-Anchor\" href=\"#用户组\">#</a> 用户组</h2>\n<p>管理员组</p>\n<table>\n<thead>\n<tr>\n<th>系统</th>\n<th>管理员组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CentOS</td>\n<td>wheel</td>\n</tr>\n<tr>\n<td>ubuntu</td>\n<td></td>\n</tr>\n<tr>\n<td>rhel</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"操作\"><a class=\"markdownIt-Anchor\" href=\"#操作\">#</a> 操作</h2>\n<h3 id=\"获取用户列表\"><a class=\"markdownIt-Anchor\" href=\"#获取用户列表\">#</a> 获取用户列表</h3>\n<p><code>cat /etc/passwd</code>  以以下格式显示用户数据</p>\n<pre><code>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell\n</code></pre>\n<h4 id=\"添加用户\"><a class=\"markdownIt-Anchor\" href=\"#添加用户\">#</a> 添加用户</h4>\n<p>useradd</p>\n<p>参数</p>\n<p>adduser</p>\n<p>参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>实例</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-m</td>\n<td></td>\n<td>创建用户的登陆目录</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>-s /sbin/nologin</td>\n<td>指定用户登陆后使用的 shell</td>\n</tr>\n<tr>\n<td>-g</td>\n<td></td>\n<td>指定用户所属群组</td>\n</tr>\n<tr>\n<td>-G</td>\n<td>-G wheel</td>\n<td>指定用户所属附属群组</td>\n</tr>\n<tr>\n<td>-u</td>\n<td></td>\n<td>指定 uid</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>-c ‘use for game’</td>\n<td>添加备注</td>\n</tr>\n</tbody>\n</table>\n<p>centos</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-m</span> <span class=\"token parameter variable\">-s</span> /bin/bash <span class=\"token parameter variable\">-G</span> wheel user1</pre></td></tr></table></figure><h4 id=\"删除用户\"><a class=\"markdownIt-Anchor\" href=\"#删除用户\">#</a> 删除用户</h4>\n<p>userdel</p>\n<p>-r 清除用户目录和邮箱</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">userdel</span> <span class=\"token parameter variable\">-r</span> user1+</pre></td></tr></table></figure><h2 id=\"密码\"><a class=\"markdownIt-Anchor\" href=\"#密码\">#</a> 密码</h2>\n<p>使用 passwd 命令管理密码。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> <span class=\"token parameter variable\">-l</span> user1\t<span class=\"token comment\"># 禁止密码登陆</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">passwd</span> <span class=\"token parameter variable\">-d</span> user1\t<span class=\"token comment\"># 清除密码免密登陆</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">passwd</span> user1\t<span class=\"token comment\"># 修改指定用户密码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">passwd</span>\t\t\t<span class=\"token comment\"># 修改当前用户密码</span></pre></td></tr></table></figure><h2 id=\"登陆\"><a class=\"markdownIt-Anchor\" href=\"#登陆\">#</a> 登陆</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2EyODE0Njg2NzMvYXJ0aWNsZS9kZXRhaWxzLzkwNzY1NDYz\">Linux 设置 root 密钥登录，普通用户密码登录</span></p>\n<h1 id=\"软件安装\"><a class=\"markdownIt-Anchor\" href=\"#软件安装\">#</a> 软件安装</h1>\n<h2 id=\"centos\"><a class=\"markdownIt-Anchor\" href=\"#centos\">#</a> CentOS</h2>\n<h3 id=\"yum\"><a class=\"markdownIt-Anchor\" href=\"#yum\">#</a> yum</h3>\n<h4 id=\"yum源配置\"><a class=\"markdownIt-Anchor\" href=\"#yum源配置\">#</a> yum 源配置</h4>\n<p>配置文件位于 <code>/etc/yum.repos.d</code>  目录。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>curl <span class=\"token operator\">-</span>o <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>yum<span class=\"token punctuation\">.</span>repos<span class=\"token punctuation\">.</span>d<span class=\"token operator\">/</span>CentOS<span class=\"token operator\">-</span>Base<span class=\"token punctuation\">.</span>repo http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>mirrors<span class=\"token punctuation\">.</span>aliyun<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>repo<span class=\"token operator\">/</span>Centos<span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">.</span>repo <span class=\"token comment\"># 获取阿里的 repo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum clean <span class=\"token builtin\">all</span>\t<span class=\"token comment\"># 清除缓存</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum makecache\t<span class=\"token comment\"># 生成新缓存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum install <span class=\"token operator\">-</span>y epel<span class=\"token operator\">-</span>release <span class=\"token comment\"># epel 源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>yum clean <span class=\"token builtin\">all</span>\t<span class=\"token comment\"># 清除缓存</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>yum makecache\t<span class=\"token comment\"># 生成新缓存</span></pre></td></tr></table></figure><h3 id=\"rpm\"><a class=\"markdownIt-Anchor\" href=\"#rpm\">#</a> rpm</h3>\n<h4 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h4>\n<pre><code>rpm -i 文件\n</code></pre>\n<p>参数</p>\n<ul>\n<li>-i 指定包名</li>\n<li>-v 显示安装信息</li>\n<li>-h 显示安装进度</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> example.rpm</pre></td></tr></table></figure><h4 id=\"查询\"><a class=\"markdownIt-Anchor\" href=\"#查询\">#</a> 查询</h4>\n<pre><code>rpm -q .\n</code></pre>\n<h4 id=\"卸载\"><a class=\"markdownIt-Anchor\" href=\"#卸载\">#</a> 卸载</h4>\n<pre><code>rpm -e\n</code></pre>\n<h1 id=\"其他命令\"><a class=\"markdownIt-Anchor\" href=\"#其他命令\">#</a> 其他命令</h1>\n<p>结束进程</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span> 进程号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">killall</span> <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span> 进程名称</pre></td></tr></table></figure><ul>\n<li>-8 强制结束</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-8</span> <span class=\"token function\">vim</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://waltcsz.github.io/2023/11/%E5%BC%82%E6%9E%B6%E6%9E%84/",
            "url": "http://waltcsz.github.io/2023/11/%E5%BC%82%E6%9E%B6%E6%9E%84/",
            "title": "异架构",
            "date_published": "2023-11-18T09:26:53.000Z",
            "content_html": "<h1 id=\"debug\"><a class=\"markdownIt-Anchor\" href=\"#debug\">#</a> debug</h1>\n<p>可以使用 qemu 的 - g 指定端口</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ qemu-aarch64 <span class=\"token parameter variable\">-g</span> <span class=\"token number\">1234</span> <span class=\"token parameter variable\">-L</span> /usr/aarch64-linux-gnu ./apollo</pre></td></tr></table></figure><p>然后使用 gdb-multiarch 进行调试，先指定架构，然后使用 remote 功能</p>\n<p>在另外一个终端（上一个你也用不了）打开 gdb -multiarch</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ gdb-multiarch ./apollo <span class=\"token parameter variable\">-q</span></pre></td></tr></table></figure><p>然后连接到端口进行远程调试</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gdb-peda$ <span class=\"token builtin class-name\">set</span> architecture aarch64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>The target architecture is assumed to be aarch64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gdb-peda$ target remote localhost:1234</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Remote debugging using localhost:1234</pre></td></tr></table></figure><h1 id=\"arm\"><a class=\"markdownIt-Anchor\" href=\"#arm\">#</a> ARM</h1>\n<h1 id=\"risc-v\"><a class=\"markdownIt-Anchor\" href=\"#risc-v\">#</a> RISC-V</h1>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>ABI 助记符</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x0</td>\n<td>zero</td>\n<td>zero</td>\n</tr>\n<tr>\n<td>x1</td>\n<td>ra</td>\n<td>返回地址</td>\n</tr>\n<tr>\n<td>x2</td>\n<td>sp</td>\n<td>栈指针</td>\n</tr>\n<tr>\n<td>x3</td>\n<td>gp</td>\n<td>全局指针</td>\n</tr>\n<tr>\n<td>x4</td>\n<td>tp</td>\n<td>线程指针</td>\n</tr>\n<tr>\n<td>x5-x7</td>\n<td>t0-t2</td>\n<td>临时寄存器</td>\n</tr>\n<tr>\n<td>x8-x9</td>\n<td>s0-s1</td>\n<td>callee 保存的寄存器</td>\n</tr>\n<tr>\n<td>x10-x17</td>\n<td>a0-a7</td>\n<td>参数寄存器</td>\n</tr>\n<tr>\n<td>x18-27</td>\n<td>s2-s11</td>\n<td>callee 保存的寄存器</td>\n</tr>\n<tr>\n<td>x28-x31</td>\n<td>t3-t6</td>\n<td>临时寄存器</td>\n</tr>\n</tbody>\n</table>\n<p>在参数保存之后，通过 <code>jal</code>  指令跳转到函数开始执行。jal 指令的规范为：</p>\n<pre><code class=\"language-assembly\">jal ra, offset\n</code></pre>\n<p>将会把下一条指令 (pc+4) 地址存放到 ra 寄存器中，然后跳转到当前地址 + offset 位置开始执行。<br>\n在子函数中，将会把 ra 寄存器存放到栈上，在函数返回时从栈上恢复 ra 寄存器，这里也就 <code>存在栈溢出的机会</code> 。</p>\n",
            "tags": [
                "异架构"
            ]
        },
        {
            "id": "http://waltcsz.github.io/2023/11/docker/",
            "url": "http://waltcsz.github.io/2023/11/docker/",
            "title": "docker",
            "date_published": "2023-11-17T17:40:18.000Z",
            "content_html": "<p>docker 使用</p>\n<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>docker 是一款精简的虚拟机。</p>\n<p><strong>image 镜像</strong>：储存固定的系统镜像。类似模板，类，或者类似 VMware 虚拟机的快照。</p>\n<p><strong>container 容器</strong>：从镜像生成出的实例。类似成品，对象，或者正常情况的 vmware 虚拟机。储存运行时的任何修改。</p>\n<p>一个 image 可以生成出很多 container。container 可以保存为 image，然后供自己或他人后续使用。</p>\n<h1 id=\"包含\"><a class=\"markdownIt-Anchor\" href=\"#包含\">#</a> 包含</h1>\n<p>虚拟机包含的软件。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dhbGxvcHNsZWQvcHdudG9vbHM=\">pwntools</span> —— CTF framework and exploit development library</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B3bmRiZy9wd25kYmc=\">pwndbg</span> —— a GDB plug-in that makes debugging with GDB suck less, with a focus on features needed by low-level software developers, hardware hackers, reverse-engineers and exploit developers</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Njd3VhcHR4L1B3bmdkYg==\">pwngdb</span> —— gdb for pwn</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0pvbmF0aGFuU2Fsd2FuL1JPUGdhZGdldA==\">ROPgadget</span> —— facilitate ROP exploitation tool</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2luYXoyL3JvcHV0aWxz\">roputils</span> —— A Return-oriented Programming toolkit</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkOTQyai9vbmVfZ2FkZ2V0\">one_gadget</span> —— A searching one-gadget of execve(‘/bin/sh’, NULL, NULL) tool for amd64 and i386</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FuZ3IvYW5ncg==\">angr</span> —— A platform-agnostic binary analysis framework</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JhZGFyZS9yYWRhcmUy\">radare2</span> —— A rewrite from scratch of radare in order to provide a set of libraries and tools to work with binary files</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkOTQyai9zZWNjb21wLXRvb2xz\">seccomp-tools</span> —— Provide powerful tools for seccomp analysis</li>\n<li>linux_server[64] —— IDA 7.0 debug server for linux</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90bXV4LmdpdGh1Yi5pby8=\">tmux</span> —— a terminal multiplexer</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8xL2x0cmFjZQ==\">ltrace</span> —— trace library function call</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8xL3N0cmFjZQ==\">strace</span> —— trace system call</li>\n</ul>\n<h2 id=\"ubuntu初始化脚本\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu初始化脚本\">#</a> ubuntu 初始化脚本</h2>\n<p>pwndbg 仅负责 ubuntu22.04 版本及以上的可用性。在低版本可能不适用。github 尤其指出了 ubuntu18.04 已停止支持并给出了最后版本的代码。在安装时还需将 setup.sh 内的 <code>git submodule update --init --recursive</code>  注释掉，因为文件夹内不含 <code>.git</code>  文件夹并且不能更新至最新库。</p>\n<p>同时需要<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW93ZW54aW9uZy9hcnRpY2xlL2RldGFpbHMvMTE2NDAxNTI0\">设置 locale</span>，使得 LC_CTYPE=en_US.UTF-8.</p>\n<pre><code>#!/bin/sh\ncd /root/\nunminimize\napt install vim\napt install git\napt install python3-pip\n#pip3 install setuptools\npip3 install --upgrade pip setuptools\n\nsudo pip3 install pwntools\n\n# git clone https://github.com/pwndbg/pwndbg.git\nif [ ! -f '2023.07.17.tar.gz' ]; then\n\twget https://github.com/pwndbg/pwndbg/archive/refs/tags/2023.07.17.tar.gz\nfi\ntar -xzvf 2023.07.17.tar.gz\nmv pwndbg* ./toolbox/pwndbg\ncd ./toolbox/pwndbg\n./setup.sh\n\n\n</code></pre>\n<h1 id=\"docker容器\"><a class=\"markdownIt-Anchor\" href=\"#docker容器\">#</a> docker 容器</h1>\n<ul>\n<li>ubuntu18.04\tskysider/pwndocker</li>\n</ul>\n<pre><code>docker pull skysider/pwndocker\n</code></pre>\n<ul>\n<li>pwndocker</li>\n</ul>\n<h2 id=\"included-glibc\"><a class=\"markdownIt-Anchor\" href=\"#included-glibc\">#</a> included glibc</h2>\n<p>Default compiled glibc path is  <code>/glibc</code> .</p>\n<ul>\n<li>2.19 —— ubuntu 12.04 default libc version</li>\n<li>2.23 —— ubuntu 16.04 default libc version</li>\n<li>2.24 —— introduce vtable check in file struct</li>\n<li>2.27 —— pwndocker default glibc version</li>\n<li>2.28~2.31 —— latest libc versions</li>\n</ul>\n<h1 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>建议用官方的使用姿势，用如下命令 run 起来</p>\n<pre><code>docker run -d \\\n\t--rm \\\n\t-h $&#123;ctf_name&#125; \\\n\t--name $&#123;ctf_name&#125; \\\n\t-v $(pwd)/$&#123;ctf_name&#125;:/ctf/work \\\n\t-p 23946:23946 \\\n\t--cap-add=SYS_PTRACE \\\n\tskysider/pwndocker\n</code></pre>\n<p>其中有两个重要的参数<br>\n - v <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mi>w</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">(pwd)/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">pw</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mord\">/</span></span></span></span>{ctf_name}:/ctf/work 是将当前目录下的文件映射到 docker /ctf/work 目录下<br>\n这样你在物理机修改文件，docker 里面也会发生变化，就不用再 docker cp 了</p>\n<p>–cap-add=SYS_PTRACE 这个参数也是要一定加的，不然 docker 里面没法用 gdb 调试。</p>\n<p>可以把上述命令放到 pwndocker_run.sh 里面 方便下次使用</p>\n<h2 id=\"多终端调试\"><a class=\"markdownIt-Anchor\" href=\"#多终端调试\">#</a> ？多终端调试</h2>\n<p>然后调试脚本时，要先进去 tmux ，python 脚本里面指定终端为 tmux</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>context<span class=\"token punctuation\">.</span>terminal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tmux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-h'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>就可以 gdb.attach (p) 了 如下图</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> u18 ubuntu:18.04 /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-L</span> u18:/lib/x86_64-linux-gnu/libselinux.so.1 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-L</span> u18:/lib/x86_64-linux-gnu/libpcre2-8.so.0 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> libselinux.so.1 pwn:/glibc/2.28/64/lib/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> libpcre2-8.so.0 pwn:/glibc/2.28/64/lib/</pre></td></tr></table></figure><h2 id=\"docker-进程\"><a class=\"markdownIt-Anchor\" href=\"#docker-进程\">#</a> docker 进程</h2>\n<p>docker 进程启动、停止、重启，常见的三种 case</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">docker</span> start\t<span class=\"token comment\"># 启动 docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">docker</span> stop\t\t<span class=\"token comment\"># 关机 docker</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">docker</span> restart\t<span class=\"token comment\"># 重启 docker</span></pre></td></tr></table></figure><h2 id=\"镜像操作\"><a class=\"markdownIt-Anchor\" href=\"#镜像操作\">#</a> 镜像操作</h2>\n<p>镜像作为容器执行的前提条件，一般需要掌握的几个命令无非是搜索，下载，删除，创建</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images\t\t<span class=\"token comment\"># 镜像列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> search xxx\t<span class=\"token comment\"># 检索镜像，从镜像仓库中检索</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> pull xxx\t\t<span class=\"token comment\"># 下载镜像</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> rmi xxx\t\t<span class=\"token comment\"># 删除镜像</span></pre></td></tr></table></figure><p>关于创建镜像，有必要稍微详细一点点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> commit <span class=\"token parameter variable\">-m</span><span class=\"token operator\">=</span><span class=\"token string\">\"首次提交\"</span> <span class=\"token parameter variable\">-a</span><span class=\"token operator\">=</span><span class=\"token string\">\"一灰灰Blog\"</span> dd85eb055fe8 yh/centos:v0.1\t<span class=\"token comment\"># 通过容器创建镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">history</span> yh/centos\t<span class=\"token comment\"># 镜像历史查询</span></pre></td></tr></table></figure><p>上面的几个参数进行说明</p>\n<ul>\n<li><code>-m</code>  和 git 的提交一样，后面更上描述信息</li>\n<li><code>-a</code>  版权声明，这个东西是我创建的，有啥问题，找我</li>\n<li><code>dd85eb055fe8</code>  容器 id</li>\n<li><code>yhh/quick-os:0.1</code>  创建的镜像名</li>\n</ul>\n<h2 id=\"容器操作\"><a class=\"markdownIt-Anchor\" href=\"#容器操作\">#</a> 容器操作</h2>\n<p>接下来就是正菜了，容器的各种操作，启动，关闭，重启，日志查询以及各种进入容器内部搞事情</p>\n<h2 id=\"创建\"><a class=\"markdownIt-Anchor\" href=\"#创建\">#</a> 创建</h2>\n<p>万事开头第一步，加载镜像，创建容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run 镜像名:版本 程序指令</pre></td></tr></table></figure><p>run 后面可以跟很多的参数，比如容器暴露端口指定，存储映射，权限等等，由于参数过多，下面只给出几个不同的例子，来具体的演示参数可以怎么加 +</p>\n<h3 id=\"常用参数\"><a class=\"markdownIt-Anchor\" href=\"#常用参数\">#</a> 常用参数</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>示例</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-i</td>\n<td></td>\n<td>打开 STDIN，支持交互</td>\n</tr>\n<tr>\n<td>-t</td>\n<td></td>\n<td>支持终端登陆</td>\n</tr>\n<tr>\n<td>-v</td>\n<td></td>\n<td>设置共享文件夹。宿主目录：容器目录</td>\n</tr>\n<tr>\n<td>-d</td>\n<td></td>\n<td>设为后台运行</td>\n</tr>\n<tr>\n<td>–name</td>\n<td>–nam=u18</td>\n<td>指定容器名称</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>-p 8080:80</td>\n<td>暴露端口。宿主端口：容器端口</td>\n</tr>\n<tr>\n<td>–restart</td>\n<td>–restart=always</td>\n<td>程序终止后是否重启</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h3>\n<p>创建交互型容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> centos:latest /bin/bash</pre></td></tr></table></figure><p>创建容器后运行在后台</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-t</span> <span class=\"token parameter variable\">-d</span> centos:latest</pre></td></tr></table></figure><p>创建容器，运行后台，结束后自动重启，设置名称、端口、共享目录。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>yhh_centos <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:80 <span class=\"token parameter variable\">-v</span> /home/yihui/html/www:/var/www centos:latest</pre></td></tr></table></figure><h2 id=\"基础操作\"><a class=\"markdownIt-Anchor\" href=\"#基础操作\">#</a> 基础操作</h2>\n<p>容器创建完毕之后，就是一些基本操作了，启动、停止、重启、删除</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span>\t\t<span class=\"token comment\"># 查看容器列表， 列出所有的容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> start xxx\t<span class=\"token comment\"># 启动容器，start 后面可以跟上容器名，或者容器 id</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># (这里的 xxx 可以是容器名：yhh_centos 也可以是容器 id：f57398ab22c5)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> stop xxx\t\t<span class=\"token comment\"># 关闭容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> restart xxx\t<span class=\"token comment\"># 重启</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> xxx\t\t<span class=\"token comment\"># 删除</span></pre></td></tr></table></figure><p>在查看容器列表时，如果某个容器的启动参数特别长，直接使用 <code>docker ps -a</code>  会发现看不到完整的启动命令，这个时候可以带上参数 <code>--no-trunc</code>  来显示完整命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span> --no-trunc</pre></td></tr></table></figure><h2 id=\"高级操作\"><a class=\"markdownIt-Anchor\" href=\"#高级操作\">#</a> 高级操作</h2>\n<p>接下来进入一些容器的高级操作技巧（实际上也并没有特别酷炫）</p>\n<p>为了演示一些进阶的内容，这里创建一个容器作为测试</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>yhhos centos</pre></td></tr></table></figure><h3 id=\"容器日志查询\"><a class=\"markdownIt-Anchor\" href=\"#容器日志查询\">#</a> 容器日志查询</h3>\n<p>日志，定位问题的神器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> logs yhhos\t<span class=\"token comment\"># 查询 xxx 容器的日志</span></pre></td></tr></table></figure><p>基本上不太会直接使用上面的命令，因为上面把所有的日志都打印出来了，可以直接晃瞎我们的钛合金 x 眼</p>\n<p>一般日志可以加两个参数  <code>-f</code> ,  <code>-t</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> logs <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-t</span> <span class=\"token parameter variable\">--since</span><span class=\"token operator\">=</span><span class=\"token string\">\"2019-05-11\"</span> <span class=\"token parameter variable\">--tail</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> yhhos</pre></td></tr></table></figure><ul>\n<li><code>--since</code>  : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。</li>\n<li><code>-f</code>  : 查看实时日志</li>\n<li><code>-t</code>  : 查看日志产生的日期</li>\n<li><code>--tail=10</code>  : 查看最后的 10 条日志。</li>\n</ul>\n<h3 id=\"文件拷贝\"><a class=\"markdownIt-Anchor\" href=\"#文件拷贝\">#</a> 文件拷贝</h3>\n<p>将容器的某个文件捞出来；或者强塞，一个 cp 即可</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将当前目录的 test.md 文件拷贝到容器的 /tmp 目录下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> test.md yhhos:/tmp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 将容器的 /tmp/test.md 目录拷贝到当前目录下</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> yhhos:/tmp/test.md ./out.md</pre></td></tr></table></figure><h3 id=\"进入容器\"><a class=\"markdownIt-Anchor\" href=\"#进入容器\">#</a> 进入容器</h3>\n<p>进入容器内部，然后就可以为所欲为了…</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> yhhos /bin/bash</pre></td></tr></table></figure><h3 id=\"获取容器所有信息\"><a class=\"markdownIt-Anchor\" href=\"#获取容器所有信息\">#</a> 获取容器所有信息</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> inspect yhhos</pre></td></tr></table></figure><h3 id=\"环境变量设置\"><a class=\"markdownIt-Anchor\" href=\"#环境变量设置\">#</a> 环境变量设置</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExMjM0NTY3NmFiYy9hcnRpY2xlL2RldGFpbHMvODQ2NTE0Nzc=\">docker 环境变量设置_dockerfile env path-CSDN 博客</span></p>\n<h1 id=\"tmux\"><a class=\"markdownIt-Anchor\" href=\"#tmux\">#</a> tmux</h1>\n<p>用于在 docker 同时运行多个终端。尤其是在使用 <code>gdb.attach()</code>  时十分有用。</p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "http://waltcsz.github.io/2023/11/vim/",
            "url": "http://waltcsz.github.io/2023/11/vim/",
            "title": "vim",
            "date_published": "2023-11-16T16:45:03.000Z",
            "content_html": "<h2 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\">#</a> 查找</h2>\n<p>斜杠 <code>/</code> + 查找字符串，回车确定。</p>\n<p><code>/string</code></p>\n<p>按 n 下一个，N 上一个。</p>\n",
            "tags": []
        },
        {
            "id": "http://waltcsz.github.io/2023/11/shell/",
            "url": "http://waltcsz.github.io/2023/11/shell/",
            "title": "shell",
            "date_published": "2023-11-15T10:15:54.000Z",
            "content_html": "<h1 id=\"基础语句格式\"><a class=\"markdownIt-Anchor\" href=\"#基础语句格式\">#</a> 基础语句格式</h1>\n<h2 id=\"语句\"><a class=\"markdownIt-Anchor\" href=\"#语句\">#</a> 语句</h2>\n<p>一行一句，无需结尾标志。</p>\n<p>使用 <code>;</code>  可在同一行执行多条语句。用 <code>;</code>  将不同语句分割。</p>\n<p>使用 <code>|</code>  管道符，将前一语句的结果作为后一语句的参数。</p>\n<h2 id=\"判断\"><a class=\"markdownIt-Anchor\" href=\"#判断\">#</a> 判断</h2>\n<p>判断条件需放在中括号内。</p>\n<p>if 下一行接 <code>then</code>  表示开始执行满足条件时的代码。也可以接在同一行，并用 <code>;</code>  分隔。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$obj</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"quit\"</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$obj</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Quit.\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$obj</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"quit\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$obj</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><h3 id=\"判断文件是否存在\"><a class=\"markdownIt-Anchor\" href=\"#判断文件是否存在\">#</a> 判断文件是否存在：</h3>\n<pre><code> if [ -f 文件路径 ]\n</code></pre>\n<h1 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h1>\n<h2 id=\"基础\"><a class=\"markdownIt-Anchor\" href=\"#基础\">#</a> 基础</h2>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h3>\n<p>变量名 = 值</p>\n<p>等号两边<strong>不</strong>能有<strong>空格</strong>。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\">#</a> 引用</h3>\n<p>引用变量时前面需加上 <code>$</code> ，定义时不需要。</p>\n<p>变量名称两端可以选择加 <code>&#123;&#125;</code> ，在不需要空格的时候</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$&#123;a&#125;</span></pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<p>强制保留原格式：使用<strong>单引号</strong>。</p>\n<p>所有内容都会原封不动输出，不能含有单引号，不会将形如 <code>$&#123;&#125;</code>  的内容转换为变量。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">'You can use $&#123;name&#125; to print name'</span></pre></td></tr></table></figure><p>格式化输出：使用<strong>双引号</strong>。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr></table></figure><h3 id=\"获取字符串长度\"><a class=\"markdownIt-Anchor\" href=\"#获取字符串长度\">#</a> 获取字符串长度</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">string</span><span class=\"token operator\">=</span><span class=\"token string\">\"abcd\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> $</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://waltcsz.github.io/2023/11/c-%E4%B8%AD%E7%9F%A5%E8%AF%86%E6%94%B6%E8%97%8F/",
            "url": "http://waltcsz.github.io/2023/11/c-%E4%B8%AD%E7%9F%A5%E8%AF%86%E6%94%B6%E8%97%8F/",
            "title": "C++中知识收藏",
            "date_published": "2023-11-15T03:02:38.000Z",
            "content_html": "<h1 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域</h1>\n<h2 id=\"命名空间\"><a class=\"markdownIt-Anchor\" href=\"#命名空间\">#</a> 命名空间</h2>\n<pre><code class=\"language-c++\">namespace namespace_name &#123;\n   // 代码声明\n&#125;\n</code></pre>\n<p>引用命名空间内的变量。</p>\n<pre><code class=\"language-c++\">namespace_name::code;\n</code></pre>\n<h3 id=\"导入命名空间\"><a class=\"markdownIt-Anchor\" href=\"#导入命名空间\">#</a> 导入命名空间</h3>\n<p>使得后续代码在引用该命名空间时无需添加前缀。</p>\n<ul>\n<li>导入整个命名空间</li>\n</ul>\n<pre><code class=\"language-c++\">using namespace namespace_name;\n</code></pre>\n<ul>\n<li>仅导入命名空间部分变量或方法。</li>\n</ul>\n<pre><code class=\"language-c++\">using std::cout;\n</code></pre>\n<h3 id=\"嵌套的命名空间\"><a class=\"markdownIt-Anchor\" href=\"#嵌套的命名空间\">#</a> 嵌套的命名空间</h3>\n<p>命名空间可以嵌套，可以在一个命名空间中定义另一个命名空间。</p>\n<pre><code class=\"language-c++\">namespace namespace_name1 &#123;\n\t// 代码声明   \n\tnamespace namespace_name2 &#123;\n\t\t// 代码声明   \n\t&#125;\n&#125;\n</code></pre>\n<p>可以通过使用 <strong>::</strong> 运算符来访问嵌套的命名空间中的成员：</p>\n<pre><code class=\"language-c++\">// 访问 namespace_name2 中的成员\nusing namespace namespace_name1::namespace_name2;\n// 访问 namespace_name1 中的成员\nusing namespace namespace_name1;\n</code></pre>\n<h2 id=\"作用域解析运算符\"><a class=\"markdownIt-Anchor\" href=\"#作用域解析运算符\">#</a> 作用域解析运算符</h2>\n<p><code>::</code>  为作用域解析运算符。</p>\n<h3 id=\"用途\"><a class=\"markdownIt-Anchor\" href=\"#用途\">#</a> 用途</h3>\n<h4 id=\"命名空间的函数或类型\"><a class=\"markdownIt-Anchor\" href=\"#命名空间的函数或类型\">#</a> 命名空间的函数或类型</h4>\n<p>如上</p>\n<h4 id=\"类的属性或方法\"><a class=\"markdownIt-Anchor\" href=\"#类的属性或方法\">#</a> 类的属性或方法</h4>\n<p>如同 python 内的 <code>.</code> 。</p>\n<pre><code class=\"language-c++\">class Test &#123;\n    Test();\n&#125;;\n\nTest::Test() \n&#123;\n&#125;\n</code></pre>\n<h4 id=\"全局作用域\"><a class=\"markdownIt-Anchor\" href=\"#全局作用域\">#</a> 全局作用域</h4>\n<p>单独的 <code>::</code>  放在函数或变量前，表示调用全局的函数或变量。这在局部也存在同名函数或变量时很有用。</p>\n<pre><code class=\"language-c++\">::s;\t// 全局变量\ns;\t\t// 局部变量\n</code></pre>\n<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<h3 id=\"isprint\"><a class=\"markdownIt-Anchor\" href=\"#isprint\">#</a> isprint()</h3>\n<p>检查字符是否为可打印字符。是则返回 true，否则返回 false。</p>\n<pre><code class=\"language-c++\">int isprint(int c);\n</code></pre>\n<h3 id=\"strdup\"><a class=\"markdownIt-Anchor\" href=\"#strdup\">#</a> strdup()</h3>\n<p>分配块，然后复制字符串到块中，返回块地址。</p>\n<p>可用 free () 释放内存。</p>\n<h3 id=\"strtok\"><a class=\"markdownIt-Anchor\" href=\"#strtok\">#</a> strtok()</h3>\n<p>拆分字符串，</p>\n",
            "tags": []
        },
        {
            "id": "http://waltcsz.github.io/2023/11/inputanalyse/",
            "url": "http://waltcsz.github.io/2023/11/inputanalyse/",
            "title": "inputAnalyse",
            "date_published": "2023-11-07T13:55:24.000Z",
            "content_html": "<h2 id=\"fgets\"><a class=\"markdownIt-Anchor\" href=\"#fgets\">#</a> fgets</h2>\n<h3 id=\"空字符\"><a class=\"markdownIt-Anchor\" href=\"#空字符\">#</a> 空字符</h3>\n<p>遇到字符 <code>'\\0'</code>  不会停止。</p>\n<h3 id=\"截止\"><a class=\"markdownIt-Anchor\" href=\"#截止\">#</a> 截止</h3>\n<p>任意空字符停止输入，否则等待直到有新字符。</p>\n<p>其中会将该空字符输入。最后在其后添加字符 <code>'\\0'</code> 。</p>\n<h2 id=\"上限\"><a class=\"markdownIt-Anchor\" href=\"#上限\">#</a> 上限</h2>\n<p>会预留一个字符给字符 <code>'\\0'</code> ，若输入数超过上限，则直接结束输入，在最后添加字符 <code>'\\0'</code> 。</p>\n<p>同时会舍弃空字符前面的其他未输入字符。</p>\n<p>即若允许输入 18 个字符，则最多输入 17 字符。若输入 20 个字符，截断至 17 个字符，然后舍弃最后 3 个，然后添加字符 <code>'\\0'</code> 。</p>\n",
            "tags": []
        },
        {
            "id": "http://waltcsz.github.io/2023/08/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "http://waltcsz.github.io/2023/08/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "汇编基础知识",
            "date_published": "2023-08-20T09:58:02.000Z",
            "content_html": "<h1 id=\"汇编\"><a class=\"markdownIt-Anchor\" href=\"#汇编\">#</a> 汇编</h1>\n<h2 id=\"汇编指令\"><a class=\"markdownIt-Anchor\" href=\"#汇编指令\">#</a> 汇编指令</h2>\n<p>在 Linux 上，大部分双操作数的指令均已前者为目的操作数，后者为源操作数。</p>\n<h3 id=\"间接寻址\"><a class=\"markdownIt-Anchor\" href=\"#间接寻址\">#</a> 间接寻址</h3>\n<p>**[] ** 表示间接寻址，类似 c 语言的 ***** .</p>\n<pre><code class=\"language-assembly\">mov eax, [ebx+8]\t;若ebx储存值为0x4008，则该指令将0x4010处的值赋给eax\nmov eax, [0x4001]\t;将地址0x4001处的值赋给eax(该代码为推测，不一定合法)\nlea eax, [ebx]\t;直接将ebx的值赋值给eax\n</code></pre>\n<h3 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h3>\n<p>push 将数据入栈，pop 将栈顶数据弹出</p>\n<pre><code class=\"language-assembly\">push eip\t；将eip储存的值入栈\npop eip\t\t;将栈顶数据弹出并存入eip\n</code></pre>\n<p>mov 传送字节，相当于赋值语句。</p>\n<p>lea 装入有效地址，相当于取地址。</p>\n<pre><code class=\"language-assembly\">mov eax, ebx\t;将ebx的值赋给eax\nmov ecx, 0Ah\t;将ecx赋值为0x0A\n\nlea eax, [ebp+buf]\t;将局部变量buf的地址存入eax\n\n</code></pre>\n<p>call 调用函数。jmp 跳转指令。</p>\n<pre><code class=\"language-assembly\">call __printf\t;跳转printf函数\n\t\t\t\t;call相当于入栈当前eip后执行jmp\npush eip\njmp __printf\n</code></pre>\n<p>inc 将目标操作数自增 1</p>\n<p>dec 将目标操作数自减 1</p>\n<h3 id=\"比较和跳转\"><a class=\"markdownIt-Anchor\" href=\"#比较和跳转\">#</a> 比较和跳转</h3>\n<h2 id=\"寄存器\"><a class=\"markdownIt-Anchor\" href=\"#寄存器\">#</a> 寄存器</h2>\n<h3 id=\"通用寄存器\"><a class=\"markdownIt-Anchor\" href=\"#通用寄存器\">#</a> 通用寄存器</h3>\n<h4 id=\"指针寄存器\"><a class=\"markdownIt-Anchor\" href=\"#指针寄存器\">#</a> 指针寄存器</h4>\n<table>\n<thead>\n<tr>\n<th>32 位</th>\n<th>64 位</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EBP</td>\n<td>RBP</td>\n<td>基址指针寄存器 (extended base pointer)</td>\n<td>指向栈帧的底部</td>\n</tr>\n<tr>\n<td>ESP</td>\n<td>RSP</td>\n<td>栈指针寄存器 (extended stack pointer)</td>\n<td>指向栈帧的顶部</td>\n</tr>\n<tr>\n<td>ESI</td>\n<td>RSI</td>\n<td>源变址寄存器 (Source Index)</td>\n<td>字符串操作源指针</td>\n</tr>\n<tr>\n<td>EDI</td>\n<td>RDI</td>\n<td>目的指针寄存器 (Destination Index)</td>\n<td>字符串操作目标指针</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数据寄存器\"><a class=\"markdownIt-Anchor\" href=\"#数据寄存器\">#</a> 数据寄存器</h4>\n<p>数据寄存器主要用来保存操作数和运算结果等信息。</p>\n<p>在 64 位系统下，32 位寄存器代表对应 64 位寄存器的低 32 位。例如 eax 为 rax 的低 32 位。修改 eax 不影响 rax 高位部分。16 位寄存器同理。</p>\n<p>此外，16 位寄存器可分为 2 个 8 位寄存器。(AX: ah~al; BX: bh~bl; CX: ch~cl; DX: dh~dl) 分别表示高 8 位和低 8 位。</p>\n<table>\n<thead>\n<tr>\n<th>32 位</th>\n<th>64 位</th>\n<th>16 位</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EAX</td>\n<td>RAX</td>\n<td>AX</td>\n<td>累加寄存器 (Accumulator)</td>\n<td>在乘法和除法指令中被自动使用；在 Win32 中，一般用在函数的返回值中。</td>\n</tr>\n<tr>\n<td>EBX</td>\n<td>RBX</td>\n<td>BX</td>\n<td>基址寄存器 (Base)</td>\n<td>DS 段中的数据指针</td>\n</tr>\n<tr>\n<td>ECX</td>\n<td>RCX</td>\n<td>CX</td>\n<td>计数寄存器 (Count)</td>\n<td>CPU 自动使用 ECX 作为循环计数器，在字符串和循环操作中常用，在循环指令（LOOP）或串操作中，ECX 用来进行循环计数，每执行一次循环，ECX 都会被 CPU 自动减一</td>\n</tr>\n<tr>\n<td>EDX</td>\n<td>RDX</td>\n<td>DX</td>\n<td>数据寄存器 (Data)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<img data-src=\"./Center.png\" alt=\"寄存器\" style=\"zoom:33%;\" />\n<h3 id=\"指令寄存器\"><a class=\"markdownIt-Anchor\" href=\"#指令寄存器\">#</a> 指令寄存器</h3>\n<table>\n<thead>\n<tr>\n<th>32 位</th>\n<th>64 位</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EIP</td>\n<td>RIP</td>\n<td>指令指针寄存器 (Instruction Pointer)</td>\n<td>保存着下一条要执行的指令的地址。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"段寄存器\"><a class=\"markdownIt-Anchor\" href=\"#段寄存器\">#</a> 段寄存器</h3>\n<table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CS</td>\n<td>代码段 (Code Segment)</td>\n</tr>\n<tr>\n<td>DS</td>\n<td>数据段 (Data Segment)</td>\n</tr>\n<tr>\n<td>SS</td>\n<td>堆栈段 (Stack Segment)</td>\n</tr>\n<tr>\n<td>ES</td>\n<td>附加数据段 (Extra Segment)</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>附加数据段</td>\n</tr>\n<tr>\n<td>GS</td>\n<td>附加数据段</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"标志寄存器\"><a class=\"markdownIt-Anchor\" href=\"#标志寄存器\">#</a> 标志寄存器</h3>\n<h4 id=\"条件标志寄存器\"><a class=\"markdownIt-Anchor\" href=\"#条件标志寄存器\">#</a> 条件标志寄存器</h4>\n<table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OF</td>\n<td>溢出标志位 (OverFlow Flag)</td>\n<td>用来反应有符号数加减法运算所得结果是否溢出。运算超出当前运算位数所能表示的范围，则称为溢出，标志位被置为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>SF</td>\n<td>符号标志位 (Sign Flag)</td>\n<td>用来反应运算结果是否为 0。运算结果为负时置为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>ZF</td>\n<td>零标志位 (Zero Flag)</td>\n<td>用来反应运算结果是否为 0。为零时置为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>AF</td>\n<td>辅助进位标志位 (Auxilliary carry Flag)</td>\n<td>在字操作址，发生低字节向高字节进位或借位时该标志位被置为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>PF</td>\n<td>奇偶标志位 (Parity Flag)</td>\n<td>用于反应结果中 “1” 的个数的奇偶性。如果 “1” 为偶数置为 1，否则为 0。</td>\n</tr>\n<tr>\n<td>CF</td>\n<td>进位标志位 (Carry Flag)</td>\n<td>运算结果的最高位产生了一个进位或错位，则该标志位置为 1，否则为 0。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"控制控制寄存器\"><a class=\"markdownIt-Anchor\" href=\"#控制控制寄存器\">#</a> 控制控制寄存器</h4>\n<table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DF</td>\n<td>方向标志位 (Direction Flag)</td>\n<td>用于串操作指令中，控制地址的变化方向。当 DF 为 0 时，存储器地址自动增加；当 DF 为 1 时，存储器地址自动减少。</td>\n</tr>\n<tr>\n<td>IF</td>\n<td>中断标志位 (Interrupt Flag)</td>\n<td>用于控制外部可屏蔽中断是否可以被处理器响应。[^1]</td>\n</tr>\n<tr>\n<td>TF</td>\n<td>陷阱标志位 (Trap Flag)</td>\n<td>用于控制处理器是否进入单步操作方式。当 TF 为 0 时，处理器在正常模式下运行；当为 1 时，处理器单步执行指令，调试器可以逐步指令进行执行就是使用了该标志位。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"特殊64位调用函数传参\"><a class=\"markdownIt-Anchor\" href=\"#特殊64位调用函数传参\">#</a> 特殊：64 位调用函数传参</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>寄存器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>1</strong></td>\n<td><strong>rdi</strong></td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td><strong>rsi</strong></td>\n</tr>\n<tr>\n<td>3</td>\n<td>rdx</td>\n</tr>\n<tr>\n<td>4</td>\n<td>rcx</td>\n</tr>\n<tr>\n<td>5</td>\n<td>r8</td>\n</tr>\n<tr>\n<td>6</td>\n<td>r9</td>\n</tr>\n<tr>\n<td>7+</td>\n<td>从右向左压入栈中</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "汇编",
                "寄存器"
            ]
        },
        {
            "id": "http://waltcsz.github.io/2023/08/%E5%A0%86%E6%94%BB%E5%87%BB/",
            "url": "http://waltcsz.github.io/2023/08/%E5%A0%86%E6%94%BB%E5%87%BB/",
            "title": "堆攻击",
            "date_published": "2023-08-12T10:03:25.000Z",
            "content_html": "<p><strong>堆 未完成</strong></p>\n<h1 id=\"不同bin区别\"><a class=\"markdownIt-Anchor\" href=\"#不同bin区别\">#</a> 不同 bin 区别</h1>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Fast Bin</th>\n<th>Tcache bin</th>\n<th>Small Bin</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最小大小</td>\n<td></td>\n<td></td>\n<td>4*SIZE_SZ (16,32)</td>\n</tr>\n<tr>\n<td>每次增长</td>\n<td></td>\n<td></td>\n<td>2*SIZE_SZ</td>\n</tr>\n<tr>\n<td>最大大小</td>\n<td>默认 64 (max 80) 不含头</td>\n<td></td>\n<td>63*2*SIZE_SZ</td>\n</tr>\n<tr>\n<td>bin 数量</td>\n<td>10</td>\n<td></td>\n<td>62 (2-63)</td>\n</tr>\n<tr>\n<td>储存地址</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"libc版本区别\"><a class=\"markdownIt-Anchor\" href=\"#libc版本区别\">#</a> libc 版本区别</h1>\n<table>\n<thead>\n<tr>\n<th>libc 版本</th>\n<th>unlink</th>\n<th>tcache</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>libc6_2.23</td>\n<td>早就已经有前后块地址验证了<br />所以无法任意地址分配，只能老实 p-&gt;p-0x18</td>\n<td>无</td>\n</tr>\n<tr>\n<td>libc6_2.27-3ubuntu1_amd64</td>\n<td></td>\n<td>加入 tcache<br />dup 实现极其简单，可以直接对同一个 chunk free 两次</td>\n</tr>\n<tr>\n<td>libc6_2.27-3ubuntu1.6_amd64</td>\n<td></td>\n<td>dup 实现受阻<br />free 时循环扫描当前 bin，寻找是否有相同地址<br />这种情况下常常填充完 tcache bin 后利用 fastbin 的 double free</td>\n</tr>\n<tr>\n<td>libc6_2.29</td>\n<td>对合并的块检验 prev_size==chunksize (p)，加大了 extend 的难度</td>\n<td></td>\n</tr>\n<tr>\n<td>libc6_2.35</td>\n<td></td>\n<td>tcache 的 fd 与 heap 基地址 &gt;&gt;3 异或<br />同时 fd 后面紧接一串 key<br />对 tcache 的利用变得尤其困难</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"小知识\"><a class=\"markdownIt-Anchor\" href=\"#小知识\">#</a> 小知识</h1>\n<p>calloc 会清空内存，而 malloc 不会</p>\n<p>** <code>calloc</code> ** 不会从 tcache bin 中获取 chunk，会从 fastbin 中直接获取。同时会将 fastbin 中剩余的 chunk 添加到 tcache bin 的头部填充满。</p>\n<pre><code class=\"language-c++\">calloc(0x20);\n//等同于\nptr=malloc(0x20);\nmemset(ptr,0,0x20);\n</code></pre>\n<h1 id=\"攻击手段\"><a class=\"markdownIt-Anchor\" href=\"#攻击手段\">#</a> 攻击手段</h1>\n<h2 id=\"基础思路\"><a class=\"markdownIt-Anchor\" href=\"#基础思路\">#</a> 基础思路</h2>\n<p>泄露 libc 地址，泄露 heap 地址，利用堆块漏洞实现任意地址读写。</p>\n<h2 id=\"use-after-free\"><a class=\"markdownIt-Anchor\" href=\"#use-after-free\">#</a> use after free</h2>\n<p>用途：其他绝大多数漏洞利用的基础。</p>\n<p>同时也是大部分分配固定大小块去管理块的基础题的利用原理。</p>\n<h2 id=\"overlapping\"><a class=\"markdownIt-Anchor\" href=\"#overlapping\">#</a> overlapping</h2>\n<p>用途：其他部分漏洞利用的基础。</p>\n<h2 id=\"fastbin-attack\"><a class=\"markdownIt-Anchor\" href=\"#fastbin-attack\">#</a> fastbin attack</h2>\n<h3 id=\"double-free\"><a class=\"markdownIt-Anchor\" href=\"#double-free\">#</a> double free</h3>\n<p>用途：在有 fake size 的前提下实现任意地址读写</p>\n<h2 id=\"tcache\"><a class=\"markdownIt-Anchor\" href=\"#tcache\">#</a> tcache</h2>\n<h3 id=\"dup\"><a class=\"markdownIt-Anchor\" href=\"#dup\">#</a> dup</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI18y\">基本工作原理</span></p>\n<h2 id=\"unlink\"><a class=\"markdownIt-Anchor\" href=\"#unlink\">#</a> unlink</h2>\n<h2 id=\"unsortbin-attack\"><a class=\"markdownIt-Anchor\" href=\"#unsortbin-attack\">#</a> unsortbin attack</h2>\n<p>用途：在任意地址填充大整数，好像是 mainarena 的地址。</p>\n<p>缺点：会导致 unsortbin 损坏，导致不能再分配块。</p>\n<h2 id=\"smallbin-attack\"><a class=\"markdownIt-Anchor\" href=\"#smallbin-attack\">#</a> smallbin attack</h2>\n<h2 id=\"largebin-attack\"><a class=\"markdownIt-Anchor\" href=\"#largebin-attack\">#</a> largebin attack</h2>\n",
            "tags": [
                "heap"
            ]
        },
        {
            "id": "http://waltcsz.github.io/2023/07/pwn%E5%9F%BA%E7%A1%80/",
            "url": "http://waltcsz.github.io/2023/07/pwn%E5%9F%BA%E7%A1%80/",
            "title": "pwn基础",
            "date_published": "2023-07-20T09:00:23.000Z",
            "content_html": "<h1 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h1>\n<h2 id=\"传参\"><a class=\"markdownIt-Anchor\" href=\"#传参\">#</a> 传参</h2>\n<h3 id=\"64位\"><a class=\"markdownIt-Anchor\" href=\"#64位\">#</a> 64 位</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>寄存器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>1</strong></td>\n<td><strong>rdi</strong></td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td><strong>rsi</strong></td>\n</tr>\n<tr>\n<td>3</td>\n<td>rdx</td>\n</tr>\n<tr>\n<td>4</td>\n<td>rcx</td>\n</tr>\n<tr>\n<td>5</td>\n<td>r8</td>\n</tr>\n<tr>\n<td>6</td>\n<td>r9</td>\n</tr>\n<tr>\n<td>7+</td>\n<td>从右向左压入栈中</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ropgadget\"><a class=\"markdownIt-Anchor\" href=\"#ropgadget\">#</a> ROPgadget</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ROPgadget <span class=\"token parameter variable\">--binary</span> pwn <span class=\"token parameter variable\">--only</span> <span class=\"token string\">'pop|ret'</span></pre></td></tr></table></figure><h2 id=\"shellcode\"><a class=\"markdownIt-Anchor\" href=\"#shellcode\">#</a> shellcode</h2>\n<p>64 位</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shellcode <span class=\"token operator\">=</span> <span class=\"token string\">b\"\\x48\\x31\\xc9\\x48\\xf7\\xe1\\x04\\x3b\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x52\\x53\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05\"</span></pre></td></tr></table></figure><h2 id=\"ret2libc\"><a class=\"markdownIt-Anchor\" href=\"#ret2libc\">#</a> ret2libc</h2>\n<h3 id=\"64位-2\"><a class=\"markdownIt-Anchor\" href=\"#64位-2\">#</a> 64 位</h3>\n<p>写 system 和 binsh 时可能需要在前面加 ret</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload <span class=\"token operator\">=</span> offset <span class=\"token operator\">*</span> <span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>prdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>bs_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>sys_a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"栈迁移\"><a class=\"markdownIt-Anchor\" href=\"#栈迁移\">#</a> 栈迁移</h2>\n<p>栈迁移大致在以下情况使用：</p>\n<ul>\n<li>栈空间太小不足以用来攻击</li>\n<li>为了利用缓冲区溢出攻击某些地址（待验证）</li>\n<li>迁移至.bss 段上确保权限足够</li>\n</ul>\n<p>函数返回时将栈中旧 ebp 弹入 ebp 寄存器，而对旧 ebp 进行伪造可以将栈底迁移至构造的 fake_stage，再次利用 ROP 执行 leave, ret 可以将 ebp 弹入 esp，实现完整的栈迁移。</p>\n<h2 id=\"ret2dlresolve\"><a class=\"markdownIt-Anchor\" href=\"#ret2dlresolve\">#</a> ret2dlresolve</h2>\n<h2 id=\"汇编\"><a class=\"markdownIt-Anchor\" href=\"#汇编\">#</a> 汇编</h2>\n<pre><code>lea eax, [addr]\t//将addr的\n</code></pre>\n<h1 id=\"全局变量位置\"><a class=\"markdownIt-Anchor\" href=\"#全局变量位置\">#</a> 全局变量位置</h1>\n<h2 id=\"libcso\"><a class=\"markdownIt-Anchor\" href=\"#libcso\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL2xpYmMuc28=\">libc.so</span></h2>\n<ul>\n<li><code>main_arena</code> : 存放各种 bin 的头</li>\n<li><code>_IO_list_all</code> :</li>\n<li></li>\n</ul>\n<h2 id=\"程序\"><a class=\"markdownIt-Anchor\" href=\"#程序\">#</a> 程序</h2>\n<ul>\n<li><code>fini_array</code></li>\n</ul>\n<h2 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\">#</a> 堆</h2>\n<ul>\n<li>tcache 存放 tcache bin</li>\n<li><code>_IO_FILE_plus</code> : fopen 打开的文件</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://waltcsz.github.io/2023/07/pwn%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",
            "url": "http://waltcsz.github.io/2023/07/pwn%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",
            "title": "pwn常用工具及环境配置",
            "date_published": "2023-07-19T14:59:36.000Z",
            "content_html": "<h1 id=\"环境\"><a class=\"markdownIt-Anchor\" href=\"#环境\">#</a> 环境</h1>\n<h2 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> python</h2>\n<h3 id=\"str和bytes转换\"><a class=\"markdownIt-Anchor\" href=\"#str和bytes转换\">#</a> str 和 bytes 转换</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>B <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#可忽略参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>S <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>B <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#不可忽略参数</span></pre></td></tr></table></figure><h3 id=\"字符串替换\"><a class=\"markdownIt-Anchor\" href=\"#字符串替换\">#</a> 字符串替换</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dynstr <span class=\"token operator\">=</span> dynstr<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"checksec\"><a class=\"markdownIt-Anchor\" href=\"#checksec\">#</a> checksec</h2>\n<ul>\n<li>RELRO got 表写权限 Partial RELRO 代表具有写权限</li>\n<li>stack canary 栈溢出保护</li>\n<li>NX：No-eXecute 不可执行保护</li>\n<li>PIE（ASLR）内存地址随机化 代码地址前几位随机 后几位固定</li>\n</ul>\n<h2 id=\"pwntools\"><a class=\"markdownIt-Anchor\" href=\"#pwntools\">#</a> PWNtools</h2>\n<h3 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">#python 调试</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">'b *0x080323'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#gdb 动态调试</span></pre></td></tr></table></figure><h3 id=\"elf\"><a class=\"markdownIt-Anchor\" href=\"#elf\">#</a> elf</h3>\n<p>当拥有 libc 文件时，利用 ret2libc 寻找 /bin/sh 字符串</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>libc<span class=\"token punctuation\">.</span>so<span class=\"token punctuation\">.</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>binsh <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>获取.dynstr 段的数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dynstr <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>get_section_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'.dynstr'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"libcsearcher\"><a class=\"markdownIt-Anchor\" href=\"#libcsearcher\">#</a> LibcSearcher</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#获取__libc_start_main 的真实地址储存至 lsm_a</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>libc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span>lsm_a<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#参数 1 为字符串，函数名，参数 2 为地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"rop\"><a class=\"markdownIt-Anchor\" href=\"#rop\">#</a> ROP</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzU0MjE4ODMzL2FydGljbGUvZGV0YWlscy8xMzA0MjY0MDQ=\">详细的资料</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rop<span class=\"token operator\">=</span>ROP<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">,</span>base<span class=\"token operator\">=</span><span class=\"token number\">0x400000</span><span class=\"token punctuation\">,</span>badchars<span class=\"token operator\">=</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#一般只需第一个参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t<span class=\"token comment\">#返回 bytes 数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rop<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>resolvable<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">#加入某函数调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">#直接填充一个值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rop<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t<span class=\"token comment\">#用好看的方式打印构造后</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rop<span class=\"token punctuation\">.</span>migrate<span class=\"token punctuation\">(</span>next_base<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>rop<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span>resolvable<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rop<span class=\"token punctuation\">.</span>ret2csu<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> edi<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘edi’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rsi<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘rsi’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rdx<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘rdx’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rbx<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘rbx’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rbp<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘rbp’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r12<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘r12’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r13<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘r13’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r14<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘r14’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r15<span class=\"token operator\">=</span>Padding<span class=\"token punctuation\">(</span>‘r15’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> call<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rop <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">(</span><span class=\"token string\">\"./main_no_relro_64\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rop<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bss_base<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span>elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x600988</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token number\">0x0000000000400771</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>stack_size<span class=\"token operator\">-</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>io<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"gdb\"><a class=\"markdownIt-Anchor\" href=\"#gdb\">#</a> GDB</h2>\n<ul>\n<li>\n<p>l</p>\n</li>\n<li>\n<p>b *0x999</p>\n<p>b func</p>\n<p>断点</p>\n</li>\n<li>\n<p>p func</p>\n<p>print 打印变量内容</p>\n</li>\n<li>\n<p>x /80wg 0x9323454</p>\n<p>读取内存内容 单位数 字节 单位字节数</p>\n</li>\n<li>\n<p>vmmap</p>\n</li>\n</ul>\n<h3 id=\"objdump\"><a class=\"markdownIt-Anchor\" href=\"#objdump\">#</a> objdump</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>objdump <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-j</span> .plt pwn\t<span class=\"token comment\">#查看.plt 表</span></pre></td></tr></table></figure>",
            "tags": [
                "工具"
            ]
        }
    ]
}