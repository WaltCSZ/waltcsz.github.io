{
    "version": "https://jsonfeed.org/version/1",
    "title": "Walt's Blog • All posts by \"异架构\" tag",
    "description": "",
    "home_page_url": "http://waltcsz.github.io",
    "items": [
        {
            "id": "http://waltcsz.github.io/2023/11/%E5%BC%82%E6%9E%B6%E6%9E%84/",
            "url": "http://waltcsz.github.io/2023/11/%E5%BC%82%E6%9E%B6%E6%9E%84/",
            "title": "异架构",
            "date_published": "2023-11-18T09:26:53.000Z",
            "content_html": "<h1 id=\"debug\"><a class=\"markdownIt-Anchor\" href=\"#debug\">#</a> debug</h1>\n<p>可以使用 qemu 的 - g 指定端口</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ qemu-aarch64 <span class=\"token parameter variable\">-g</span> <span class=\"token number\">1234</span> <span class=\"token parameter variable\">-L</span> /usr/aarch64-linux-gnu ./apollo</pre></td></tr></table></figure><p>然后使用 gdb-multiarch 进行调试，先指定架构，然后使用 remote 功能</p>\n<p>在另外一个终端（上一个你也用不了）打开 gdb -multiarch</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ gdb-multiarch ./apollo <span class=\"token parameter variable\">-q</span></pre></td></tr></table></figure><p>然后连接到端口进行远程调试</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gdb-peda$ <span class=\"token builtin class-name\">set</span> architecture aarch64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>The target architecture is assumed to be aarch64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gdb-peda$ target remote localhost:1234</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Remote debugging using localhost:1234</pre></td></tr></table></figure><h1 id=\"arm\"><a class=\"markdownIt-Anchor\" href=\"#arm\">#</a> ARM</h1>\n<h1 id=\"risc-v\"><a class=\"markdownIt-Anchor\" href=\"#risc-v\">#</a> RISC-V</h1>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>ABI 助记符</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x0</td>\n<td>zero</td>\n<td>zero</td>\n</tr>\n<tr>\n<td>x1</td>\n<td>ra</td>\n<td>返回地址</td>\n</tr>\n<tr>\n<td>x2</td>\n<td>sp</td>\n<td>栈指针</td>\n</tr>\n<tr>\n<td>x3</td>\n<td>gp</td>\n<td>全局指针</td>\n</tr>\n<tr>\n<td>x4</td>\n<td>tp</td>\n<td>线程指针</td>\n</tr>\n<tr>\n<td>x5-x7</td>\n<td>t0-t2</td>\n<td>临时寄存器</td>\n</tr>\n<tr>\n<td>x8-x9</td>\n<td>s0-s1</td>\n<td>callee 保存的寄存器</td>\n</tr>\n<tr>\n<td>x10-x17</td>\n<td>a0-a7</td>\n<td>参数寄存器</td>\n</tr>\n<tr>\n<td>x18-27</td>\n<td>s2-s11</td>\n<td>callee 保存的寄存器</td>\n</tr>\n<tr>\n<td>x28-x31</td>\n<td>t3-t6</td>\n<td>临时寄存器</td>\n</tr>\n</tbody>\n</table>\n<p>在参数保存之后，通过 <code>jal</code>  指令跳转到函数开始执行。jal 指令的规范为：</p>\n<pre><code class=\"language-assembly\">jal ra, offset\n</code></pre>\n<p>将会把下一条指令 (pc+4) 地址存放到 ra 寄存器中，然后跳转到当前地址 + offset 位置开始执行。<br>\n在子函数中，将会把 ra 寄存器存放到栈上，在函数返回时从栈上恢复 ra 寄存器，这里也就 <code>存在栈溢出的机会</code> 。</p>\n",
            "tags": [
                "异架构"
            ]
        }
    ]
}